const { validationResult } = require("express-validator");
const nodemailer = require("nodemailer");
const jwt = require("jsonwebtoken");
const bcryptjs = require("bcryptjs");
const fs = require("fs");
const extract = require("extract-zip");
const csv = require("csv-parser");
const saltRounds = 10;
const axios = require("axios");
var moment = require("moment");
const moment_timezone = require("moment-timezone");
const aws = require("aws-sdk");
const multer = require("multer");
const multerS3 = require("multer-s3");
var path = require("path");
var firebase = require("firebase");
moment().format();
var mongoose = require("mongoose");
const fetch = require("node-fetch");
var sha256 = require("crypto-js/sha256");
var base64 = require("crypto-js/enc-base64");
var utf8 = require("crypto-js/enc-utf8");
const BitlyClient = require("bitly").BitlyClient;
const bitly = new BitlyClient("a61f06cf6bc6025ba9dd5dc7a9dd4f1ab8379a5b");

var Users = require("../models/UsersModel");
var City = require("../models/CityModel");
var Zipcode = require("../models/ZipModel");
var Cuisine = require("../models/CuisineModel");
var Category = require("../models/CategoryModel");
var Brand = require("../models/BrandModel");
var Settings = require("../models/SettingsModel");
var Products = require("../models/ProductModel");
var CutOffTime = require("../models/CutOffTimeModel");
var Slider = require("../models/SliderModel");
var ProductType = require("../models/ProductTypeModel");
var Coupon = require("../models/CouponModel");
var AppSettings = require("../models/AppSettingsModel");
var Review = require("../models/ReviewModel");
var Shipping = require("../models/ShippingModel");
var States = require("../models/StatesModel");
var Address = require("../models/AddressModel");
var Checkout = require("../models/CheckoutModel");
var OrderNote = require("../models/OrderNoteModel");
const BulkOrderModel = require("../models/BulkOrderModel");
const BrandHoliday = require("../models/BrandHolidayModel");
const OrderOtherNoteModel = require("../models/OrderOtherNoteModel");
const Office = require("../models/OfficeModel");
const Rate = require("../models/RateModel");
const Unit = require("../models/UnitModel");
var Schedule = require("../models/ScheduleModel");
var Plan = require("../models/PlanModel");
var StockTransaction = require("../models/StockTransactionModel");
var StockTransactionProduct = require("../models/StockTransactionProductModel");
var CustomerPlan = require("../models/CustomerPlanModel");
var Wallet = require("../models/WalletModel");
var Vendor = require("../models/VendorsModel");
var StockCategory = require("../models/StockCategoryModel");
var StockProduct = require("../models/StockProductModel");
const CheckoutModel = require("../models/CheckoutModel");
var ExpenseCategories = require("../models/ExpenseCategoriesModel");
var CargoExpense = require("../models/CargoExpenseModel");
var PickupExpense = require("../models/PickupExpenseModel");
var OtherExpense = require("../models/OtherExpenseModel");
var MarketingExpense = require("../models/MarketingExpenseModel");
var TravelExpense = require("../models/TravelExpenseModel");
var ExpenseCreditRequisition = require("../models/ExpenseCreditRequisitionModel");
var CodPayment = require("../models/CodPaymentModel");
var Currency = require("../models/CurrencyModel");
var MasterCategory = require("../models/MasterCategoryModel");
var SectionImage = require("../models/SectionImageModel");
var Country = require("../models/CountryModel");
var DeactivateReason = require("../models/DeactivateReasonModel");
var ReturnReason = require("../models/ReturnReasonModel");
var MobileCategory = require("../models/MobileCategoryModel");
var Landing = require("../models/LandingModel");

const JWT_SECRET = "krishna";
const SMTP_HOST = "smtp.sendgrid.net";
const SMTP_PORT = "587";
const SMTP_USERNAME = "apikey";
const SMTP_PASSWORD = "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";
const EMAIL_FROM = "support@swagbag.com";

// Set S3 endpoint
const s3 = new aws.S3({
    region: "us-east-1",
    accessKeyId: "AKIAYFSHH6MZEYZ7IEGA",
    secretAccessKey: "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",
});

// Whatsapp
const wuser = "2000197474";
const wpwd = "K@GrvdhF";

const upload = multer({
    storage: multerS3({
        s3: s3,
        bucket: "swagbag-files",
        acl: "public-read",
        key: function (request, file, cb) {
            let extArray = file.mimetype.split("/");
            let extension = extArray[extArray.length - 1];
            cb(null, Date.now().toString() + Math.random().toString(36).substring(2, 7) + "." + extension);
        },
    }),
}).array("upload", 1);

const upload2_upload = multer({
    storage: multerS3({
        s3: s3,
        bucket: "swagbag-files",
        acl: "public-read",
        key: function (request, file, cb) {
            let extArray = file.mimetype.split("/");
            let extension = extArray[extArray.length - 1];
            cb(null, Date.now().toString() + Math.random().toString(36).substring(2, 7) + "." + extension);
        },
    }),
}).array("upload", 2);

const upload2 = multer({
    storage: multerS3({
        s3: s3,
        bucket: "swagbag-files",
        acl: "public-read",
        key: function (request, file, cb) {
            let extArray = file.mimetype.split("/");
            let extension = extArray[extArray.length - 1];
            cb(null, Date.now().toString() + Math.random().toString(36).substring(2, 7) + "." + extension);
        },
    }),
}).any();

const profile_image_upload = multer({
    storage: multerS3({
        s3: s3,
        bucket: "swagbag-files",
        acl: "public-read",
        key: function (request, file, cb) {
            let extArray = file.mimetype.split("/");
            let extension = extArray[extArray.length - 1];
            cb(null, Date.now().toString() + Math.random().toString(36).substring(2, 7) + "." + extension);
        },
    }),
}).array("profile_image", 1);

const driving_licence_upload = multer({
    storage: multerS3({
        s3: s3,
        bucket: "swagbag-files",
        acl: "public-read",
        key: function (request, file, cb) {
            let extArray = file.mimetype.split("/");
            let extension = extArray[extArray.length - 1];
            cb(null, Date.now().toString() + Math.random().toString(36).substring(2, 7) + "." + extension);
        },
    }),
}).array("driving_licence", 1);

const aadhar_card_upload = multer({
    storage: multerS3({
        s3: s3,
        bucket: "swagbag-files",
        acl: "public-read",
        key: function (request, file, cb) {
            let extArray = file.mimetype.split("/");
            let extension = extArray[extArray.length - 1];
            cb(null, Date.now().toString() + Math.random().toString(36).substring(2, 7) + "." + extension);
        },
    }),
}).array("aadhar_card", 1);

const other_doc_upload = multer({
    storage: multerS3({
        s3: s3,
        bucket: "swagbag-files",
        acl: "public-read",
        key: function (request, file, cb) {
            let extArray = file.mimetype.split("/");
            let extension = extArray[extArray.length - 1];
            cb(null, Date.now().toString() + Math.random().toString(36).substring(2, 7) + "." + extension);
        },
    }),
}).array("other_doc", 1);

const multi_upload = multer({
    storage: multerS3({
        s3: s3,
        bucket: "swagbag-files",
        acl: "public-read",
        key: function (request, file, cb) {
            let extArray = file.mimetype.split("/");
            let extension = extArray[extArray.length - 1];
            cb(null, Date.now().toString() + Math.random().toString(36).substring(2, 7) + "." + extension);
        },
    }),
}).array("upload", 5);

const upload_any = multer({
    storage: multerS3({
        s3: s3,
        bucket: "swagbag-files",
        acl: "public-read",
        key: function (request, file, cb) {
            let extArray = file.mimetype.split("/");
            let extension = extArray[extArray.length - 1];
            cb(null, Date.now().toString() + Math.random().toString(36).substring(2, 7) + "." + extension);
        },
    }),
}).any();

function gen_otp(mobile, res, successCallback, errorCallback) {
    var otp = Math.floor(Math.random() * (999999 - 111111 + 1)) + 111111;
    var where = {};
    where["otp"] = otp;
    Users.findOne(where).then((response) => {
        if (response == null) {
            var where = {};
            where["mobile"] = mobile;
            where["deleted"] = 0;
            Users.findOneAndUpdate(where, { otp: otp }, { new: true })
                .exec()
                .then((response) => {
                    axios
                        .get("https://2factor.in/API/V1/d4ab2eaa-d61e-11ea-9fa5-0200cd936042/SMS/" + mobile + "/" + otp + "/SMSOTP", {})
                        .then(function (response) {
                            ////console.log(response.data);
                            successCallback(otp);
                        })
                        .catch(function (error) {
                            res.status(200).send({
                                status: "error",
                                message: error.message,
                            });
                        });
                })
                .catch((error) => {
                    gen_otp(mobile, res);
                });
        } else {
            gen_otp(mobile, res);
        }
    });
}

async function email_otp(email) {
    var otp = Math.floor(Math.random() * (999999 - 111111 + 1)) + 111111;
    var where = {};
    where["email_otp"] = otp;
    Users.findOne(where).then((response) => {
        if (response == null) {
            var where = {};
            where["email"] = email;
            Users.findOneAndUpdate(
                where,
                {
                    email_otp: otp,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    let transporter = nodemailer.createTransport({
                        host: SMTP_HOST,
                        port: SMTP_PORT,
                        //secure: process.env.SMTP_SECURE, // true for 465, false for other ports
                        auth: {
                            user: SMTP_USERNAME, // generated ethereal user
                            pass: SMTP_PASSWORD, // generated ethereal password
                        },
                    });

                    transporter
                        .sendMail({
                            from: EMAIL_FROM, // sender address
                            to: email, // list of receivers
                            subject: "Your OTP is: " + otp, // Subject line
                            html: "Hi,<br/> Your OTP is: " + otp + " <br/> Thanks.  ", // html body
                        })
                        .catch((error) => {
                            console.log(error);
                        });
                })
                .catch((error) => {
                    email_otp(email);
                });
        } else {
            email_otp(email);
        }
    });
}

async function send_email(to, subject, message) {
    let transporter = nodemailer.createTransport({
        host: SMTP_HOST,
        port: SMTP_PORT,
        //secure: process.env.SMTP_SECURE, // true for 465, false for other ports
        auth: {
            user: SMTP_USERNAME, // generated ethereal user
            pass: SMTP_PASSWORD, // generated ethereal password
        },
    });

    transporter
        .sendMail({
            from: EMAIL_FROM, // sender address
            to: to, // list of receivers
            subject: subject, // Subject line
            html: message, // html body
        })
        .then((success) => {
            //console.log(success);
        })
        .catch((error) => {
            console.log(error);
        });
}

function gen_custom_sms(mobile, msg) {}

module.exports = {
    login: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
            });
        } else {
            var where = {};
            where["email"] = req.body.email;
            Users.findOne(where)
                .populate("role")
                .then((response) => {
                    if (response.active == 0) {
                        res.status(200).send({
                            status: "error",
                            message: "Account is inactive",
                        });
                        return;
                    }

                    // Load hash from the db, which was preivously stored
                    bcryptjs.compare(req.body.password, response.password, function (err, result) {
                        if (result == true) {
                            const accessToken = jwt.sign(
                                {
                                    email: req.body.email,
                                },
                                JWT_SECRET,
                                {
                                    expiresIn: "180000s",
                                }
                            );

                            var where = {};
                            where["deal"] = 1;
                            where["end_date"] = {
                                $lte: new Date(Date.now()),
                            };

                            Products.updateMany(where, {
                                $set: {
                                    deal: null,
                                },
                            }).then((response) => {
                                console.log(response);
                            });
                            // console.log(where);
                            // Products.findOne(where).then((response) => {
                            //     console.log(response);
                            // });

                            res.status(200).send({
                                status: "success",
                                message: "Logged in",
                                token: accessToken,
                                result: response,
                            });
                        } else {
                            res.status(200).send({
                                status: "error",
                                message: "Invalid email/password.",
                            });
                        }
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid email/password",
                    });
                });
        }
    },

    send_email_otp: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
            });
        } else {
            var where = {};
            where["email"] = req.body.email;
            Users.findOne(where)
                .then((response) => {
                    if (response != null) {
                        email_otp(req.body.email);
                        res.status(200).send({
                            status: "success",
                            message: "OTP has been sent.",
                        });
                    } else {
                        res.status(200).send({
                            status: "error",
                            message: "Invalid email address",
                        });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid email address",
                    });
                });
        }
    },

    otp_login: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
            });
        } else {
            var where = {};
            where["mobile"] = req.body.mobile;
            Users.findOne(where)
                .then((response) => {
                    if (response.otp == req.body.otp) {
                        const accessToken = jwt.sign(
                            {
                                mobile: req.body.mobile,
                            },
                            JWT_SECRET,
                            {
                                expiresIn: "1800s",
                            }
                        );
                        res.status(200).send({
                            status: "success",
                            message: "Logged in",
                            token: accessToken,
                            result: response,
                        });
                    } else {
                        res.status(200).send({
                            status: "error",
                            message: "Invalid mobile/password",
                        });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid mobile/password",
                    });
                });
        }
    },

    reset_password: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
            });
        } else {
            var where = {};
            where["email"] = req.body.email;
            Users.findOne(where)
                .then((response) => {
                    if (response != null) {
                        email_otp(req.body.email);
                        res.status(200).send({
                            status: "success",
                            message: "OTP has been sent.",
                        });
                    } else {
                        res.status(200).send({
                            status: "error",
                            message: "Invalid email address",
                        });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid email address",
                    });
                });
        }
    },

    chnage_password: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
            });
        } else {
            var where = {};
            where["email"] = req.body.email;
            Users.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "success",
                            message: "Invalid email addeess",
                        });
                    } else {
                        if (req.body.otp == response.email_otp) {
                            bcryptjs.genSalt(saltRounds, (err, salt) => {
                                bcryptjs.hash(req.body.password, salt, (err, hash) => {
                                    var where = {};
                                    where["email"] = req.body.email;
                                    Users.findOneAndUpdate(
                                        where,
                                        {
                                            password: hash,
                                            email_otp: "",
                                        },
                                        {
                                            new: true,
                                        }
                                    )
                                        .exec()
                                        .then((response) => {
                                            res.status(200).send({
                                                status: "success",
                                                message: "Pasword has been updated",
                                            });
                                        })
                                        .catch((error) => {
                                            res.status(200).send({
                                                status: "error",
                                                message: "Something went wrong",
                                            });
                                        });
                                });
                            });
                        } else {
                            res.status(200).send({
                                status: "error",
                                message: "Invalid OTP",
                            });
                        }
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid email address",
                    });
                });
        }
    },

    get_profile: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Users.findOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid user id",
                        token: req.token,
                    });
                });
        }
    },

    update_profile: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            if (req.body.password && req.body.password != "" && req.body.new_password && req.body.new_password != "" && req.body.current_password && req.body.current_password != "") {
                if (!req.body.new_password || req.body.new_password == "") {
                    res.status(200).send({
                        status: "error",
                        message: "Enter new password",
                        token: req.token,
                    });
                    return;
                }

                if (!req.body.password || req.body.password == "") {
                    res.status(200).send({
                        status: "error",
                        message: "Enter password",
                        token: req.token,
                    });
                    return;
                }

                if (req.body.password != req.body.new_password) {
                    res.status(200).send({
                        status: "error",
                        message: "Password and Confirm Password do not match",
                        token: req.token,
                    });
                    return;
                }

                var where = {};
                where["_id"] = req.body.id;
                Users.findOne(where).then((response) => {
                    bcryptjs.compare(req.body.current_password, response.password, function (err, result) {
                        if (result == true) {
                            var where = {};
                            where["_id"] = req.body.id;
                            bcryptjs.genSalt(saltRounds, (err, salt) => {
                                bcryptjs.hash(req.body.password, salt, (err, hash) => {
                                    Users.findOneAndUpdate(
                                        where,
                                        {
                                            full_name: req.body.full_name ? req.body.full_name : "",
                                            email: req.body.email ? req.body.email : "",
                                            mobile: req.body.mobile ? req.body.mobile : "",
                                            password: req.body.password ? hash : req.body.old_password,
                                            update_date: moment().format(),
                                            user_type: req.body.group ? req.body.group : "",
                                            salary: req.body.salary,
                                            office: req.body.office,
                                            role: req.body.role,
                                        },
                                        {
                                            new: true,
                                        }
                                    )
                                        .exec()
                                        .then((response) => {
                                            res.status(200).send({
                                                status: "success",
                                                message: "Profile has been updated.",
                                                token: req.token,
                                            });
                                        })
                                        .catch((error) => {
                                            res.status(200).send({
                                                status: "error",
                                                message: "Something went wrong",
                                                token: req.token,
                                            });
                                        });
                                });
                            });
                        } else {
                            res.status(200).send({
                                status: "error",
                                message: "Invalid current password.",
                            });
                        }
                    });
                });
            } else {
                var where = {};
                where["_id"] = req.body.id;
                bcryptjs.genSalt(saltRounds, (err, salt) => {
                    bcryptjs.hash(req.body.password, salt, (err, hash) => {
                        Users.findOneAndUpdate(
                            where,
                            {
                                full_name: req.body.full_name ? req.body.full_name : "",
                                email: req.body.email ? req.body.email : "",
                                mobile: req.body.mobile ? req.body.mobile : "",
                                password: req.body.password ? hash : req.body.old_password,
                                update_date: moment().format(),
                                user_type: req.body.group ? req.body.group : "",
                                salary: req.body.salary,
                                office: req.body.office,
                                role: req.body.role,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Profile has been updated..",
                                    token: req.token,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    });
                });
            }
        }
    },

    create_user: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["mobile"] = req.body.mobile;
            Users.findOne(where)
                .then((response) => {
                    if (response != null) {
                        res.status(200).send({
                            status: "error",
                            message: "Mobile already in use.",
                        });
                    } else {
                        var where = {};
                        where["email"] = req.body.email;
                        Users.findOne(where)
                            .then((response) => {
                                if (response != null) {
                                    res.status(200).send({
                                        status: "error",
                                        message: "Email address already in use.",
                                    });
                                } else {
                                    bcryptjs.genSalt(saltRounds, (err, salt) => {
                                        bcryptjs.hash(req.body.password, salt, (err, hash) => {
                                            var userdata = new Users({
                                                full_name: req.body.full_name,
                                                email: req.body.email,
                                                mobile: req.body.mobile,
                                                password: hash,
                                                user_type: req.body.user_type,
                                                active: 0,
                                                email_verified: 0,
                                                profile_image: "",
                                            });

                                            userdata.save(function (err, response) {
                                                if (err) {
                                                    res.status(200).send({
                                                        status: "error",
                                                        message: err,
                                                        token: req.token,
                                                    });
                                                } else {
                                                    res.status(200).send({
                                                        status: "success",
                                                        message: "Account has been created successfully.",
                                                        data: response,
                                                    });
                                                }
                                            });
                                        });
                                    });
                                }
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Invalid mobile/password",
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid mobile/password",
                    });
                });
        }
    },

    user_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.user && req.query.user != "") {
                where["$or"] = [{ full_name: { $regex: ".*" + req.query.user, $options: "i" } }, { email: { $regex: ".*" + req.query.user, $options: "i" } }, { mobile: { $regex: ".*" + req.query.user, $options: "i" } }];
            }

            where["user_type"] = "admin";

            if (req.query.active != "") {
                where["active"] = req.query.active;
            }

            where["deleted"] = 0;

            Users.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .populate("role")
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    Users.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_user_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Users.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "user not found",
                            token: req.token,
                        });
                    } else {
                        if (response.active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        Users.findOneAndUpdate(
                            where,
                            {
                                active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                                return;
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                                return;
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    delete_user: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Users.deleteOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_profile_image: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            upload(req, res, function (error) {
                if (error) {
                    res.status(200).send({
                        status: "error",
                        message: error.code,
                        token: req.token,
                    });
                } else {
                    var old_image = req.query.old_image.split("/").pop().split("#")[0].split("?")[0];
                    var params = {
                        Bucket: "swagbag-files",
                        Key: old_image,
                    };

                    s3.deleteObject(params, function (err, data) {
                        if (err) console.log(err, err.stack);
                    });

                    var where = {};
                    where["_id"] = req.query.id;
                    Users.findOneAndUpdate(
                        where,
                        {
                            profile_image: req.files[0].location,
                            update_date: moment().format(),
                        },
                        {
                            new: true,
                        }
                    )
                        .exec()
                        .then((response) => {
                            res.status(200).send({
                                status: "success",
                                message: "Profile image has been updated",
                                token: req.token,
                                profile_image: req.files[0].location,
                            });
                        });
                }
            });
        }
    },

    ////// City Start /////////
    create_city: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            upload2(req, res, function (error2) {
                if (error2) {
                    req.status(200).send({
                        status: "error",
                        message: error2,
                    });

                    return;
                }

                var where = {};
                where["name"] = req.body.name;
                City.findOne(where).then((response) => {
                    if (response != null) {
                        res.status(200).send({
                            status: "error",
                            message: "City exist in the database.",
                        });
                    } else {
                        var CityData = new City({
                            country: req.body.country,
                            name: req.body.name,
                            additional_cost: req.body.additional_cost,
                        });
                        CityData.save(function (err, response) {
                            if (err) {
                                res.status(200).send({
                                    status: "error",
                                    message: err,
                                    token: req.token,
                                });
                            } else {
                                res.status(200).send({
                                    status: "success",
                                    message: "City has been created successfully.",
                                });
                            }
                        });
                    }
                });
            });
        }
    },

    city_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.name != "") {
                where["name"] = {
                    $regex: ".*" + req.query.name,
                    $options: "i",
                };
            }

            if (req.query.active != "") {
                where["active"] = req.query.active;
            }

            where["deleted"] = 0;

            City.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    City.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_city_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            City.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "City not found",
                            token: req.token,
                        });
                    } else {
                        if (response.active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        City.findOneAndUpdate(
                            where,
                            {
                                active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    update_city_status_default: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            City.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "City not found",
                            token: req.token,
                        });
                    } else {
                        if (response.isDefault == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        City.findOneAndUpdate(
                            where,
                            {
                                isDefault: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    update_city_footer_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            City.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "City not found",
                            token: req.token,
                        });
                    } else {
                        if (response.footer == 0) {
                            var footer = 1;
                        } else {
                            var footer = 0;
                        }
                        City.findOneAndUpdate(
                            where,
                            {
                                footer: footer,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: footer,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    get_city: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            City.findOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid city id",
                        token: req.token,
                    });
                });
        }
    },

    update_city: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            upload2(req, res, function (error) {
                if (error) {
                    res.status(200).send({
                        status: "error",
                        message: error.code,
                        token: req.token,
                    });
                    return;
                }

                var where = {};
                where["_id"] = req.body.id;

                var updatedata = {};
                updatedata["name"] = req.body.name;
                updatedata["country"] = req.body.country;
                updatedata["additional_cost"] = req.body.additional_cost;

                City.findOneAndUpdate(where, updatedata, {
                    new: true,
                })
                    .exec()
                    .then((response) => {
                        res.status(200).send({
                            status: "success",
                            message: "City has been updated..",
                            token: req.token,
                        });
                    });
            });
        }
    },
    delete_city: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            City.findOneAndUpdate(
                where,
                {
                    deleted: 1,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "City has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    ///// City End ////////

    ////// zipcode Start /////////

    all_city_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["active"] = 1;
            where["deleted"] = 0;
            City.find(where)
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    create_zipcode: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["deleted"] = 0;
            where["name"] = req.body.name;
            Zipcode.findOne(where)
                .then((response) => {
                    if (response != null) {
                        res.status(200).send({
                            status: "error",
                            message: "Zip exist in the database.",
                        });
                    } else {
                        var zipcodedata = new Zipcode({
                            name: req.body.name,
                            timeslot: req.body.timeslot,
                            city: req.body.city,
                            additional_cost: req.body.additional_cost ? req.body.additional_cost : 0,
                            cod: req.body.cod == "false" ? false : true,
                            express: req.body.express == "false" ? false : true,
                        });

                        zipcodedata.save(function (err, response) {
                            if (err) {
                                res.status(200).send({
                                    status: "error",
                                    message: err,
                                    token: req.token,
                                });
                            } else {
                                res.status(200).send({
                                    status: "success",
                                    message: "Zip code has been created successfully.",
                                    data: response,
                                });
                            }
                        });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Zip name exist in the database.",
                    });
                });
        }
    },

    zipcode_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.name && req.query.name != "") {
                where["name"] = {
                    $regex: ".*" + req.query.name,
                    $options: "i",
                };
            }

            if (req.query.active && req.query.active != "") {
                where["active"] = req.query.active;
            }

            where["deleted"] = 0;

            Zipcode.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .populate("city", "name")
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    Zipcode.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_zipcode_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Zipcode.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Zipcode not found",
                            token: req.token,
                        });
                    } else {
                        if (response.active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        Zipcode.findOneAndUpdate(
                            where,
                            {
                                active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },
    get_zipcode: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Zipcode.findOne(where)
                .populate("city", "name")
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid zipcode id",
                        token: req.token,
                    });
                });
        }
    },

    update_zipcode: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Zipcode.findOneAndUpdate(
                where,
                {
                    name: req.body.name ? req.body.name : "",
                    timeslot: req.body.timeslot ? req.body.timeslot : "",
                    city: req.body.city ? req.body.city : null,
                    additional_cost: req.body.additional_cost ? req.body.additional_cost : 0,
                    update_date: moment().format(),
                    cod: req.body.cod == "false" ? false : true,
                    express: req.body.express == "false" ? false : true,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Zip code has been updated",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },
    delete_zipcode: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Zipcode.findOneAndUpdate(
                where,
                {
                    deleted: 1,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Zipcode has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    ///// Zipcode End ////////

    ////// Cuisine Start /////////
    create_cuisine: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            upload(req, res, function (error) {
                if (error) {
                    // res.status(200).send({
                    //     status: "error",
                    //     message: error.code,
                    //     token: req.token,
                    // });

                    var where = {};
                    where["name"] = req.query.name;
                    where["deleted"] = 0;
                    Cuisine.findOne(where).then((response) => {
                        if (response != null) {
                            res.status(200).send({
                                status: "error",
                                message: "Cuisine exist in the database.",
                            });
                        } else {
                            var Cuisinedata = new Cuisine({
                                description: req.query.description,
                                description_after_content: req.query.description_after_content,
                                name: req.query.name,
                            });
                            Cuisinedata.save(function (err, response) {
                                if (err) {
                                    res.status(200).send({
                                        status: "error",
                                        message: err,
                                        token: req.token,
                                    });
                                } else {
                                    res.status(200).send({
                                        status: "success",
                                        message: "Cuisine has been created successfully.",
                                    });
                                }
                            });
                        }
                    });
                } else {
                    var where = {};
                    where["name"] = req.query.name;
                    Cuisine.findOne(where).then((response) => {
                        if (response != null) {
                            res.status(200).send({
                                status: "error",
                                message: "Cuisine exist in the database.",
                            });
                        } else {
                            var Cuisinedata = new Cuisine({
                                name: req.query.name,
                                description: req.query.description,
                                description_after_content: req.query.description_after_content,
                                file: req.files[0].location,
                            });
                            Cuisinedata.save(function (err, response) {
                                if (err) {
                                    res.status(200).send({
                                        status: "error",
                                        message: err,
                                        token: req.token,
                                    });
                                } else {
                                    res.status(200).send({
                                        status: "success",
                                        message: "Cuisine has been created successfully.",
                                    });
                                }
                            });
                        }
                    });
                }
            });
        }
    },

    cuisine_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.name != "") {
                where["name"] = {
                    $regex: ".*" + req.query.name,
                    $options: "i",
                };
            }

            if (req.query.active != "") {
                where["active"] = req.query.active;
            }

            where["deleted"] = 0;

            Cuisine.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    Cuisine.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_cuisine_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Cuisine.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Cuisine not found",
                            token: req.token,
                        });
                    } else {
                        if (response.active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        Cuisine.findOneAndUpdate(
                            where,
                            {
                                active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },
    get_cuisine: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Cuisine.findOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid cuisine id",
                        token: req.token,
                    });
                });
        }
    },

    update_cuisine: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            upload(req, res, function (error) {
                if (error) {
                    // res.status(200).send({
                    //     status: "error",
                    //     message: error.code,
                    //     token: req.token,
                    // });

                    ////

                    var where = {};
                    where["_id"] = {
                        $ne: req.query.id,
                    };
                    where["slug"] = req.query.slug;
                    Cuisine.findOne(where).then((response) => {
                        if (response) {
                            res.status(200).send({
                                status: "error",
                                message: "Slug already in use.",
                                token: req.token,
                            });
                        } else {
                            var where = {};
                            where["_id"] = req.query.id;
                            Cuisine.findOneAndUpdate(
                                where,
                                {
                                    description: req.query.description,
                                    slug: req.query.slug,
                                    description_after_content: req.query.description_after_content,
                                    name: req.query.name,
                                    update_date: moment().format(),
                                    //file: ""
                                },
                                {
                                    new: true,
                                }
                            )
                                .exec()
                                .then((response) => {
                                    res.status(200).send({
                                        status: "success",
                                        message: "Cuisine has been updated",
                                        token: req.token,
                                    });
                                    return;
                                });
                        }
                    });

                    ////
                } else {
                    var where = {};
                    where["_id"] = {
                        $ne: req.query.id,
                    };
                    where["slug"] = req.query.slug;
                    Cuisine.findOne(where).then((response) => {
                        if (response) {
                            res.status(200).send({
                                status: "error",
                                message: "Slug already in use.",
                                token: req.token,
                            });
                        } else {
                            var where = {};
                            where["_id"] = req.query.id;
                            var updatedata = {};
                            updatedata["name"] = req.query.name;
                            updatedata["slug"] = req.query.slug;
                            updatedata["update_date"] = moment().format();
                            if (req.files[0]) {
                                updatedata["file"] = req.files[0].location;
                            }
                            updatedata["description"] = req.query.description;
                            updatedata["description_after_content"] = req.query.description_after_content;

                            Cuisine.findOneAndUpdate(where, updatedata, {
                                new: true,
                            })
                                .exec()
                                .then((response) => {
                                    res.status(200).send({
                                        status: "success",
                                        message: "Cuisine has been updated..",
                                        token: req.token,
                                    });
                                });
                        }
                    });
                }
            });
        }
    },

    delete_cuisine: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Cuisine.findOneAndUpdate(
                where,
                {
                    deleted: 1,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Cuisine has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    ///// City End ////////

    /////// Start Categiry ///////

    add_category: function (req, res) {
        if (!req.query.name || req.query.name == "") {
            res.status(200).send({
                status: "error",
                message: "Enter category name",
                token: req.token,
            });
        } else {
            upload(req, res, function (error) {
                if (req.files.length > 0) {
                    var Categorydata = new Category({
                        brands: req.query.selected_brands != "" ? req.query.selected_brands.split(",") : null,
                        name: req.query.name,
                        description: req.query.description,
                        description_after_content: req.query.description_after_content,
                        parent: req.query.parent == "" ? null : req.query.parent,
                        master: req.query.master == "" ? null : req.query.master,
                        file: req.files[0].location,
                    });
                    Categorydata.save(function (err, response) {
                        if (err) {
                            res.status(200).send({
                                status: "error",
                                message: err,
                                token: req.token,
                            });
                        } else {
                            if (req.query.parent == "") {
                                // Net Suit Start

                                var data = JSON.stringify({
                                    action: "CREATE",
                                    fields: {
                                        id: response._id,
                                        name: req.query.name,
                                    },
                                });

                                var config = {
                                    method: "post",
                                    url: "https://7454786.extforms.netsuite.com/app/site/hosting/scriptlet.nl?script=83&deploy=1&compid=7454786&h=a41cab773f9aeeca21ff",
                                    headers: {
                                        "User-Agent": "Mozilla/5.0",
                                        token: "123",
                                        "Content-Type": "application/json",
                                        Cookie: "NS_ROUTING_VERSION=LAGGING",
                                    },
                                    data: data,
                                };

                                axios(config)
                                    .then(function (response) {
                                        console.log(JSON.stringify(response.data));
                                    })
                                    .catch(function (error) {
                                        console.log(error);
                                    });

                                // Net Suit End
                            } else {
                                // Net Suit Start

                                var data = JSON.stringify({
                                    action: "CREATE",
                                    fields: {
                                        id: response._id,
                                        name: req.query.name,
                                    },
                                });

                                var config = {
                                    method: "post",
                                    url: "https://7454786.extforms.netsuite.com/app/site/hosting/scriptlet.nl?script=82&deploy=1&compid=7454786&h=29e65003abf65304e407",
                                    headers: {
                                        "User-Agent": "Mozilla/5.0",
                                        token: "123",
                                        "Content-Type": "application/json",
                                        Cookie: "NS_ROUTING_VERSION=LAGGING",
                                    },
                                    data: data,
                                };

                                axios(config)
                                    .then(function (response) {
                                        console.log(JSON.stringify(response.data));
                                    })
                                    .catch(function (error) {
                                        console.log(error);
                                    });

                                // Net Suit End
                            }

                            res.status(200).send({
                                status: "success",
                                message: "Category has been created successfully.",
                            });
                        }
                    });
                } else {
                    var Categorydata = new Category({
                        brands: req.query.selected_brands != "" ? req.query.selected_brands.split(",") : null,
                        name: req.query.name,
                        description: req.query.description,
                        description_after_content: req.query.description_after_content,
                        parent: req.query.parent == "" ? null : req.query.parent,
                        master: req.query.master == "" ? null : req.query.master,
                    });
                    Categorydata.save(function (err, response) {
                        if (err) {
                            res.status(200).send({
                                status: "error",
                                message: err,
                                token: req.token,
                            });
                        } else {
                            if (req.query.parent == "") {
                                // Net Suit Start

                                var data = JSON.stringify({
                                    action: "CREATE",
                                    fields: {
                                        id: response._id,
                                        name: req.query.name,
                                    },
                                });

                                var config = {
                                    method: "post",
                                    url: "https://7454786.extforms.netsuite.com/app/site/hosting/scriptlet.nl?script=83&deploy=1&compid=7454786&h=a41cab773f9aeeca21ff",
                                    headers: {
                                        "User-Agent": "Mozilla/5.0",
                                        token: "123",
                                        "Content-Type": "application/json",
                                        Cookie: "NS_ROUTING_VERSION=LAGGING",
                                    },
                                    data: data,
                                };

                                axios(config)
                                    .then(function (response) {
                                        console.log(JSON.stringify(response.data));
                                    })
                                    .catch(function (error) {
                                        console.log(error);
                                    });

                                // Net Suit End
                            } else {
                                // Net Suit Start

                                var data = JSON.stringify({
                                    action: "CREATE",
                                    fields: {
                                        id: response._id,
                                        name: req.query.name,
                                    },
                                });

                                var config = {
                                    method: "post",
                                    url: "https://7454786.extforms.netsuite.com/app/site/hosting/scriptlet.nl?script=82&deploy=1&compid=7454786&h=29e65003abf65304e407",
                                    headers: {
                                        "User-Agent": "Mozilla/5.0",
                                        token: "123",
                                        "Content-Type": "application/json",
                                        Cookie: "NS_ROUTING_VERSION=LAGGING",
                                    },
                                    data: data,
                                };

                                axios(config)
                                    .then(function (response) {
                                        console.log(JSON.stringify(response.data));
                                    })
                                    .catch(function (error) {
                                        console.log(error);
                                    });
                                // Net Suit End
                            }

                            res.status(200).send({
                                status: "success",
                                message: "Category has been created successfully.",
                            });
                        }
                    });
                }
            });
        }
    },

    category_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.name != "") {
                where["name"] = {
                    $regex: ".*" + req.query.name,
                    $options: "i",
                };
            }

            if (req.query.active != "") {
                where["active"] = req.query.active;
            }

            if (req.query.parent != "") {
                where["parent"] = req.query.parent;
            }

            where["deleted"] = 0;

            Category.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .populate("parent", "name")
                .populate("master", "name")
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    Category.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_category_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Category.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Category not found",
                            token: req.token,
                        });
                    } else {
                        if (response.active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        Category.findOneAndUpdate(
                            where,
                            {
                                active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    get_category: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Category.findOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid category id",
                        token: req.token,
                    });
                });
        }
    },

    delete_category: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Category.findOneAndUpdate(
                where,
                {
                    deleted: 1,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Category has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    update_category: function (req, res) {
        if (!req.query.name || req.query.name == "") {
            res.status(200).send({
                status: "error",
                message: "Enter category name",
                token: req.token,
            });
        }
        if (!req.query.id || req.query.id == "") {
            res.status(200).send({
                status: "error",
                message: "Enter category id",
                token: req.token,
            });
        } else {
            upload(req, res, function (error) {
                if (error) {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                    return;

                    ////
                } else {
                    var where = {};
                    where["_id"] = {
                        $ne: req.query.id,
                    };
                    where["slug"] = req.query.slug;
                    Category.findOne(where).then((response) => {
                        if (response) {
                            res.status(200).send({
                                status: "error",
                                message: "Slug already in use.",
                                token: req.token,
                            });
                        } else {
                            var where = {};
                            where["_id"] = req.query.id;
                            var updatedata = {};
                            updatedata["name"] = req.query.name;
                            updatedata["slug"] = req.query.slug;
                            if (req.files[0]) {
                                updatedata["parent"] = req.query.parent == "" ? null : req.query.parent;
                            }

                            updatedata["update_date"] = moment().format();
                            if (req.files[0]) {
                                updatedata["file"] = req.files[0].location;
                            }

                            updatedata["description"] = req.query.description;
                            updatedata["description_after_content"] = req.query.description_after_content;
                            updatedata["master"] = req.query.master;
                            updatedata["parent"] = req.query.parent == "" ? null : req.query.parent;
                            (updatedata["brands"] = req.body.selected_brands != "" ? req.body.selected_brands.split(",") : null),
                                Category.findOneAndUpdate(where, updatedata, {
                                    new: true,
                                })
                                    .exec()
                                    .then((response) => {
                                        res.status(200).send({
                                            status: "success",
                                            message: "Category has been updated..",
                                            token: req.token,
                                        });
                                    });
                        }
                    });
                }
            });
        }
    },

    parent_category_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["parent"] = null;
            where["active"] = 1;
            where["deleted"] = 0;

            Category.find(where)
                .populate("master")
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    ///// End Category ///////////

    ///// Start Brand ///////////

    add_brand: function (req, res) {
        upload_any(req, res, function (error) {
            var where = {};
            where["name"] = req.body.name;
            where["deleted"] = 0;
            Brand.findOne(where).then((response) => {
                if (response != null) {
                    res.status(200).send({
                        status: "error",
                        message: "Brand exist in the database.",
                    });
                } else {
                    var uploaddata = {};
                    for (let i = 0; i < req.files.length; i++) {
                        uploaddata[req.files[i].fieldname] = req.files[i].location;
                    }

                    uploaddata["name"] = req.body.name;
                    uploaddata["desc"] = req.body.desc;
                    uploaddata["desc2"] = req.body.desc2;
                    uploaddata["desc3"] = req.body.desc3;
                    uploaddata["short_desc"] = req.body.short_desc;
                    uploaddata["seo_title"] = req.body.seo_title;
                    uploaddata["seo_desc"] = req.body.seo_desc;

                    var Branddata = new Brand(uploaddata);
                    Branddata.save(function (err, response) {
                        if (err) {
                            res.status(200).send({
                                status: "error",
                                message: err,
                            });
                        } else {
                            // Net Suit Start

                            var data = JSON.stringify({
                                action: "CREATE",
                                fields: {
                                    id: response._id,
                                    name: req.body.name,
                                },
                            });

                            var config = {
                                method: "post",
                                url: "https://7454786.extforms.netsuite.com/app/site/hosting/scriptlet.nl?script=76&deploy=1&compid=7454786&h=f17464a12646bcddeb0a",
                                headers: {
                                    "User-Agent": "Mozilla/5.0",
                                    token: "123",
                                    "Content-Type": "application/json",
                                    Cookie: "NS_ROUTING_VERSION=LAGGING",
                                },
                                data: data,
                            };

                            axios(config)
                                .then(function (response) {
                                    console.log(JSON.stringify(response.data));
                                })
                                .catch(function (error) {
                                    console.log(error);
                                });

                            // Net Suit End

                            res.status(200).send({
                                status: "success",
                                message: "Brand has been created successfully.",
                            });
                        }
                    });
                }
            });
        });
    },

    brand_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.name != "") {
                where["name"] = {
                    $regex: ".*" + req.query.name,
                    $options: "i",
                };
            }

            if (req.query.active != "") {
                where["active"] = req.query.active;
            }

            where["deleted"] = 0;

            Brand.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .populate("parent", "name")
                .sort({
                    name: 1,
                })
                .then((response) => {
                    Brand.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_brand_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Brand.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Brand not found",
                            token: req.token,
                        });
                    } else {
                        if (response.active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        Brand.findOneAndUpdate(
                            where,
                            {
                                active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    update_brand: function (req, res) {
        upload_any(req, res, function (error) {
            var where = {};
            where["_id"] = req.body.id;

            var updatedata = {};
            updatedata["name"] = req.body.name;
            updatedata["slug"] = req.body.slug;
            updatedata["desc"] = req.body.desc;

            updatedata["desc2"] = req.body.desc2;
            updatedata["desc3"] = req.body.desc3;

            updatedata["seo_title"] = req.body.seo_title;
            updatedata["seo_desc"] = req.body.seo_desc;

            updatedata["update_date"] = moment().format();

            for (let i = 0; i < req.files.length; i++) {
                updatedata[req.files[i].fieldname] = req.files[i].location;
            }

            Brand.findOneAndUpdate(where, updatedata, {
                new: true,
            })
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Brand has been updated..",
                        token: req.token,
                    });
                });
        });
    },

    get_brand: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Brand.findOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid brand id",
                        token: req.token,
                    });
                });
        }
    },

    delete_brand: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            if (req.body.id) {
                where["_id"] = req.body.id;
            }

            if (req.query.id) {
                where["_id"] = req.query.id;
            }

            Brand.findOneAndUpdate(
                where,
                {
                    deleted: 1,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Brand has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    ///// End Brand ///////////

    ///// Start Users ///////////

    add_vendor: function (req, res) {
        if (!req.query.name || req.query.name == "") {
            res.status(200).send({
                status: "error",
                message: "Enter brand name",
                token: req.token,
            });
        } else {
            upload(req, res, function (error) {
                var where = {};
                where["name"] = req.query.name;
                where["deleted"] = 0;
                Users.findOne(where).then((response) => {
                    if (response != null) {
                        res.status(200).send({
                            status: "error",
                            message: "Users exist in the database.",
                        });
                    } else {
                        var Usersdata = new Users({
                            user_type: "vendor",
                            full_name: req.query.name,
                            note: req.query.note,
                            email: req.query.email,
                            mobile: req.query.mobile,
                            address: req.query.address,
                            website: req.query.website,
                            contact_person1: {
                                name: req.query.contact_person1_name,
                                email: req.query.contact_person1_email,
                                mobile: req.query.contact_person1_mobile,
                            },
                            contact_person2: {
                                name: req.query.contact_person2_name,
                                email: req.query.contact_person2_email,
                                mobile: req.query.contact_person2_mobile,
                            },
                            contact_person3: {
                                name: req.query.contact_person3_name,
                                email: req.query.contact_person3_email,
                                mobile: req.query.contact_person3_mobile,
                            },
                        });
                        Usersdata.save(function (err, response) {
                            if (err) {
                                res.status(200).send({
                                    status: "error",
                                    message: err,
                                    token: req.token,
                                });
                            } else {
                                res.status(200).send({
                                    status: "success",
                                    message: "Vendor has been created successfully.",
                                });
                            }
                        });
                    }
                });
            });
        }
    },

    vendor_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.name != "") {
                where["name"] = {
                    $regex: ".*" + req.query.name,
                    $options: "i",
                };
            }

            if (req.query.active != "") {
                where["active"] = req.query.active;
            }

            where["deleted"] = 0;
            where["user_type"] = "vendor";

            Users.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .populate("parent", "name")
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    Users.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_vendor_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Users.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Users not found",
                            token: req.token,
                        });
                    } else {
                        if (response.active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        Users.findOneAndUpdate(
                            where,
                            {
                                active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    update_vendor: function (req, res) {
        if (!req.query.name || req.query.name == "") {
            res.status(200).send({
                status: "error",
                message: "Enter vendor name",
                token: req.token,
            });
        }
        if (!req.query.id || req.query.id == "") {
            res.status(200).send({
                status: "error",
                message: "Enter vendor id",
                token: req.token,
            });
        } else {
            upload(req, res, function (error) {
                var where = {};
                where["_id"] = req.query.id;
                var updatedata = {};
                updatedata["full_name"] = req.query.name;
                updatedata["note"] = req.query.note;
                updatedata["email"] = req.query.email;
                updatedata["mobile"] = req.query.mobile;
                updatedata["address"] = req.query.address;
                updatedata["website"] = req.query.website;
                updatedata["update_date"] = moment().format();
                updatedata["contact_person1"] = {
                    name: req.query.contact_person1_name,
                    email: req.query.contact_person1_email,
                    mobile: req.query.contact_person1_mobile,
                };
                updatedata["contact_person2"] = {
                    name: req.query.contact_person2_name,
                    email: req.query.contact_person2_email,
                    mobile: req.query.contact_person2_mobile,
                };
                updatedata["contact_person3"] = {
                    name: req.query.contact_person3_name,
                    email: req.query.contact_person3_email,
                    mobile: req.query.contact_person3_mobile,
                };

                Users.findOneAndUpdate(where, updatedata, {
                    new: true,
                })
                    .exec()
                    .then((response) => {
                        res.status(200).send({
                            status: "success",
                            message: "Users has been updated",
                            token: req.token,
                        });
                    });
            });
        }
    },

    get_vendor: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Users.findOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid vendor id",
                        token: req.token,
                    });
                });
        }
    },

    delete_vendor: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Users.findOneAndUpdate(
                where,
                {
                    deleted: 1,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Users has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    ///// End Users ///////////

    //// Settings Start ///////

    settings_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            if (req.query.name != "") {
                where["name"] = {
                    $regex: ".*" + req.query.name,
                    $options: "i",
                };
            }
            Settings.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .then((response) => {
                    Settings.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    app_settings_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            AppSettings.find(where, null)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    get_settings: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Settings.findOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_settings: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            upload(req, res, function (error) {
                if (error) {
                    res.status(200).send({
                        status: "error",
                        message: error.code,
                        token: req.token,
                    });
                } else {
                    if (req.files[0]) {
                        var where = {};
                        where["_id"] = req.body.id;

                        update_data = {};
                        update_data["value"] = req.files[0].location;

                        Settings.findOneAndUpdate(where, update_data, {
                            new: true,
                        })
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Settings updated",
                                    token: req.token,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    } else {
                        var where = {};
                        where["_id"] = req.body.id;

                        update_data = {};
                        update_data["value"] = req.body.page_value;

                        Settings.findOneAndUpdate(where, update_data, {
                            new: true,
                        })
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Settings updated",
                                    token: req.token,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                    // res.status(200).send({
                    //   message: req.files[0].location
                    // });
                }
            });
        }
    },

    update_app_settings: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["iis"] = "123456";

            update_data = {};
            update_data["header_bg_color"] = req.body.header_bg_color;
            update_data["popup_bg_color"] = req.body.popup_bg_color;
            update_data["popup_title"] = req.body.popup_title;
            update_data["popup_title_color"] = req.body.popup_title_color;
            update_data["popup_subtitle"] = req.body.popup_subtitle;
            update_data["subtitle_title_color"] = req.body.subtitle_title_color;
            update_data["popup_desctiption"] = req.body.popup_desctiption;
            update_data["subtitle_desctiption_color"] = req.body.subtitle_desctiption_color;
            update_data["slider_text"] = req.body.slider_text;
            update_data["slider_text_color"] = req.body.slider_text_color;
            update_data["slider_text_bg_color"] = req.body.slider_text_bg_color;
            update_data["service_popup_bg_color"] = req.body.service_popup_bg_color;
            update_data["service_popup_title"] = req.body.service_popup_title;
            update_data["service_popup_title_color"] = req.body.service_popup_title_color;
            update_data["service_popup_subtitle"] = req.body.service_popup_subtitle;
            update_data["service_subtitle_title_color"] = req.body.service_subtitle_title_color;
            update_data["service_popup_desctiption"] = req.body.service_popup_desctiption;
            update_data["service_subtitle_desctiption_color"] = req.body.service_subtitle_desctiption_color;
            update_data["cancel_popup_bg_color"] = req.body.cancel_popup_bg_color;
            update_data["cancel_popup_title"] = req.body.cancel_popup_title;
            update_data["cancel_popup_title_color"] = req.body.cancel_popup_title_color;
            update_data["cancel_popup_subtitle"] = req.body.cancel_popup_subtitle;
            update_data["cancel_subtitle_title_color"] = req.body.cancel_subtitle_title_color;
            update_data["cancel_popup_desctiption"] = req.body.cancel_popup_desctiption;
            update_data["cancel_subtitle_desctiption_color"] = req.body.cancel_subtitle_desctiption_color;
            update_data["order_track_popup_bg_color"] = req.body.order_track_popup_bg_color;
            update_data["order_track_popup_title"] = req.body.order_track_popup_title;
            update_data["order_track_popup_title_color"] = req.body.order_track_popup_title_color;
            update_data["order_track_popup_subtitle"] = req.body.order_track_popup_subtitle;
            update_data["order_track_subtitle_title_color"] = req.body.order_track_subtitle_title_color;
            update_data["order_track_popup_desctiption"] = req.body.order_track_popup_desctiption;
            update_data["order_track_subtitle_desctiption_color"] = req.body.order_track_subtitle_desctiption_color;
            update_data["cod_popup_bg_color"] = req.body.cod_popup_bg_color;
            update_data["cod_popup_title"] = req.body.cod_popup_title;
            update_data["cod_popup_title_color"] = req.body.cod_popup_title_color;
            update_data["cod_popup_subtitle"] = req.body.cod_popup_subtitle;
            update_data["cod_subtitle_title_color"] = req.body.cod_subtitle_title_color;
            update_data["cod_popup_desctiption"] = req.body.cod_popup_desctiption;
            update_data["cod_subtitle_desctiption_color"] = req.body.cod_subtitle_desctiption_color;

            update_data["express_popup_bg_color"] = req.body.express_popup_bg_color;
            update_data["express_popup_title"] = req.body.express_popup_title;
            update_data["express_popup_title_color"] = req.body.express_popup_title_color;
            update_data["express_popup_subtitle"] = req.body.express_popup_subtitle;
            update_data["express_subtitle_title_color"] = req.body.express_subtitle_title_color;
            update_data["express_popup_desctiption"] = req.body.express_popup_desctiption;
            update_data["express_subtitle_desctiption_color"] = req.body.express_subtitle_desctiption_color;

            update_data["delivery_popup_bg_color"] = req.body.delivery_popup_bg_color;
            update_data["delivery_popup_title"] = req.body.delivery_popup_title;
            update_data["delivery_popup_title_color"] = req.body.delivery_popup_title_color;
            update_data["delivery_popup_subtitle"] = req.body.delivery_popup_subtitle;
            update_data["delivery_subtitle_title_color"] = req.body.delivery_subtitle_title_color;
            update_data["delivery_popup_desctiption"] = req.body.delivery_popup_desctiption;
            update_data["delivery_subtitle_desctiption_color"] = req.body.delivery_subtitle_desctiption_color;

            AppSettings.findOneAndUpdate(where, update_data, {
                new: true,
            })
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Settings updated",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    settings: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            Settings.find()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    ///// Settings End /////

    /////// Start Products ///////

    add_product: function (req, res) {
        multi_upload(req, res, function (error) {
            if (error) {
                res.status(200).send({
                    status: "error",
                    message: error.code,
                    token: req.token,
                });
            } else {
                if (!req.body.name || req.body.name == "") {
                    res.status(200).send({
                        status: "error",
                        message: "Enter product name",
                        token: req.token,
                    });
                    return;
                }
                console.log(req.body.start_date);
                if (req.files.length > 0) {
                    var ProductsData = new Products({
                        options: JSON.parse(req.body.options),
                        product_types: req.body.product_types2 ? req.body.product_types2.split(",") : null,
                        combo_products: req.body.combo_products ? req.body.combo_products.split(",") : null,
                        city: req.body.city,
                        name: req.body.name,
                        master_category: req.body.master_categories_selected ? req.body.master_categories_selected.split(",") : null,
                        category: req.body.categories_selected ? req.body.categories_selected.split(",") : null,
                        sub_category: req.body.subcategories_selected ? req.body.subcategories_selected.split(",") : null,
                        cuisine: req.body.cuisine,
                        brand: req.body.brand,
                        vendor: req.body.vendor,
                        desc: req.body.desc,
                        additional_description: req.body.additional_description,
                        short_desc: req.body.short_desc,
                        price: Number(req.body.price.trim()),
                        file: req.files,
                        express: req.body.express == 1 ? true : false,
                        city: req.body.city,
                        selling_price: req.body.selling_price,
                        batchno: req.body.batchno,

                        packaging_charge: req.body.packaging_charge,
                        tax_status: req.body.tax_status,
                        cgst: req.body.cgst,
                        sgst: req.body.sgst,
                        igst: req.body.igst,
                        sku: req.body.sku,
                        stock_qty: req.body.stock_qty,
                        //backorders: req.body.backorders,
                        //threshold: req.body.threshold,
                        //manage_stock: req.body.manage_stock ? req.body.manage_stock : 0,
                        weight: req.body.weight,
                        length: req.body.lengthh,
                        width: req.body.width,
                        height: req.body.height,
                        shipping: req.body.shipping,

                        tags: req.body.tags,
                        deal: req.body.deal == null ? 0 : req.body.deal,
                        featured: req.body.featured,
                        added_by: req.body.added_by,
                        point: req.body.point,

                        stock_product: req.body.stock_product,
                        consumable: req.body.consumable,
                        shelving_location: req.body.shelving_location,
                        video_url: req.body.product_video,

                        returnable: req.body.returnable,
                        return_day: req.body.return_day,
                        details: req.body.details,

                        start_date: req.body.start_date,
                        end_date: req.body.end_date,

                        unit_cost: req.body.unit_cost,
                        up_code: req.body.up_code,
                        hs_code: req.body.hs_code,
                        fulfilment_center: req.body.fulfilment_center,
                        mfg_date: req.body.mfg_date,
                        expiry_date: req.body.expiry_date,
                        vendor_sku: req.body.vendor_sku,
                        bin_location: req.body.bin_location,

                        profit_margin: req.body.profit_margin,

                        country_of_origin: req.body.country_of_origin,
                    });
                    ProductsData.save(function (err, response) {
                        if (err) {
                            res.status(200).send({
                                status: "error",
                                message: err,
                                token: req.token,
                            });
                        } else {
                            // Net Suit Start
                            var options = JSON.parse(req.body.options);

                            if (options.length > 0) {
                                var option_value1 = options[0] ? options[0].value : "";
                                var option_value2 = options[1] ? options[1].value : "";

                                var arr1 = [];
                                var arr2 = [];

                                var option = option_value1.split(",");
                                for (let j = 0; j < option.length; j++) {
                                    arr1.push(option[j].split(":")[0]);
                                }

                                var option = option_value2.split(",");
                                for (let l = 0; l < option.length; l++) {
                                    arr2.push(option[l].split(":")[0]);
                                }

                                for (let i = 0; i < arr1.length; i++) {
                                    for (let k = 0; k < arr2.length; k++) {
                                        var data = JSON.stringify({
                                            action: "CREATE",
                                            fields: {
                                                itemId: response._id,
                                                itemType: "inventoryitem",
                                                displayname: req.body.name,
                                                itemdesc: req.body.desc,
                                                upccode: req.body.sku,
                                                basePrice: Number(req.body.price.trim()),
                                                cost: Number(req.body.price.trim()),
                                                category: req.body.categories_selected ? req.body.categories_selected : null,
                                                "ids from": "swagbag",
                                                subcategory: req.body.subcategories_selected ? req.body.subcategories_selected : null,
                                                brand: req.body.brand,
                                                taxable: 1,
                                                options: {
                                                    color: arr1[i].includes("#") ? arr1[i] : "",
                                                    size: !arr1[i].includes("#") ? arr1[k] : "",
                                                    option3: "",
                                                    option4: "",
                                                    option5: "",
                                                },
                                            },
                                        });
                                        var config = {
                                            method: "post",
                                            url: "https://7454786.extforms.netsuite.com/app/site/hosting/scriptlet.nl?script=75&deploy=1&compid=7454786&h=76882e989e51c8e87140",
                                            headers: {
                                                "Content-Type": "application/json",
                                                "User-Agent": "Mozilla/5.0",
                                                token: "123",
                                            },
                                            data: data,
                                        };
                                        axios(config)
                                            .then(function (response) {
                                                console.log(JSON.stringify(response.data));
                                            })
                                            .catch(function (error) {
                                                console.log(error);
                                            });
                                    }
                                }
                            } else {
                                var data = JSON.stringify({
                                    action: "CREATE",
                                    fields: {
                                        itemId: response._id,
                                        itemType: "inventoryitem",
                                        displayname: req.body.name,
                                        itemdesc: req.body.desc,
                                        upccode: req.body.sku,
                                        basePrice: Number(req.body.price.trim()),
                                        cost: Number(req.body.price.trim()),
                                        category: req.body.categories_selected ? req.body.categories_selected : null,
                                        "ids from": "swagbag",
                                        subcategory: req.body.subcategories_selected ? req.body.subcategories_selected : null,
                                        brand: req.body.brand,
                                        taxable: 1,
                                        options: {
                                            color: "",
                                            size: "",
                                            option3: "",
                                            option4: "",
                                            option5: "",
                                        },
                                    },
                                });

                                var config = {
                                    method: "post",
                                    url: "https://7454786.extforms.netsuite.com/app/site/hosting/scriptlet.nl?script=75&deploy=1&compid=7454786&h=76882e989e51c8e87140",
                                    headers: {
                                        "Content-Type": "application/json",
                                        "User-Agent": "Mozilla/5.0",
                                        token: "123",
                                    },
                                    data: data,
                                };

                                axios(config)
                                    .then(function (response) {
                                        console.log(JSON.stringify(response.data));
                                    })
                                    .catch(function (error) {
                                        console.log(error);
                                    });
                            }

                            // Net Suit End

                            res.status(200).send({
                                status: "success",
                                message: "Product has been created successfully.",
                                token: req.token,
                            });
                        }
                    });
                } else {
                    res.status(200).send({
                        status: "error",
                        message: "Select a image to upload.",
                    });
                }
            }
        });
    },

    product_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.name != "") {
                where["name"] = {
                    $regex: ".*" + req.query.name + "*",
                    $options: "i",
                };
            }

            if (req.query.active && req.query.active != "") {
                if (req.query.active == 2) {
                    where["deal"] = 1;
                } else if (req.query.active == 3) {
                    where["featured"] = 1;
                } else {
                    where["active"] = req.query.active;
                }
            }

            if (req.query.category != "") {
                where["category"] = req.query.category;
            }

            if (req.query.sub_category != "") {
                where["sub_category"] = req.query.sub_category;
            }

            if (req.query.cuisine != "") {
                where["cuisine"] = req.query.cuisine;
            }

            if (req.query.brand != "") {
                where["brand"] = req.query.brand;
            }

            if (req.query.vendor != "") {
                where["vendor"] = req.query.vendor;
            }
            if (req.query.slug) {
                where["slug"] = req.query.slug;
            }
            where["deleted"] = 0;

            Products.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .populate("category", "name")
                .populate("sub_category", "name")
                .populate("cuisine", "name")
                .populate("brand", "name")
                .populate("vendor", "full_name")
                .populate("added_by", "full_name")
                .populate("master_category", "name")
                .sort({
                    _id: -1,
                })
                .then((response) => {
                    Products.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    all_product_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["active"] = 1;
            where["deleted"] = 0;

            Products.find(where)
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    Products.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_product_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Products.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Category not found",
                            token: req.token,
                        });
                    } else {
                        if (response.active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        Products.findOneAndUpdate(
                            where,
                            {
                                active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    get_product: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Products.findOne(where)
                .populate("category", "name")
                .populate("sub_category", "name")
                .populate("cuisine", "name")
                .populate("brand", "name")
                .populate("vendor", "name")
                .populate("product_types")
                .populate("master_category")
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid product id",
                        token: req.token,
                    });
                });
        }
    },

    delete_product: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Products.findOneAndUpdate(
                where,
                {
                    deleted: 1,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Product has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    update_product: function (req, res) {
        multi_upload(req, res, function (error) {
            if (error) {
                res.status(200).send({
                    status: "error",
                    message: error.code,
                    token: req.token,
                });
            } else {
                if (!req.body.name || req.body.name == "") {
                    res.status(200).send({
                        status: "error",
                        message: "Enter product name",
                        token: req.token,
                    });
                    return false;
                }
                if (!req.body.id || req.body.id == "") {
                    res.status(200).send({
                        status: "error",
                        message: "Enter product id",
                        token: req.token,
                    });
                    return false;
                }

                ////
                if (req.files.length > 0) {
                    var where = {};
                    where["_id"] = req.body.id;
                    Products.findOne(where).then((response) => {
                        var file = response.file;
                        req.files.forEach(function (arrayItem) {
                            file.push(arrayItem);
                        });

                        var where = {};
                        where["_id"] = {
                            $ne: req.body.id,
                        };
                        where["slug"] = req.body.slug;
                        Products.findOne(where).then((response) => {
                            if (response) {
                                res.status(200).send({
                                    status: "error",
                                    message: "Slug already in use.",
                                    token: req.token,
                                });
                            } else {
                                var where = {};
                                where["_id"] = req.body.id;

                                Products.findOneAndUpdate(
                                    where,
                                    {
                                        options: JSON.parse(req.body.options),
                                        product_types: req.body.product_types2 ? req.body.product_types2.split(",") : null,
                                        combo_products: req.body.combo_products ? req.body.combo_products.split(",") : null,
                                        name: req.body.name,
                                        master_category: req.body.master_categories_selected ? req.body.master_categories_selected.split(",") : null,
                                        category: req.body.categories_selected ? req.body.categories_selected.split(",") : null,
                                        sub_category: req.body.subcategories_selected ? req.body.subcategories_selected.split(",") : null,
                                        cuisine: req.body.cuisine,
                                        brand: req.body.brand,
                                        vendor: req.body.vendor,
                                        desc: req.body.desc,
                                        short_desc: req.body.short_desc,
                                        price: req.body.price,
                                        file: file,
                                        express: req.body.express,
                                        //city: req.body.city,
                                        selling_price: req.body.selling_price,
                                        batchno: req.body.batchno,

                                        packaging_charge: req.body.packaging_charge,
                                        //tax_status: req.body.tax_status,
                                        //cgst: req.body.cgst,
                                        //sgst: req.body.sgst,
                                        //igst: req.body.igst,
                                        sku: req.body.sku,
                                        stock_qty: req.body.stock_qty,
                                        //backorders: req.body.backorders,
                                        //threshold: req.body.threshold,
                                        //manage_stock: req.body.manage_stock ? req.body.manage_stock : 0,
                                        weight: req.body.weight,
                                        length: req.body.lengthh,
                                        width: req.body.width,
                                        height: req.body.height,
                                        shipping: req.body.shipping,

                                        tags: req.body.tags,
                                        //discounted_price: req.body.discounted_price,
                                        start_date: req.body.start_date,
                                        end_date: req.body.end_date,
                                        deal: req.body.deal == "null" ? 0 : req.body.deal,
                                        featured: req.body.featured == "null" ? 0 : req.body.featured,
                                        slug: req.body.slug,
                                        point: req.body.point != "null" ? req.body.point : 0,

                                        stock_product: req.body.stock_product,
                                        consumable: req.body.consumable,
                                        shelving_location: req.body.shelving_location,
                                        video_url: req.body.product_video,
                                        returnable: req.body.returnable,
                                        return_day: req.body.return_day,
                                        additional_description: req.body.additional_description,
                                        details: req.body.details,

                                        unit_cost: req.body.unit_cost,
                                        up_code: req.body.up_code,
                                        hs_code: req.body.hs_code,
                                        fulfilment_center: req.body.fulfilment_center,
                                        mfg_date: req.body.mfg_date,
                                        expiry_date: req.body.expiry_date,
                                        vendor_sku: req.body.vendor_sku,
                                        bin_location: req.body.bin_location,

                                        profit_margin: req.body.profit_margin,
                                        country_of_origin: req.body.country_of_origin,
                                    },
                                    {
                                        new: true,
                                    }
                                )
                                    .exec()
                                    .then((response) => {
                                        res.status(200).send({
                                            status: "success",
                                            message: "Product has been updated",
                                            token: req.token,
                                        });
                                        return;
                                    });
                            }
                        });
                    });
                } else {
                    var where = {};
                    where["_id"] = {
                        $ne: req.body.id,
                    };
                    where["slug"] = req.body.slug;
                    Products.findOne(where).then((response) => {
                        if (response) {
                            res.status(200).send({
                                status: "error",
                                message: "Slug already in use.",
                                token: req.token,
                            });
                        } else {
                            var where = {};
                            where["_id"] = req.body.id;
                            //point_exp_date: req.body.point_exp_date,

                            Products.findOneAndUpdate(
                                where,
                                {
                                    options: JSON.parse(req.body.options),
                                    combo_products: req.body.combo_products ? req.body.combo_products.split(",") : null,
                                    product_types: req.body.product_types2 ? req.body.product_types2.split(",") : null,
                                    name: req.body.name,
                                    master_category: req.body.master_categories_selected ? req.body.master_categories_selected.split(",") : null,
                                    category: req.body.categories_selected ? req.body.categories_selected.split(",") : null,
                                    sub_category: req.body.subcategories_selected ? req.body.subcategories_selected.split(",") : null,
                                    cuisine: req.body.cuisine,
                                    brand: req.body.brand,
                                    vendor: req.body.vendor,
                                    desc: req.body.desc,
                                    short_desc: req.body.short_desc,
                                    price: req.body.price,
                                    express: req.body.express,
                                    //city: req.body.city,
                                    selling_price: req.body.selling_price,
                                    batchno: req.body.batchno,
                                    commission: req.body.commission,
                                    packaging_charge: req.body.packaging_charge,
                                    //tax_status: req.body.tax_status,
                                    //cgst: req.body.cgst,
                                    //sgst: req.body.sgst,
                                    //igst: req.body.igst,
                                    sku: req.body.sku,
                                    stock_qty: req.body.stock_qty,
                                    //backorders: req.body.backorders,
                                    //threshold: req.body.threshold,
                                    //manage_stock: req.body.manage_stock ? req.body.manage_stock : 0,
                                    weight: req.body.weight,
                                    length: req.body.lengthh,
                                    width: req.body.width,
                                    height: req.body.height,
                                    shipping: req.body.shipping,
                                    // attribute: req.body.attribute,
                                    tags: req.body.tags,
                                    // discounted_price: req.body.discounted_price,
                                    start_date: req.body.start_date == "null" ? 0 : req.body.start_date,
                                    end_date: req.body.end_date == "null" ? 0 : req.body.end_date,
                                    deal: req.body.deal == "null" ? 0 : req.body.deal,
                                    featured: req.body.featured == "null" ? 0 : req.body.featured,
                                    slug: req.body.slug,
                                    point: req.body.point != "null" ? req.body.point : 0,

                                    stock_product: req.body.stock_product,
                                    consumable: req.body.consumable,
                                    shelving_location: req.body.shelving_location,
                                    video_url: req.body.product_video,
                                    returnable: req.body.returnable,
                                    return_day: req.body.return_day,
                                    additional_description: req.body.additional_description,
                                    details: req.body.details,

                                    unit_cost: req.body.unit_cost,
                                    up_code: req.body.up_code,
                                    hs_code: req.body.hs_code,
                                    fulfilment_center: req.body.fulfilment_center,
                                    mfg_date: req.body.mfg_date == "null" ? "" : req.body.mfg_date,
                                    expiry_date: req.body.expiry_date == "null" ? "" : req.body.expiry_date,
                                    vendor_sku: req.body.vendor_sku,
                                    bin_location: req.body.bin_location,

                                    profit_margin: req.body.profit_margin,
                                    country_of_origin: req.body.country_of_origin,
                                },
                                {
                                    new: true,
                                }
                            )
                                .exec()
                                .then((response) => {
                                    res.status(200).send({
                                        status: "success",
                                        message: "Product has been updated",
                                        token: req.token,
                                    });
                                });
                        }
                    });
                }
            }
        });
    },

    parent_category_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["parent"] = null;
            where["active"] = 1;
            where["deleted"] = 0;
            if (req.query.master && req.query.master != "") {
                var arr = [];
                for (let i = 0; i < req.query.master.split(",").length; i++) {
                    arr.push(mongoose.Types.ObjectId(req.query.master.split(",")[i]));
                }

                where["master"] = { $in: arr };
            }

            Category.find(where)
                .sort({
                    created_date: -1,
                })
                .populate("master", "name")
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    sub_category_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            where["active"] = 1;
            where["deleted"] = 0;

            if (req.query.category && req.query.category != "") {
                var arr = [];
                for (let i = 0; i < req.query.category.split(",").length; i++) {
                    arr.push(mongoose.Types.ObjectId(req.query.category.split(",")[i]));
                }

                where["parent"] = { $in: arr };
            }

            Category.find(where)
                .sort({
                    created_date: -1,
                })
                .populate("parent", "name")
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    all_cuisine_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["active"] = 1;
            where["deleted"] = 0;
            Cuisine.find(where)
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    all_brand_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["active"] = 1;
            where["deleted"] = 0;
            Brand.find(where)
                .sort({
                    name: 1,
                })
                .collation({ locale: "en_US", numericOrdering: true })
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    all_vendor_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["active"] = 1;
            where["deleted"] = 0;
            where["user_type"] = "vendor";
            Users.find(where)
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    delete_product_image: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.product_id;
            Products.findOne(where).then((response) => {
                var file = response.file;
                file.splice(req.body.image_index, 1);
                var where = {};
                where["_id"] = req.body.product_id;
                Products.findOneAndUpdate(
                    where,
                    {
                        file: file,
                    },
                    {
                        new: true,
                    }
                )
                    .exec()
                    .then((response) => {
                        res.status(200).send({
                            status: "success",
                            message: "Product has been deleted",
                            token: req.token,
                        });
                    });
            });
        }
    },

    ///// End Product ///////////

    ///// Start Pickup Partner ///////////

    add_pickup_partner: function (req, res) {
        var where = {};
        where["deleted"] = 0;
        where["mobile"] = req.body.mobile;
        Users.findOne(where)
            .then((response) => {
                if (response != null) {
                    res.status(200).send({
                        status: "error",
                        message: "Mobile already in use.",
                    });
                } else {
                    var where = {};
                    where["deleted"] = 0;
                    where["email"] = req.body.email;
                    Users.findOne(where)
                        .then((response) => {
                            if (response != null) {
                                res.status(200).send({
                                    status: "error",
                                    message: "Email address already in use.",
                                });
                            } else {
                                var userdata = new Users({
                                    user_type: "pickup_partner",
                                    full_name: req.body.name,
                                    address: req.body.address,
                                    mobile: req.body.mobile,
                                    email: req.body.email,
                                    cod: req.body.cod,
                                    customer_support_city: req.body.customer_support_city ? req.body.customer_support_city.split(",") : null,
                                    price_per_kg: req.body.price_per_kg,

                                    rate_per_km: req.body.rate_per_km,
                                    monthly_fixed_cost: req.body.monthly_fixed_cost,

                                    price_per_pack: req.body.price_per_pack,
                                    communication_zipcode: req.body.communication_zipcode,
                                    service_zipcode: req.body.service_zipcode,
                                    bank_name: req.body.bank_name,
                                    acc_holder_name: req.body.acc_holder_name,
                                    acc_number: req.body.acc_number,
                                    branch_code: req.body.branch_code,
                                    ifsc: req.body.ifsc,
                                    bank_address: req.body.bank_address,
                                    active: 1,
                                    email_verified: 0,
                                    profile_image: "",
                                });

                                userdata.save(function (err, response) {
                                    if (err) {
                                        res.status(200).send({
                                            status: "error",
                                            message: err,
                                            token: req.token,
                                        });
                                    } else {
                                        res.status(200).send({
                                            status: "success",
                                            message: "Account has been created successfully.",
                                            data: response,
                                        });
                                    }
                                });
                            }
                        })
                        .catch((error) => {
                            res.status(200).send({
                                status: "error",
                                message: "Invalid mobile/password",
                            });
                        });
                }
            })
            .catch((error) => {
                res.status(200).send({
                    status: "error",
                    message: "Invalid mobile/password",
                });
            });
    },

    pickup_partner_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.name && req.query.name != "") {
                where["full_name"] = {
                    $regex: ".*" + req.query.name,
                    $options: "i",
                };
            }

            if (req.query.mobile && req.query.mobile != "") {
                where["mobile"] = {
                    $regex: ".*" + req.query.mobile,
                    $options: "i",
                };
            }

            if (req.query.active && req.query.active != "") {
                where["active"] = req.query.active;
            }

            where["deleted"] = 0;
            where["user_type"] = "pickup_partner";

            Users.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .populate("parent", "name")
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    Users.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_pickup_partner_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Users.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Pickup partner not found",
                            token: req.token,
                        });
                    } else {
                        if (response.active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        Users.findOneAndUpdate(
                            where,
                            {
                                active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    update_pickup_partner: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Users.findOneAndUpdate(
                where,
                {
                    full_name: req.body.name,
                    address: req.body.address,
                    mobile: req.body.mobile,
                    email: req.body.email,
                    cod: req.body.cod,
                    customer_support_city: req.body.customer_support_city ? req.body.customer_support_city.split(",") : null,
                    price_per_kg: req.body.price_per_kg,

                    rate_per_km: req.body.rate_per_km,
                    monthly_fixed_cost: req.body.monthly_fixed_cost,

                    price_per_pack: req.body.price_per_pack,
                    communication_zipcode: req.body.communication_zipcode,
                    service_zipcode: req.body.service_zipcode,
                    bank_name: req.body.bank_name,
                    acc_holder_name: req.body.acc_holder_name,
                    acc_number: req.body.acc_number,
                    branch_code: req.body.branch_code,
                    ifsc: req.body.ifsc,
                    bank_address: req.body.bank_address,
                    active: 1,
                    email_verified: 0,
                    profile_image: "",
                    update_date: moment().format(),
                    //file: ""
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Pickup partner has been updatedd",
                        token: req.token,
                    });
                    return;
                });
        }
    },

    get_pickup_partner: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Users.findOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid pickup partner id",
                        token: req.token,
                    });
                });
        }
    },

    delete_pickup_partner: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Users.findOneAndUpdate(
                where,
                {
                    deleted: 1,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Pickup partner has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    ///// End Pickup Partner ///////////

    ///// Cargo Partner ///////////

    add_cargo_partner: function (req, res) {
        var where = {};
        where["deleted"] = 0;
        where["mobile"] = req.body.mobile;
        Users.findOne(where)
            .then((response) => {
                if (response != null) {
                    res.status(200).send({
                        status: "error",
                        message: "Mobile already in use.",
                    });
                } else {
                    var where = {};
                    where["deleted"] = 0;
                    where["email"] = req.body.email;
                    Users.findOne(where)
                        .then((response) => {
                            if (response != null) {
                                res.status(200).send({
                                    status: "error",
                                    message: "Email address already in use.",
                                });
                            } else {
                                var userdata = new Users({
                                    user_type: "cargo_partner",
                                    full_name: req.body.name,
                                    address: req.body.address,
                                    mobile: req.body.mobile,
                                    email: req.body.email,
                                    cod: req.body.cod,
                                    customer_support_city: req.body.customer_support_city ? req.body.customer_support_city.split(",") : null,
                                    price_per_kg: req.body.price_per_kg,
                                    price_per_pack: req.body.price_per_pack,

                                    rate_per_km: req.body.rate_per_km,
                                    monthly_fixed_cost: req.body.monthly_fixed_cost,

                                    communication_zipcode: req.body.communication_zipcode,
                                    service_zipcode: req.body.service_zipcode,
                                    bank_name: req.body.bank_name,
                                    acc_holder_name: req.body.acc_holder_name,
                                    acc_number: req.body.acc_number,
                                    branch_code: req.body.branch_code,
                                    ifsc: req.body.ifsc,
                                    bank_address: req.body.bank_address,
                                    active: 1,
                                    email_verified: 0,
                                    profile_image: "",
                                });

                                userdata.save(function (err, response) {
                                    if (err) {
                                        res.status(200).send({
                                            status: "error",
                                            message: err,
                                            token: req.token,
                                        });
                                    } else {
                                        res.status(200).send({
                                            status: "success",
                                            message: "Account has been created successfully.",
                                            data: response,
                                        });
                                    }
                                });
                            }
                        })
                        .catch((error) => {
                            res.status(200).send({
                                status: "error",
                                message: "Invalid mobile/password",
                            });
                        });
                }
            })
            .catch((error) => {
                res.status(200).send({
                    status: "error",
                    message: "Invalid mobile/password",
                });
            });
    },

    cargo_partner_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.name && req.query.name != "") {
                where["full_name"] = {
                    $regex: ".*" + req.query.name,
                    $options: "i",
                };
            }

            if (req.query.mobile && req.query.mobile != "") {
                where["mobile"] = {
                    $regex: ".*" + req.query.mobile,
                    $options: "i",
                };
            }

            if (req.query.active && req.query.active != "") {
                where["active"] = req.query.active;
            }

            where["deleted"] = 0;
            where["user_type"] = "cargo_partner";

            Users.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .populate("parent", "name")
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    Users.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_cargo_partner_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Users.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Cargo partner not found",
                            token: req.token,
                        });
                    } else {
                        if (response.active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        Users.findOneAndUpdate(
                            where,
                            {
                                active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    update_cargo_partner: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Users.findOneAndUpdate(
                where,
                {
                    full_name: req.body.name,
                    address: req.body.address,
                    mobile: req.body.mobile,
                    email: req.body.email,
                    cod: req.body.cod,
                    customer_support_city: req.body.customer_support_city ? req.body.customer_support_city.split(",") : null,
                    price_per_kg: req.body.price_per_kg,

                    rate_per_km: req.body.rate_per_km,
                    monthly_fixed_cost: req.body.monthly_fixed_cost,

                    price_per_pack: req.body.price_per_pack,
                    communication_zipcode: req.body.communication_zipcode,
                    service_zipcode: req.body.service_zipcode,
                    bank_name: req.body.bank_name,
                    acc_holder_name: req.body.acc_holder_name,
                    acc_number: req.body.acc_number,
                    branch_code: req.body.branch_code,
                    ifsc: req.body.ifsc,
                    bank_address: req.body.bank_address,
                    active: 1,
                    email_verified: 0,
                    profile_image: "",
                    update_date: moment().format(),
                    //file: ""
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Cargo partner has been updated",
                        token: req.token,
                    });
                    return;
                });
        }
    },

    get_cargo_partner: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Users.findOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid pickup partner id",
                        token: req.token,
                    });
                });
        }
    },

    delete_cargo_partner: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Users.findOneAndUpdate(
                where,
                {
                    deleted: 1,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Cargo partner has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    ///// End Pickup Partner ///////////

    ///// Delivery Partner ///////////

    add_delivery_partner: function (req, res) {
        var where = {};
        where["deleted"] = 0;
        where["mobile"] = req.body.mobile;
        Users.findOne(where)
            .then((response) => {
                if (response != null) {
                    res.status(200).send({
                        status: "error",
                        message: "Mobile already in use.",
                    });
                } else {
                    var where = {};
                    where["deleted"] = 0;
                    where["email"] = req.body.email;
                    Users.findOne(where)
                        .then((response) => {
                            if (response != null) {
                                res.status(200).send({
                                    status: "error",
                                    message: "Email address already in use.",
                                });
                            } else {
                                var userdata = new Users({
                                    user_type: "delivery_partner",
                                    full_name: req.body.name,
                                    address: req.body.address,
                                    mobile: req.body.mobile,
                                    email: req.body.email,
                                    cod: req.body.cod,
                                    customer_support_city: req.body.customer_support_city ? req.body.customer_support_city.split(",") : null,
                                    price_per_kg: req.body.price_per_kg,
                                    price_per_pack: req.body.price_per_pack,
                                    communication_zipcode: req.body.communication_zipcode,
                                    service_zipcode: req.body.service_zipcode,
                                    bank_name: req.body.bank_name,
                                    acc_holder_name: req.body.acc_holder_name,
                                    acc_number: req.body.acc_number,
                                    branch_code: req.body.branch_code,
                                    ifsc: req.body.ifsc,
                                    bank_address: req.body.bank_address,
                                    active: 1,
                                    email_verified: 0,
                                    profile_image: "",
                                });

                                userdata.save(function (err, response) {
                                    if (err) {
                                        res.status(200).send({
                                            status: "error",
                                            message: err,
                                            token: req.token,
                                        });
                                    } else {
                                        res.status(200).send({
                                            status: "success",
                                            message: "Account has been created successfully.",
                                            data: response,
                                        });
                                    }
                                });
                            }
                        })
                        .catch((error) => {
                            res.status(200).send({
                                status: "error",
                                message: "Invalid mobile/password",
                            });
                        });
                }
            })
            .catch((error) => {
                res.status(200).send({
                    status: "error",
                    message: "Invalid mobile/password",
                });
            });
    },

    delivery_partner_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.name && req.query.name != "") {
                where["full_name"] = {
                    $regex: ".*" + req.query.name,
                    $options: "i",
                };
            }

            if (req.query.mobile && req.query.mobile != "") {
                where["mobile"] = {
                    $regex: ".*" + req.query.mobile,
                    $options: "i",
                };
            }

            if (req.query.active && req.query.active != "") {
                where["active"] = req.query.active;
            }

            where["deleted"] = 0;
            where["user_type"] = "delivery_partner";

            Users.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .populate("parent", "name")
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    Users.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_delivery_partner_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Users.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Cargo partner not found",
                            token: req.token,
                        });
                    } else {
                        if (response.active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        Users.findOneAndUpdate(
                            where,
                            {
                                active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    update_delivery_partner: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Users.findOneAndUpdate(
                where,
                {
                    full_name: req.body.name,
                    address: req.body.address,
                    mobile: req.body.mobile,
                    email: req.body.email,
                    cod: req.body.cod,
                    customer_support_city: req.body.customer_support_city ? req.body.customer_support_city.split(",") : null,
                    rate_per_km: req.body.rate_per_km,
                    monthly_fixed_cost: req.body.monthly_fixed_cost,

                    communication_zipcode: req.body.communication_zipcode,
                    service_zipcode: req.body.service_zipcode,
                    bank_name: req.body.bank_name,
                    acc_holder_name: req.body.acc_holder_name,
                    acc_number: req.body.acc_number,
                    branch_code: req.body.branch_code,
                    ifsc: req.body.ifsc,
                    bank_address: req.body.bank_address,
                    active: 1,
                    email_verified: 0,
                    profile_image: "",
                    update_date: moment().format(),

                    //file: ""
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Cargo partner has been updated",
                        token: req.token,
                    });
                    return;
                });
        }
    },

    get_delivery_partner: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Users.findOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid pickup partner id",
                        token: req.token,
                    });
                });
        }
    },

    delete_delivery_partner: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Users.findOneAndUpdate(
                where,
                {
                    deleted: 1,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Cargo partner has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    ///// End Delivery Partner ///////////

    ///// Cut off Time Start ///////////

    add_cutoff_time: function (req, res) {
        var data = new CutOffTime({
            start_city: req.body.start_city,
            end_city: req.body.end_city,
            cut_of_time: req.body.cut_of_time,
            final_delivery_time: req.body.final_delivery_time,
            remarks: req.body.remarks,
            timeslot: req.body.timeslot,
            express_remarks: req.body.express_remarks,
            express: req.body.express == 1 ? true : false,
            express_cut_of_time_first: req.body.express_cut_of_time_first,
            express_final_delivery_time_first: req.body.express_final_delivery_time_first,
            timeslot_first: req.body.timeslot_first,
            express_cut_of_time_second: req.body.express_cut_of_time_second,
            express_final_delivery_time_second: req.body.express_final_delivery_time_second,
            timeslot_second: req.body.timeslot_second,
            normal_delivery_cost: req.body.normal_delivery_cost,
            express_delivery_cost: req.body.express_delivery_cost,
        });

        data.save(function (err, response) {
            if (err) {
                res.status(200).send({
                    status: "error",
                    message: err,
                    token: req.token,
                });
            } else {
                res.status(200).send({
                    status: "success",
                    message: "Cut off time has been created successfully.",
                    data: response,
                });
            }
        });
    },

    cutoff_time_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            where["deleted"] = 0;

            CutOffTime.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .populate("start_city", "name")
                .populate("end_city", "name")
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    CutOffTime.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_cutoff_time_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            CutOffTime.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Cut off time not found",
                            token: req.token,
                        });
                    } else {
                        if (response.active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        CutOffTime.findOneAndUpdate(
                            where,
                            {
                                active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    update_cutoff_time: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;

            CutOffTime.findOneAndUpdate(
                where,
                {
                    start_city: req.body.start_city,
                    end_city: req.body.end_city,
                    cut_of_time: req.body.cut_of_time,
                    final_delivery_time: req.body.final_delivery_time,
                    remarks: req.body.remarks,
                    express_remarks: req.body.express_remarks,
                    update_date: moment().format(),
                    timeslot: req.body.timeslot,
                    express: req.body.express,
                    express_cut_of_time_first: req.body.express_cut_of_time_first,
                    express_final_delivery_time_first: req.body.express_final_delivery_time_first,
                    timeslot_first: req.body.timeslot_first,
                    express_cut_of_time_second: req.body.express_cut_of_time_second,
                    express_final_delivery_time_second: req.body.express_final_delivery_time_second,
                    timeslot_second: req.body.timeslot_second,
                    normal_delivery_cost: req.body.normal_delivery_cost,
                    express_delivery_cost: req.body.express_delivery_cost,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Cut off time has been updated",
                        token: req.token,
                    });
                    return;
                });
        }
    },

    get_cutoff_time: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            CutOffTime.findOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid cut off time id",
                        token: req.token,
                    });
                });
        }
    },

    delete_cutoff_time: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            CutOffTime.findOneAndUpdate(
                where,
                {
                    deleted: 1,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Cut off time has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    ///// Cut off Time End ///////////

    ///// Start Slider ///////////

    add_slider: function (req, res) {
        if (!req.query.name || req.query.name == "") {
            res.status(200).send({
                status: "error",
                message: "Enter brand name",
                token: req.token,
            });
        } else {
            upload(req, res, function (error) {
                if (error) {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                } else {
                    if (req.files.length > 0) {
                        var Sliderdata = new Slider({
                            name: req.query.name,
                            url: req.query.url,
                            file: req.files[0].location,
                        });
                        Sliderdata.save(function (err, response) {
                            if (err) {
                                res.status(200).send({
                                    status: "error",
                                    message: err,
                                    token: req.token,
                                });
                            } else {
                                res.status(200).send({
                                    status: "success",
                                    message: "Slider has been created successfully.",
                                });
                            }
                        });
                    } else {
                        res.status(200).send({
                            status: "error",
                            message: "Select image to upload.",
                        });
                    }
                }
            });
        }
    },

    slider_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.name != "") {
                where["name"] = {
                    $regex: ".*" + req.query.name,
                    $options: "i",
                };
            }

            if (req.query.active != "") {
                where["active"] = req.query.active;
            }

            where["deleted"] = 0;

            Slider.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .populate("city", "name")
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    Slider.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_slider_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Slider.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Slider not found",
                            token: req.token,
                        });
                    } else {
                        if (response.active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        Slider.findOneAndUpdate(
                            where,
                            {
                                active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    update_slider: function (req, res) {
        if (!req.query.name || req.query.name == "") {
            res.status(200).send({
                status: "error",
                message: "Enter slider name",
                token: req.token,
            });
        }
        if (!req.query.id || req.query.id == "") {
            res.status(200).send({
                status: "error",
                message: "Enter slider id",
                token: req.token,
            });
        } else {
            upload(req, res, function (error) {
                if (error) {
                    ////
                    var where = {};
                    where["_id"] = req.query.id;
                    Slider.findOneAndUpdate(
                        where,
                        {
                            name: req.query.name,
                            url: req.query.url,
                            update_date: moment().format(),
                        },
                        {
                            new: true,
                        }
                    )
                        .exec()
                        .then((response) => {
                            res.status(200).send({
                                status: "success",
                                message: "Slider has been updated",
                                token: req.token,
                            });
                            return;
                        });
                    ////
                } else {
                    var where = {};
                    where["_id"] = req.query.id;

                    var updatedata = {};
                    updatedata["name"] = req.query.name;
                    updatedata["url"] = req.query.url;
                    updatedata["update_date"] = moment().format();
                    if (req.files[0]) {
                        updatedata["file"] = req.files[0].location;
                    }

                    Slider.findOneAndUpdate(where, updatedata, {
                        new: true,
                    })
                        .exec()
                        .then((response) => {
                            res.status(200).send({
                                status: "success",
                                message: "Slider has been updated",
                                token: req.token,
                            });
                        });
                }
            });
        }
    },

    get_slider: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Slider.findOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid slider id",
                        token: req.token,
                    });
                });
        }
    },

    delete_slider: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Slider.findOneAndUpdate(
                where,
                {
                    deleted: 1,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Slider has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    ///// End Slider ///////////

    ///// Mobile Start Slider ///////////

    mobile_category_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["active"] = 1;
            where["master_category"] = req.query.master_category;

            where["deleted"] = 0;

            MobileCategory.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })

                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    MobileCategory.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_mobile_category: function (req, res) {
        if (!req.query.id || req.query.id == "") {
            res.status(200).send({
                status: "error",
                message: "Enter slider id",
                token: req.token,
            });
        } else {
            upload(req, res, function (error) {
                if (error) {
                    ////
                    var where = {};
                    where["_id"] = req.query.id;
                    MobileCategory.findOneAndUpdate(
                        where,
                        {
                            category: req.query.category,
                            product: req.query.product,
                            brand: req.query.brand,
                            update_date: moment().format(),
                        },
                        {
                            new: true,
                        }
                    )
                        .exec()
                        .then((response) => {
                            res.status(200).send({
                                status: "success",
                                message: "Slider has been updated",
                                token: req.token,
                            });
                            return;
                        });
                    ////
                } else {
                    var where = {};
                    where["_id"] = req.query.id;

                    var updatedata = {};

                    updatedata["category"] = req.query.category;
                    updatedata["product"] = req.query.product;
                    updatedata["brand"] = req.query.brand;

                    updatedata["update_date"] = moment().format();
                    if (req.files[0]) {
                        updatedata["file"] = req.files[0].location;
                    }

                    MobileCategory.findOneAndUpdate(where, updatedata, {
                        new: true,
                    })
                        .exec()
                        .then((response) => {
                            res.status(200).send({
                                status: "success",
                                message: "Slider has been updated",
                                token: req.token,
                            });
                        });
                }
            });
        }
    },

    get_mobile_category: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            MobileCategory.findOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid slider id",
                        token: req.token,
                    });
                });
        }
    },

    ///// Mobile End Slider ///////////

    ///// Start Product Slider ///////////

    add_product_type: function (req, res) {
        if (!req.query.name || req.query.name == "") {
            res.status(200).send({
                status: "error",
                message: "Enter brand name",
                token: req.token,
            });
        } else {
            upload(req, res, function (error) {
                if (error) {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                } else {
                    if (req.files.length > 0) {
                        var ProductTypedata = new ProductType({
                            name: req.query.name,
                            file: req.files[0].location,
                        });
                        ProductTypedata.save(function (err, response) {
                            if (err) {
                                res.status(200).send({
                                    status: "error",
                                    message: err,
                                    token: req.token,
                                });
                            } else {
                                res.status(200).send({
                                    status: "success",
                                    message: "Product image has been created successfully.",
                                });
                            }
                        });
                    } else {
                        res.status(200).send({
                            status: "error",
                            message: "Select image to upload.",
                        });
                    }
                }
            });
        }
    },

    product_type_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.name != "") {
                where["name"] = {
                    $regex: ".*" + req.query.name,
                    $options: "i",
                };
            }

            if (req.query.active != "") {
                where["active"] = req.query.active;
            }

            where["deleted"] = 0;

            ProductType.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })

                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    ProductType.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_product_type_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            ProductType.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Product type not found",
                            token: req.token,
                        });
                    } else {
                        if (response.active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        ProductType.findOneAndUpdate(
                            where,
                            {
                                active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    update_product_type: function (req, res) {
        if (!req.query.name || req.query.name == "") {
            res.status(200).send({
                status: "error",
                message: "Enter product type name",
                token: req.token,
            });
        }
        if (!req.query.id || req.query.id == "") {
            res.status(200).send({
                status: "error",
                message: "Enter product type id",
                token: req.token,
            });
        } else {
            upload(req, res, function (error) {
                if (error) {
                    ////
                    var where = {};
                    where["_id"] = req.query.id;
                    ProductType.findOneAndUpdate(
                        where,
                        {
                            name: req.query.name,
                            update_date: moment().format(),
                        },
                        {
                            new: true,
                        }
                    )
                        .exec()
                        .then((response) => {
                            res.status(200).send({
                                status: "success",
                                message: "Product type has been updated",
                                token: req.token,
                            });
                            return;
                        });
                    ////
                } else {
                    var where = {};
                    where["_id"] = req.query.id;

                    var updatedata = {};
                    updatedata["name"] = req.query.name;
                    updatedata["update_date"] = moment().format();
                    if (req.files[0]) {
                        updatedata["file"] = req.files[0].location;
                    }

                    ProductType.findOneAndUpdate(where, updatedata, {
                        new: true,
                    })
                        .exec()
                        .then((response) => {
                            res.status(200).send({
                                status: "success",
                                message: "Slider has been updated",
                                token: req.token,
                            });
                        });
                }
            });
        }
    },

    get_product_type: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            ProductType.findOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid slider id",
                        token: req.token,
                    });
                });
        }
    },

    delete_product_type: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            ProductType.findOneAndUpdate(
                where,
                {
                    deleted: 1,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Product type has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    all_product_type_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            where["active"] = 1;
            where["deleted"] = 0;

            ProductType.find(where)

                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },
    ///// End Product Slider ///////////

    ///// Cut off Time Start ///////////

    add_coupon: function (req, res) {
        upload(req, res, function (error) {
            if (error) {
                res.status(200).send({
                    status: "error",
                    message: error.message,
                    token: req.token,
                });
            } else {
                var data = new Coupon({
                    coupon: req.body.coupon,
                    desc: req.body.desc,
                    type: req.body.type,
                    amount: req.body.amount,
                    exp_date: req.body.exp_date,
                    minimum_amount: req.body.minimum_amount,
                    maximum_amount: req.body.maximum_amount,
                    max_usage_limit: req.body.max_usage_limit,
                    max_usage_limit_user: req.body.max_usage_limit_user,
                    brand: req.body.brand ? req.body.brand.split(",") : null,
                    category: req.body.category ? req.body.category.split(",") : null,
                    product: req.body.product ? req.body.product.split(",") : null,
                    customer: req.body.customer ? req.body.customer.split(",") : null,
                    file: req.files.length > 0 ? req.files[0].location : null,
                    gift_card: req.body.gift_card,
                });

                data.save(function (err, response) {
                    if (err) {
                        res.status(200).send({
                            status: "error",
                            message: err,
                            token: req.token,
                        });
                    } else {
                        res.status(200).send({
                            status: "success",
                            message: "Coupon has been created successfully.",
                            data: response,
                        });
                    }
                });
            }
        });
    },

    coupon_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            where["deleted"] = 0;

            Coupon.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .populate("parent", "name")
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    Coupon.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_coupon_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Coupon.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Coupon not found",
                            token: req.token,
                        });
                    } else {
                        if (response.active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        Coupon.findOneAndUpdate(
                            where,
                            {
                                active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    update_coupon: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            upload(req, res, function (error) {
                if (error) {
                    res.status(200).send({
                        status: "error",
                        token: req.token,
                        result: error.message,
                    });
                } else {
                    console.log(req.body);
                    var where = {};
                    where["_id"] = req.body.id;

                    var updatedata = {};
                    updatedata["coupon"] = req.body.coupon;

                    updatedata["coupon"] = req.body.coupon;
                    updatedata["desc"] = req.body.desc;
                    updatedata["type"] = req.body.type;
                    updatedata["amount"] = req.body.amount;
                    updatedata["exp_date"] = req.body.exp_date;
                    updatedata["minimum_amount"] = req.body.minimum_amount;
                    updatedata["maximum_amount"] = req.body.maximum_amount;
                    updatedata["max_usage_limit"] = req.body.max_usage_limit;
                    updatedata["max_usage_limit_user"] = req.body.max_usage_limit_user;

                    updatedata["brand"] = req.body.brand ? req.body.brand.split(",") : null;
                    updatedata["category"] = req.body.category ? req.body.category.split(",") : null;
                    updatedata["product"] = req.body.product ? req.body.product.split(",") : null;
                    updatedata["customer"] = req.body.customer ? req.body.customer.split(",") : null;

                    updatedata["update_date"] = moment().format();
                    if (req.files[0]) {
                        updatedata["file"] = req.files[0].location;
                    }

                    Coupon.findOneAndUpdate(where, updatedata, {
                        new: true,
                    })
                        .exec()
                        .then((response) => {
                            res.status(200).send({
                                status: "success",
                                message: "Coupon has been updated..",
                                token: req.token,
                            });
                        });
                }
            });
        }
    },

    get_coupon: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Coupon.findOne(where)
                .populate("customer", "full_name mobile")
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid coupon id",
                        token: req.token,
                    });
                });
        }
    },

    delete_coupon: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Coupon.findOneAndUpdate(
                where,
                {
                    deleted: 1,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Coupon has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    ///// Cut off Time End ///////////

    // LP Head Start ///

    add_lp_head: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["mobile"] = req.body.mobile;
            where["deleted"] = 0;
            Users.findOne(where)
                .then((response) => {
                    if (response != null) {
                        res.status(200).send({
                            status: "error",
                            message: "Mobile already in use.",
                        });
                    } else {
                        var where = {};
                        where["email"] = req.body.email;
                        where["deleted"] = 0;
                        Users.findOne(where)
                            .then((response) => {
                                if (response != null) {
                                    res.status(200).send({
                                        status: "error",
                                        message: "Email address already in use.",
                                    });
                                } else {
                                    var UsersData = new Users({
                                        user_type: "lp_head",
                                        full_name: req.body.name,
                                        email: req.body.email,
                                        mobile: req.body.mobile,
                                        active: 1,
                                        city: req.body.city,
                                        service_zipcode: req.body.service_pincode,
                                        lp_manager: req.body.lp_manager ? req.body.lp_manager.split(",") : null,
                                    });

                                    UsersData.save(function (err, response) {
                                        if (err) {
                                            res.status(200).send({
                                                status: "error",
                                                message: err,
                                                token: req.token,
                                            });
                                        } else {
                                            res.status(200).send({
                                                status: "success",
                                                message: "Account has been created successfully.",
                                                data: response,
                                            });
                                        }
                                    });
                                }
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Invalid mobile/password",
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid mobile/password",
                    });
                });
        }
    },

    lp_head_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.name && req.query.name != "") {
                where["full_name"] = {
                    $regex: ".*" + req.query.name,
                    $options: "i",
                };
            }

            if (req.query.mobile && req.query.mobile != "") {
                where["mobile"] = {
                    $regex: ".*" + req.query.mobile,
                    $options: "i",
                };
            }

            if (req.query.email && req.query.email != "") {
                where["email"] = {
                    $regex: ".*" + req.query.email,
                    $options: "i",
                };
            }

            if (req.query.active && req.query.active != "") {
                where["active"] = req.query.active;
            }
            where["user_type"] = "lp_head";
            where["deleted"] = 0;
            Users.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    Users.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_lp_head_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Users.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "LP manager not found",
                            token: req.token,
                        });
                    } else {
                        if (response.active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        Users.findOneAndUpdate(
                            where,
                            {
                                active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                                return;
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                                return;
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },
    update_lp_head: function (req, res) {
        var where = {};
        where["_id"] = req.body.id;
        Users.findOneAndUpdate(
            where,
            {
                full_name: req.body.name,
                email: req.body.email,
                mobile: req.body.mobile,
                service_zipcode: req.body.service_pincode,
                update_date: moment().format(),
                lp_manager: req.body.lp_manager ? req.body.lp_manager.split(",") : null,
            },
            {
                new: true,
            }
        )
            .exec()
            .then((response) => {
                res.status(200).send({
                    status: "success",
                    message: "LP head has been updated",
                    token: req.token,
                });
                return;
            });
    },
    get_lp_head: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Users.findOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid LP head id",
                        token: req.token,
                    });
                });
        }
    },
    delete_lp_head: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Users.deleteOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },
    // LP Head End //

    // LP Manager Start ///

    add_lp_manager: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["mobile"] = req.body.mobile;
            where["deleted"] = 0;
            Users.findOne(where)
                .then((response) => {
                    if (response != null) {
                        res.status(200).send({
                            status: "error",
                            message: "Mobile already in use.",
                        });
                    } else {
                        var where = {};
                        where["email"] = req.body.email;
                        where["deleted"] = 0;
                        Users.findOne(where)
                            .then((response) => {
                                if (response != null) {
                                    res.status(200).send({
                                        status: "error",
                                        message: "Email address already in use.",
                                    });
                                } else {
                                    var UsersData = new Users({
                                        user_type: "lp_manager",
                                        full_name: req.body.name,
                                        email: req.body.email,
                                        mobile: req.body.mobile,
                                        active: 1,
                                        city: req.body.city,
                                        service_zipcode: req.body.service_pincode,
                                        delivery_boy: req.body.delivery_boy ? req.body.delivery_boy.split(",") : null,
                                    });

                                    UsersData.save(function (err, response) {
                                        if (err) {
                                            res.status(200).send({
                                                status: "error",
                                                message: err,
                                                token: req.token,
                                            });
                                        } else {
                                            res.status(200).send({
                                                status: "success",
                                                message: "Account has been created successfully.",
                                                data: response,
                                            });
                                        }
                                    });
                                }
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Invalid mobile/password",
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid mobile/password",
                    });
                });
        }
    },

    lp_manager_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.name && req.query.name != "") {
                where["full_name"] = {
                    $regex: ".*" + req.query.name,
                    $options: "i",
                };
            }

            if (req.query.mobile && req.query.mobile != "") {
                where["mobile"] = {
                    $regex: ".*" + req.query.mobile,
                    $options: "i",
                };
            }

            if (req.query.email && req.query.email != "") {
                where["email"] = {
                    $regex: ".*" + req.query.email,
                    $options: "i",
                };
            }

            if (req.query.active && req.query.active != "") {
                where["active"] = req.query.active;
            }

            where["user_type"] = "lp_manager";
            where["deleted"] = 0;
            Users.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .populate("master")
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    Users.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_lp_manager_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Users.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "LP manager not found",
                            token: req.token,
                        });
                    } else {
                        if (response.active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        Users.findOneAndUpdate(
                            where,
                            {
                                active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                                return;
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                                return;
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },
    update_lp_manager: function (req, res) {
        var where = {};
        where["_id"] = req.body.id;
        Users.findOneAndUpdate(
            where,
            {
                full_name: req.body.name,
                email: req.body.email,
                mobile: req.body.mobile,
                service_zipcode: req.body.service_pincode,
                update_date: moment().format(),
                delivery_boy: req.body.delivery_boy ? req.body.delivery_boy.split(",") : null,
            },
            {
                new: true,
            }
        )
            .exec()
            .then((response) => {
                res.status(200).send({
                    status: "success",
                    message: "LP manager has been updated",
                    token: req.token,
                });
                return;
            });
    },
    get_lp_manager: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Users.findOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid LP manager id",
                        token: req.token,
                    });
                });
        }
    },
    delete_lp_manager: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Users.deleteOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },
    // LP Manager End //

    ///// End Pickup Boy ///////////

    all_delivery_partner_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["active"] = 1;
            where["deleted"] = 0;
            where["user_type"] = "delivery_partner";
            Users.find(where)
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    all_pickup_partner_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["active"] = 1;
            where["deleted"] = 0;
            where["user_type"] = "pickup_partner";
            Users.find(where)
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    add_pickup_boy: function (req, res) {
        var where = {};
        where["deleted"] = 0;
        where["mobile"] = req.body.mobile;
        Users.findOne(where)
            .then((response) => {
                if (response != null) {
                    res.status(200).send({
                        status: "error",
                        message: "Mobile already in use.",
                    });
                } else {
                    var where = {};
                    where["deleted"] = 0;
                    where["email"] = req.body.email;
                    Users.findOne(where)
                        .then((response) => {
                            if (response != null) {
                                res.status(200).send({
                                    status: "error",
                                    message: "Email address already in use.",
                                });
                            } else {
                                var userdata = new Users({
                                    user_type: "pickup_boy",
                                    master: req.body.master,
                                    full_name: req.body.name,
                                    address: req.body.address,
                                    mobile: req.body.mobile,
                                    email: req.body.email,
                                    city: req.body.city,
                                    service_zipcode: req.body.service_zipcode,
                                    active: 1,

                                    rate_per_km: req.body.rate_per_km,
                                    monthly_fixed_cost: req.body.monthly_fixed_cost,

                                    price_per_pack: req.body.price_per_pack,
                                    price_per_kg: req.body.price_per_kg,
                                });
                                userdata.save(function (err, response) {
                                    if (err) {
                                        res.status(200).send({
                                            status: "error",
                                            message: err,
                                            token: req.token,
                                        });
                                    } else {
                                        res.status(200).send({
                                            status: "success",
                                            message: "Account has been created successfully.",
                                            data: response,
                                        });
                                    }
                                });
                            }
                        })
                        .catch((error) => {
                            res.status(200).send({
                                status: "error",
                                message: "Invalid mobile/password",
                            });
                        });
                }
            })
            .catch((error) => {
                res.status(200).send({
                    status: "error",
                    message: "Invalid mobile/password",
                });
            });
    },

    pickup_boy_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.name && req.query.name != "") {
                where["full_name"] = {
                    $regex: ".*" + req.query.name,
                    $options: "i",
                };
            }

            if (req.query.mobile && req.query.mobile != "") {
                where["mobile"] = {
                    $regex: ".*" + req.query.mobile,
                    $options: "i",
                };
            }

            if (req.query.active && req.query.active != "") {
                where["active"] = req.query.active;
            }
            if (req.query.parent && req.query.parent != "") {
                where["parent"] = req.query.parent;
            }

            where["deleted"] = 0;
            where["user_type"] = "pickup_boy";

            Users.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .populate("parent", "name")
                .populate("master")
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    Users.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_pickup_boy_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Users.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Pickup boy not found",
                            token: req.token,
                        });
                    } else {
                        if (response.active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        Users.findOneAndUpdate(
                            where,
                            {
                                active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    update_pickup_boy: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Users.findOneAndUpdate(
                where,
                {
                    full_name: req.body.name,
                    parent: req.body.parent,
                    address: req.body.address,
                    mobile: req.body.mobile,
                    email: req.body.email,
                    city: req.body.city,
                    service_zipcode: req.body.service_zipcode,
                    update_date: moment().format(),
                    doc1_type: req.body.doc1_type,
                    doc2_type: req.body.doc2_type,
                    doc3_type: req.body.doc3_type,

                    rate_per_km: req.body.rate_per_km,
                    monthly_fixed_cost: req.body.monthly_fixed_cost,

                    price_per_pack: req.body.price_per_pack,
                    price_per_kg: req.body.price_per_kg,
                    //file: ""
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Pickup boy has been updated",
                        token: req.token,
                    });
                    return;
                });
        }
    },

    get_pickup_boy: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Users.findOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid pickup boy id",
                        token: req.token,
                    });
                });
        }
    },

    delete_pickup_boy: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Users.findOneAndUpdate(
                where,
                {
                    deleted: 1,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Pickup boy has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    ///// End Pickup Boy ///////////

    ///// End Delivery Boy ///////////

    add_delivery_boy: function (req, res) {
        var where = {};
        where["deleted"] = 0;
        where["mobile"] = req.body.mobile;
        Users.findOne(where)
            .then((response) => {
                if (response != null) {
                    res.status(200).send({
                        status: "error",
                        message: "Mobile already in use.",
                    });
                } else {
                    var where = {};
                    where["deleted"] = 0;
                    where["email"] = req.body.email;
                    Users.findOne(where)
                        .then((response) => {
                            if (response != null) {
                                res.status(200).send({
                                    status: "error",
                                    message: "Email address already in use.",
                                });
                            } else {
                                var userdata = new Users({
                                    user_type: "delivery_boy",
                                    master: req.body.master,
                                    full_name: req.body.name,
                                    address: req.body.address,
                                    mobile: req.body.mobile,
                                    email: req.body.email,
                                    city: req.body.city,
                                    active: 1,
                                    service_zipcode: req.body.service_zipcode,
                                    rate_per_km: req.body.rate_per_km,
                                    monthly_fixed_cost: req.body.monthly_fixed_cost,

                                    price_per_pack: req.body.price_per_pack,
                                    price_per_kg: req.body.price_per_kg,

                                    cod_order_cost: req.body.cod_order_cost,
                                    additional_cost1: req.body.additional_cost1,
                                    additional_cost2: req.body.additional_cost2,
                                });
                                userdata.save(function (err, response) {
                                    if (err) {
                                        res.status(200).send({
                                            status: "error",
                                            message: err,
                                            token: req.token,
                                        });
                                    } else {
                                        res.status(200).send({
                                            status: "success",
                                            message: "Account has been created successfully.",
                                            data: response,
                                        });
                                    }
                                });
                            }
                        })
                        .catch((error) => {
                            res.status(200).send({
                                status: "error",
                                message: "Invalid mobile/password",
                            });
                        });
                }
            })
            .catch((error) => {
                res.status(200).send({
                    status: "error",
                    message: "Invalid mobile/password",
                });
            });
    },

    delivery_boy_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.name && req.query.name != "") {
                where["full_name"] = {
                    $regex: ".*" + req.query.name,
                    $options: "i",
                };
            }

            if (req.query.mobile && req.query.mobile != "") {
                where["mobile"] = {
                    $regex: ".*" + req.query.mobile,
                    $options: "i",
                };
            }

            if (req.query.active && req.query.active != "") {
                where["active"] = req.query.active;
            }
            if (req.query.parent && req.query.parent != "") {
                where["parent"] = req.query.parent;
            }

            where["deleted"] = 0;
            where["user_type"] = "delivery_boy";

            Users.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .populate("parent", "name")
                .populate("master")
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    Users.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_delivery_boy_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Users.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Delivery boy not found",
                            token: req.token,
                        });
                    } else {
                        if (response.active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        Users.findOneAndUpdate(
                            where,
                            {
                                active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    update_delivery_boy: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Users.findOneAndUpdate(
                where,
                {
                    full_name: req.body.name,
                    address: req.body.address,
                    mobile: req.body.mobile,
                    email: req.body.email,
                    city: req.body.city,
                    service_zipcode: req.body.service_zipcode,
                    master: req.body.master,
                    update_date: moment().format(),
                    doc1_type: req.body.doc1_type,
                    doc2_type: req.body.doc2_type,
                    doc3_type: req.body.doc3_type,

                    rate_per_km: req.body.rate_per_km,
                    monthly_fixed_cost: req.body.monthly_fixed_cost,

                    price_per_pack: req.body.price_per_pack,
                    price_per_kg: req.body.price_per_kg,

                    cod_order_cost: req.body.cod_order_cost,
                    additional_cost1: req.body.additional_cost1,
                    additional_cost2: req.body.additional_cost2,

                    //file: ""
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Delivery boy has been updated",
                        token: req.token,
                    });
                    return;
                });
        }
    },

    get_delivery_boy: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Users.findOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid delivery boy id",
                        token: req.token,
                    });
                });
        }
    },

    delete_delivery_boy: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Users.findOneAndUpdate(
                where,
                {
                    deleted: 1,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Delivery boy has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },
    ///// End Delivery Boy ///////////

    /// Review Start ///
    review_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.name != "") {
                where["name"] = {
                    $regex: ".*" + req.query.name,
                    $options: "i",
                };
            }

            if (req.query.active != "") {
                where["active"] = req.query.active;
            }

            where["deleted"] = 0;

            Review.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .sort({
                    created_date: -1,
                })
                .populate("product")
                .then((response) => {
                    Review.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },
    update_review_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Review.findOne(where)
                .populate("user")
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Review not found",
                            token: req.token,
                        });
                    } else {
                        if (response.active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        var user_point = Number(response.user.subscription.point);
                        Review.findOneAndUpdate(
                            where,
                            {
                                active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                if (active == 1) {
                                    var where = {};
                                    Settings.find(where).then((settings_response) => {
                                        var review = settings_response[44].value;
                                        var Walletdata = new Wallet({
                                            user: response.user._id,
                                            point: Number(review),
                                            type: 1,
                                            note: "For review",
                                        });
                                        Walletdata.save(function (err, response) {});

                                        var where = {};
                                        where["_id"] = response.user._id;
                                        where["deleted"] = 0;
                                        Users.findOneAndUpdate(
                                            where,
                                            {
                                                subscription: {
                                                    point: Number(review) + Number(user_point),
                                                },
                                            },
                                            {
                                                new: true,
                                            }
                                        )
                                            .exec()
                                            .then((response) => {
                                                //console.log(response);
                                            })
                                            .catch((error) => {
                                                //console.log(error);
                                            });
                                    });
                                } else {
                                    var where = {};
                                    Settings.find(where).then((settings_response) => {
                                        var review = settings_response[44].value;
                                        var Walletdata = new Wallet({
                                            user: response.user._id,
                                            point: Number(review),
                                            type: 0,
                                            note: "For review",
                                        });
                                        Walletdata.save(function (err, response) {});

                                        var where = {};
                                        where["_id"] = response.user._id;
                                        where["deleted"] = 0;
                                        Users.findOneAndUpdate(
                                            where,
                                            {
                                                subscription: {
                                                    point: Number(review) - Number(user_point),
                                                },
                                            },
                                            {
                                                new: true,
                                            }
                                        )
                                            .exec()
                                            .then((response) => {
                                                //console.log(response);
                                            })
                                            .catch((error) => {
                                                //console.log(error);
                                            });
                                    });
                                }

                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },
    delete_review: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Review.deleteOne(where)
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "City has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },
    /// Review End ///

    lp_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["deleted"] = 0;
            where["user_type"] = "lp_manager";
            Users.find(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    delivery_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["deleted"] = 0;
            where["user_type"] = "delivery_partner";
            Users.find(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    add_user: function (req, res) {
        console.log(req.body);
        var where = {};
        where["mobile"] = req.body.mobile;
        Users.findOne(where).then((response) => {
            if (response != null) {
                res.status(200).send({
                    status: "error",
                    message: "Mobile exist in the database.",
                });
            } else {
                var where = {};
                where["email"] = req.body.email;
                Users.findOne(where).then((response) => {
                    if (response != null) {
                        res.status(200).send({
                            status: "error",
                            message: "Email exist in the database.",
                        });
                    } else {
                        bcryptjs.genSalt(saltRounds, (err, salt) => {
                            bcryptjs.hash(req.body.password, salt, (err, hash) => {
                                var Usersdata = new Users({
                                    user_type: req.body.group,
                                    full_name: req.body.full_name,
                                    email: req.body.email,
                                    mobile: req.body.mobile,
                                    password: hash,
                                    salary: req.body.salary,
                                    office: req.body.office,
                                    role: req.body.role,
                                });
                                Usersdata.save(function (err, response) {
                                    if (err) {
                                        res.status(200).send({
                                            status: "error",
                                            message: err,
                                            token: req.token,
                                        });
                                    } else {
                                        res.status(200).send({
                                            status: "success",
                                            message: "Users has been created successfully.",
                                            token: req.token,
                                        });
                                    }
                                });
                            });
                        });
                    }
                });
            }
        });
    },
    delete_user: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Users.findOneAndUpdate(
                where,
                {
                    deleted: 1,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "User has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },
    get_user_data: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Users.findOne(where)
                .populate("role")
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid email/password",
                    });
                });
        }
    },

    all_brand_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["deleted"] = 0;
            where["active"] = 1;
            Brand.find(where)
                .sort({
                    name: 1,
                })
                .collation({ locale: "en_US", numericOrdering: true })
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    all_category_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["deleted"] = 0;
            where["active"] = 1;
            where["parent"] = null;
            Category.find(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    all_product_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["deleted"] = 0;
            where["active"] = 1;
            Products.find(where)
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    all_customer_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["deleted"] = 0;
            where["active"] = 1;
            where["user_type"] = "customer";
            if (req.query.q && req.query.q != "") {
                where["$or"] = [
                    // {
                    //     name: {
                    //         $regex: ".*" + req.query.q + ".*",
                    //         $options: "i",
                    //     },
                    // },
                    // {
                    //     mobile: {
                    //         $regex: ".*" + req.query.q + ".*",
                    //         $options: "i",
                    //     },
                    // },
                    {
                        email: {
                            $regex: ".*" + req.query.q + ".*",
                            $options: "i",
                        },
                    },
                ];
            }

            Users.find(where)
                .limit(20)
                .select("full_name mobile email")
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    ////// Shipping Start /////////
    create_shipping: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["name"] = req.query.name;
            where["deleted"] = 0;
            Shipping.findOne(where).then((response) => {
                if (response != null) {
                    res.status(200).send({
                        status: "error",
                        message: "Shipping exist in the database.",
                    });
                } else {
                    var ShippingData = new Shipping({
                        name: req.query.name,
                        description_after_ref: req.query.description_after_ref,
                        price: req.query.price,
                    });
                    ShippingData.save(function (err, response) {
                        if (err) {
                            res.status(200).send({
                                status: "error",
                                message: err,
                                token: req.token,
                            });
                        } else {
                            res.status(200).send({
                                status: "success",
                                message: "Shipping has been created successfully..",
                            });
                        }
                    });
                }
            });
        }
    },

    shipping_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.name != "") {
                where["name"] = {
                    $regex: ".*" + req.query.name,
                    $options: "i",
                };
            }

            if (req.query.active != "") {
                where["active"] = req.query.active;
            }

            where["deleted"] = 0;

            Shipping.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    Shipping.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_shipping_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Shipping.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Shipping not found",
                            token: req.token,
                        });
                    } else {
                        if (response.active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        Shipping.findOneAndUpdate(
                            where,
                            {
                                active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },
    get_shipping: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Shipping.findOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid shipping id",
                        token: req.token,
                    });
                });
        }
    },

    update_shipping: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Shipping.findOneAndUpdate(
                where,
                {
                    name: req.query.name,
                    description_after_ref: req.query.description_after_ref,
                    price: req.query.price,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Shipping has been updated",
                        token: req.token,
                    });
                    return;
                });
        }
    },
    delete_shipping: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Shipping.findOneAndUpdate(
                where,
                {
                    deleted: 1,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Shipping has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    all_shipping_class: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            where["deleted"] = 0;

            Shipping.find(where)
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    ///// Shipping End ////////

    state_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            States.find(where)
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_customer_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            where["user_type"] = "customer";
            Users.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "customer not found",
                            token: req.token,
                        });
                    } else {
                        if (response.active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        Users.findOneAndUpdate(
                            where,
                            {
                                active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                                return;
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                                return;
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    customer_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.user && req.query.user != "") {
                where["full_name"] = {
                    $regex: ".*" + req.query.user,
                    $options: "i",
                };
            }

            if (req.query.email && req.query.email != "") {
                where["email"] = {
                    $regex: ".*" + req.query.email,
                    $options: "i",
                };
            }

            if (req.query.mobile && req.query.mobile != "") {
                where["mobile"] = {
                    $regex: ".*" + req.query.mobile,
                    $options: "i",
                };
            }

            where["user_type"] = "customer";

            if (req.query.active && req.query.active != "") {
                where["active"] = req.query.active;
            }

            where["deleted"] = 0;

            // Users.aggregate([
            //   { $limit: parseInt(req.query.limit) },
            //   { $skip: parseInt(req.query.page) },
            //   { $match: where },
            //   { $sort: { created_date: -1 } },
            //   {  $lookup: {  from: "addresses", localField: "_id",  foreignField: "user", as: "address" } }
            // ]).then(response => {
            //   Users.find(where).countDocuments(function (err, count) {
            //     res.status(200).send({
            //       status: "success",
            //       token: req.token,
            //       result: response,
            //       totalCount: count,
            //     });
            //   });
            // });

            Users.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    Users.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    order_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.order_city && req.query.order_city != "") {
                where["order_city"] = req.query.order_city;

                if (req.query.active && req.query.active != "") {
                    where["status"] = req.query.active;
                }

                where["deleted"] = 0;
            }
            if (req.query.giftcard && req.query.giftcard == "1") {
                where["gift_code"] = {
                    $ne: "",
                };
            }

            if (req.query.vendor_city && req.query.vendor_city != "") {
                where["vendor_city"] = req.query.vendor_city;
                if (!req.query.active && req.query.active == "") {
                    where["status"] = {
                        $nin: ["delivered", "pending_payment", "declined_vendor", "rejected_customer", "refunded", "failed", "cancel", "on_hold"],
                    };
                } else {
                    where["status"] = req.query.active;
                }
                where["deleted"] = 0;
            }

            if (req.query.start_date && req.query.start_date != "" && req.query.end_date && req.query.end_date != "") {
                where["created_date"] = {
                    $gte: new Date(req.query.start_date),
                    $lt: new Date(req.query.end_date),
                };
            }

            if (req.query.active != "" || req.query.mobile != "" || req.query.orderid != "" || req.query.start_date != "" || req.query.end_date != "" || req.query.vendor_city != "" || req.query.order_city != "") {
                if (req.query.active == "deleted") {
                    where["deleted"] = 1;
                } else {
                    if (req.query.active != "") {
                        where["status"] = req.query.active;
                    }
                    where["deleted"] = 0;
                }
            } else {
                if (!req.query.order_city && req.query.order_city == "") {
                    if (!req.query.active && req.query.active == "") {
                        // where["status"] = {
                        // 	$nin: [
                        // 		"delivered",
                        // 		"pending_payment",
                        // 		"declined_vendor",
                        // 		"rejected_customer",
                        // 		"refunded",
                        // 		"failed",
                        // 		"cancel",
                        // 		"on_hold"
                        // 	]
                        // };
                        //where["status"] = "vendor_approved";
                    } else {
                        where["status"] = req.query.active;
                    }
                    where["deleted"] = 0;
                }
            }

            if (req.query.orderid && req.query.orderid != "") {
                where["orderid"] = {
                    $regex: ".*" + req.query.orderid,
                    $options: "i",
                };
            }

            if ((req.query.order_city && req.query.order_city != "" && req.query.vendor_city) || req.query.vendor_city != "") {
                if (!req.query.active && req.query.active == "") {
                    where["status"] = {
                        $nin: ["delivered", "pending_payment", "declined_vendor", "rejected_customer", "refunded", "failed", "cancel", "on_hold"],
                    };
                } else {
                    where["status"] = req.query.active;
                }
                where["deleted"] = 0;
            }

            if (req.query.has_note && req.query.has_note == 1) {
                where["has_note"] = 1;
            }

            if (req.query.gateway && req.query.gateway != "") {
                where["gateway"] = req.query.gateway;
            }

            Users.findOne({
                user_type: "customer",
                mobile: {
                    $regex: ".*" + req.query.mobile,
                    $options: "i",
                },
            }).then(function (mobile_data) {
                Users.findOne({
                    user_type: "customer",
                    email: {
                        $regex: ".*" + req.query.email,
                        $options: "i",
                    },
                }).then(function (email_data) {
                    if (mobile_data && req.query.mobile != "") {
                        where["user"] = mobile_data._id;
                    }
                    if (mobile_data == null && req.query.mobile) {
                        where["user"] = null;
                    }

                    if (email_data && req.query.email != "") {
                        where["user"] = email_data._id;
                    }
                    if (email_data == null && req.query.email) {
                        where["user"] = null;
                    }

                    Users.findOne({
                        user_type: "vendor",
                        mobile: {
                            $regex: ".*" + req.query.vendor_mobile,
                            $options: "i",
                        },
                    }).then(function (vendor_mobile_data) {
                        if (vendor_mobile_data && req.query.vendor_mobile) {
                            where["vendor"] = vendor_mobile_data._id;
                        }
                        if (vendor_mobile_data == null && req.query.vendor_mobile) {
                            where["vendor"] = null;
                        }
                        console.log(where);
                        Checkout.find(where, null, {
                            limit: parseInt(req.query.limit),
                            skip: parseInt(req.query.page),
                        })
                            .populate("user")
                            .populate("products.product")
                            .populate("vendor")
                            .populate("cargo_partner")
                            .populate("delivery_partner")
                            .populate("pickup_partner")
                            .populate("pickup_boy")
                            .populate("delivery_boy")
                            .populate({
                                path: "address",
                            })
                            .populate({
                                path: "vendor",
                                populate: [
                                    {
                                        path: "city",
                                        model: "cities",
                                        select: "name",
                                    },
                                ],
                            })
                            .sort({
                                created_date: -1,
                            })
                            .then((response) => {
                                Checkout.find(where).countDocuments(function (err, count) {
                                    res.status(200).send({
                                        status: "success",
                                        token: req.token,
                                        result: response,
                                        totalCount: count,
                                    });
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: error,
                                    token: req.token,
                                });
                            });
                    });
                });
            });
        }
    },

    update_shipping: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Checkout.findOneAndUpdate(
                where,
                {
                    status: req.query.status,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Shipping has been updated",
                        token: req.token,
                    });
                    return;
                });
        }
    },

    update_gateway: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Checkout.findOneAndUpdate(
                where,
                {
                    gateway: req.query.gateway,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Order gateway has been updated",
                        token: req.token,
                    });
                });
        }
    },

    update_order_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Checkout.findOneAndUpdate(
                where,
                {
                    status: req.query.status,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    var where = {};
                    where["_id"] = req.query.id;
                    Checkout.findOne(where)
                        .populate("user")
                        .populate("delivery_boy")
                        .then((response) => {
                            if (response.user.first_time == 1) {
                                var where = {};
                                Settings.find(where).then((settings_response) => {
                                    var signup_bonus_sender = settings_response[32].value;
                                    var sender = response.user.reffer_by;

                                    var where = {};
                                    where["mobile"] = sender;
                                    Users.findOne(where).then((sender_response) => {
                                        var point = sender_response.subscription.point;
                                        var new_point = Number(point) + Number(signup_bonus_sender);
                                        var where = {};
                                        where["mobile"] = sender;
                                        Users.findOneAndUpdate(
                                            where,
                                            {
                                                subscription: {
                                                    point: new_point,
                                                },
                                            },
                                            {
                                                new: true,
                                            }
                                        )
                                            .exec()
                                            .then((sender_response) => {
                                                var Walletdata = new Wallet({
                                                    user: sender_response._id,
                                                    point: Number(signup_bonus_sender),
                                                    type: 1,
                                                    note: "Referral signup bonus",
                                                });
                                                Walletdata.save(function (err, response) {});

                                                var where = {};
                                                where["_id"] = response._id;
                                                Users.findOneAndUpdate(
                                                    where,
                                                    {
                                                        first_time: 0,
                                                    },
                                                    {
                                                        new: true,
                                                    }
                                                )
                                                    .exec()
                                                    .then((response) => {});
                                            });
                                    });
                                });
                            }

                            var name = response.user.full_name != "" ? response.user.full_name : "User";

                            if (req.query.status == "processing") {
                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to PENDING-PAYMENT. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to PROCESSING. Thanks, SWAGBAG";

                                var ordernote = new OrderNote({
                                    note: msg,
                                    order: req.query.id,
                                });
                                ordernote.save(function (err, response) {});

                                var data = JSON.stringify({
                                    action: "FULFILL",
                                    action_notes: "",
                                    fields: {
                                        order_id: response.orderid,
                                    },
                                });

                                var config = {
                                    method: "post",
                                    url: "https://7454786.extforms.netsuite.com/app/site/hosting/scriptlet.nl?script=81&deploy=1&compid=7454786&h=f87f5b117d487de4c1d2",
                                    headers: {
                                        "User-Agent": "Mozilla/5.0",
                                        token: "123",
                                        "Content-Type": "application/json",
                                    },
                                    data: data,
                                };

                                axios(config)
                                    .then(function (response) {})
                                    .catch(function (error) {
                                        console.log(error);
                                    });
                            }

                            if (req.query.status == "pending_payment") {
                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to PENDING-PAYMENT. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to PENDING-PAYMENT. Thanks, SWAGBAG";

                                var ordernote = new OrderNote({
                                    note: msg,
                                    order: req.query.id,
                                });
                                ordernote.save(function (err, response) {});
                            }

                            if (req.query.status == "waiting_vendor_approval") {
                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to PROCESSING. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                var msg = "Dear " + name + ", your order no " + response.orderid + " status is changed to PROCESSING. Thanks, SWAGBAG";

                                var ordernote = new OrderNote({
                                    note: msg,
                                    order: req.query.id,
                                });
                                ordernote.save(function (err, response) {});
                            }

                            if (req.query.status == "on_hold") {
                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to HOLD. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to HOLD. Thanks, SWAGBAG";

                                var ordernote = new OrderNote({
                                    note: msg,
                                    order: req.query.id,
                                });
                                ordernote.save(function (err, response) {});
                            }

                            if (req.query.status == "ready_pickup") {
                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to READY-TO-PICKUP. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to READY-TO-PICKUP. Thanks, SWAGBAG";

                                var ordernote = new OrderNote({
                                    note: msg,
                                    order: req.query.id,
                                });
                                ordernote.save(function (err, response) {});
                            }

                            if (req.query.status == "pickup_boy_assigned") {
                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to PICKUP-BOY-ASSIGNED. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to PICKUP-BOY-ASSIGNED. Thanks, SWAGBAG";

                                var ordernote = new OrderNote({
                                    note: msg,
                                    order: req.query.id,
                                });
                                ordernote.save(function (err, response) {});
                            }

                            if (req.query.status == "pickup_boy_started") {
                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to PICKUP-BOY-STARTED. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to PICKUP-BOY-STARTED. Thanks, SWAGBAG";

                                var ordernote = new OrderNote({
                                    note: msg,
                                    order: req.query.id,
                                });
                                ordernote.save(function (err, response) {});
                            }

                            if (req.query.status == "delivered_to_cargo_partner") {
                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to DELIVERED-TO-CARGO-PARTNER. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to DELIVERED-TO-CARGO-PARTNER. Thanks, SWAGBAG";

                                var ordernote = new OrderNote({
                                    note: msg,
                                    order: req.query.id,
                                });
                                ordernote.save(function (err, response) {});
                            }

                            if (req.query.status == "cargo_off_loaded") {
                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to CARGO-OFF-LOADED. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to CARGO-OFF-LOADED. Thanks, SWAGBAG";

                                var ordernote = new OrderNote({
                                    note: msg,
                                    order: req.query.id,
                                });
                                ordernote.save(function (err, response) {});
                            }

                            if (req.query.status == "cargo_delivery_started") {
                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to CARGO-LOADED-TO-FLIGHT. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to CARGO-LOADED-TO-FLIGHT. Thanks, SWAGBAG";

                                var ordernote = new OrderNote({
                                    note: msg,
                                    order: req.query.id,
                                });
                                ordernote.save(function (err, response) {});
                            }

                            if (req.query.status == "received_destination_airport") {
                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to RECEIVED-AT-DESTINATION-AIRPORT. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to RECEIVED-AT-DESTINATION-AIRPORT. Thanks, SWAGBAG";

                                var ordernote = new OrderNote({
                                    note: msg,
                                    order: req.query.id,
                                });
                                ordernote.save(function (err, response) {});
                            }

                            if (req.query.status == "delivered_to_delivery_partner") {
                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to HANDED-OVER-TO-DELIVERY-PARTNER. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to HANDED-OVER-TO-DELIVERY-PARTNER. Thanks, SWAGBAG";

                                var ordernote = new OrderNote({
                                    note: msg,
                                    order: req.query.id,
                                });
                                ordernote.save(function (err, response) {});
                            }

                            if (req.query.status == "delivery_boy_assigned") {
                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to DELIVERY-BOY-ASSIGNED. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to DELIVERY-BOY-ASSIGNED. Thanks, SWAGBAG";

                                var ordernote = new OrderNote({
                                    note: msg,
                                    order: req.query.id,
                                });
                                ordernote.save(function (err, response) {});
                            }

                            if (req.query.status == "delivery_boy_started") {
                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to OUT-FOR-DELIVERY. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to OUT-FOR-DELIVERY. Thanks, SWAGBAG";

                                //console.log(msg4);
                                var ordernote = new OrderNote({
                                    note: msg,
                                    order: req.query.id,
                                });
                                ordernote.save(function (err, response) {});
                            }

                            if (req.query.status == "pickup_boy_assigned") {
                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to PICKUP-MAN-ASSIGNED. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to PICKUP-MAN-ASSIGNED. Thanks, SWAGBAG";

                                var ordernote = new OrderNote({
                                    note: msg,
                                    order: req.query.id,
                                });
                                ordernote.save(function (err, response) {});
                            }

                            if (req.query.status == "pickup_boy_started") {
                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to PICKUP-BOY-STARTED. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to PICKUP-BOY-STARTED. Thanks, SWAGBAG";

                                var ordernote = new OrderNote({
                                    note: msg,
                                    order: req.query.id,
                                });
                                ordernote.save(function (err, response) {});
                            }

                            if (req.query.status == "delivered") {
                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to DELIVERED. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to DELIVERED. Thanks, SWAGBAG";

                                var ordernote = new OrderNote({
                                    note: msg,
                                    order: req.query.id,
                                });
                                ordernote.save(function (err, response) {});

                                var data = JSON.stringify({
                                    action: "INVOICE",
                                    action_notes: "",
                                    fields: {
                                        order_id: response.orderid,
                                    },
                                });

                                var config = {
                                    method: "post",
                                    url: "https://7454786.extforms.netsuite.com/app/site/hosting/scriptlet.nl?script=81&deploy=1&compid=7454786&h=f87f5b117d487de4c1d2",
                                    headers: {
                                        "User-Agent": "Mozilla/5.0",
                                        token: "123",
                                        "Content-Type": "application/json",
                                    },
                                    data: data,
                                };

                                axios(config)
                                    .then(function (response) {
                                        console.log(JSON.stringify(response.data));
                                    })
                                    .catch(function (error) {
                                        console.log(error);
                                    });
                            }

                            if (req.query.status == "cancel") {
                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to CANCELLED. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to CANCELLED. Thanks, SWAGBAG";

                                var ordernote = new OrderNote({
                                    note: msg,
                                    order: req.query.id,
                                });
                                ordernote.save(function (err, response) {});
                            }

                            if (req.query.status == "failed") {
                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to FAILED. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to FAILED. Thanks, SWAGBAG";

                                var ordernote = new OrderNote({
                                    note: msg,
                                    order: req.query.id,
                                });
                                ordernote.save(function (err, response) {});
                            }

                            if (req.query.status == "refunded") {
                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to REFUNDED. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to REFUNDED. Thanks, SWAGBAG";

                                var ordernote = new OrderNote({
                                    note: msg,
                                    order: req.query.id,
                                });
                                ordernote.save(function (err, response) {});
                            }

                            if (req.query.status == "rejected_customer") {
                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to REJECTED-BY-CUSTOMER. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to REJECTED-BY-CUSTOMER. Thanks, SWAGBAG";

                                var ordernote = new OrderNote({
                                    note: msg,
                                    order: req.query.id,
                                });
                                ordernote.save(function (err, response) {});
                            }

                            if (req.query.status == "declined_vendor") {
                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to DECLINED-BY-VENDOR. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to DECLINED-BY-VENDOR. Thanks, SWAGBAG";

                                var ordernote = new OrderNote({
                                    note: msg,
                                    order: req.query.id,
                                });
                                ordernote.save(function (err, response) {});
                            }

                            res.status(200).send({
                                status: "success",
                                message: "Order status has been updated",
                                token: req.token,
                            });

                            return;
                        });
                });
        }
    },

    update_order_date: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Checkout.findOneAndUpdate(
                where,
                {
                    delivery_date: req.query.date,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Shipping has been updated",
                        token: req.token,
                    });
                    return;
                });
        }
    },

    update_order_slot: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Checkout.findOneAndUpdate(
                where,
                {
                    timeslot: req.query.slot,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Shipping has been updated",
                        token: req.token,
                    });
                    return;
                });
        }
    },

    customer_address_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            Address.find({
                user: req.body.id,
                deleted: 0,
            })
                //.populate("city")
                .then(function (response) {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                });
        }
    },

    update_customer: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Users.findOneAndUpdate(
                where,
                {
                    full_name: req.body.full_name ? req.body.full_name : "",
                    email: req.body.email ? req.body.email : "",
                    mobile: req.body.mobile ? req.body.mobile : "",
                    update_date: moment().format(),
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Profile has been updated.",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    update_customer_cod_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            where["user_type"] = "customer";
            Users.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "customer not found",
                            token: req.token,
                        });
                    } else {
                        if (response.cod == 0) {
                            var cod = 1;
                        } else {
                            var cod = 0;
                        }
                        Users.findOneAndUpdate(
                            where,
                            {
                                cod: cod,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "COD status updated",
                                    token: req.token,
                                    cod: cod,
                                });
                                return;
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                                return;
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    update_customer_order_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Checkout.findOneAndUpdate(
                where,
                {
                    status: req.query.status,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Order status has been updated",
                        token: req.token,
                    });

                    return;
                });
        }
    },

    add_order_note: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Checkout.findOne(where)
                .populate("user")
                .then((order_response) => {
                    var OrderNoteData = new OrderNote({
                        note: req.query.order_note,
                        order: req.query.id,
                        token: req.token,
                    });

                    OrderNoteData.save(function (err, response) {
                        if (req.query.send == "yes") {
                            gen_custom_sms(order_response.user.mobile, req.query.order_note);
                            axios
                                .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + order_response.user.email + "&msg=" + req.query.order_note, {})
                                .then(function (response) {
                                    //console.log(response.data);
                                })
                                .catch(function (error) {
                                    console.log(error);
                                });
                        }

                        res.status(200).send({
                            status: "success",
                            message: "Note saved.",
                            token: req.token,
                        });
                    });
                });
        }
    },

    order_note_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["order"] = req.query.id;
            OrderNote.find(where)
                .sort({
                    created_date: 1,
                })
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        result: response,
                        position: {},
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    approve_order_vendor: function (req, res) {
        var d = new Date() - 3 * 60 * 1000; //3 m ago (from now)
        var where = {};
        where["created_date"] = {
            $lt: d,
        };
        where["status"] = "waiting_vendor_approval";

        Checkout.find(where)
            .populate("user")
            .then((response) => {
                if (response) {
                    for (let i = 0; i < response.length; i++) {
                        var mobile = response[i].user.mobile;
                        var msg5 = "DEAR CUSTOMER, PLEASE HELP US BY CHECKING THE QUALITY OF FOOD AT THE TIME OF DELIVERY. AFTER ACCEPTING THE DELIVERY, ANY COMPLAIN REGARDING FOOD QUALITY WILL BE DIFFICULT TO ASCERTAIN. Tastes2plate CC Team";
                        gen_custom_sms(mobile, msg5);

                        var msg = encodeURI("DEAR CUSTOMER, PLEASE HELP US BY CHECKING THE QUALITY OF FOOD AT THE TIME OF DELIVERY. AFTER ACCEPTING THE DELIVERY, ANY COMPLAIN REGARDING FOOD QUALITY WILL BE DIFFICULT TO ASCERTAIN. Tastes2plate CC Team");
                        axios.get("https://media.smsgupshup.com/GatewayAPI/rest?method=SendMediaMessage&format=json&userid=" + wuser + "&password=" + wpwd + "&send_to=91" + mobile + "&v=1.1&auth_scheme=plain&isHSM=true&msg_type=text&caption=" + msg + "&isTemplate=true").then(function () {});
                    }
                }
            });

        Checkout.updateMany(
            where,
            {
                status: "vendor_approved",
            },
            {
                new: true,
            }
        )
            .exec()
            .then((response) => {
                res.status(200).send({
                    status: "success",
                    result: response,
                });
            });
    },

    send_order_invoice: function (req, res) {
        var where = {};
        where["_id"] = req.query.id;
        Checkout.findOne(where)
            .populate("user")
            .populate("products.product")
            .populate("vendor")
            .populate("cargo_partner")
            .populate("delivery_partner")
            .populate("pickup_partner")
            .populate({
                path: "address",
                populate: [
                    {
                        path: "city",
                        model: "cities",
                        select: "name",
                    },
                ],
            })
            .then((response) => {
                var html_template =
                    "<!DOCTYPE html>" +
                    "<html>" +
                    "<head>" +
                    "    <title></title>" +
                    '    <meta httpEquiv="Content-Type" content="text/html; charset=utf-8" />' +
                    '    <meta name="viewport" content="width=device-width, initial-scale=1">' +
                    '    <meta httpEquiv="X-UA-Compatible" content="IE=edge" />' +
                    '    <style type="text/css">' +
                    "        body," +
                    "        table," +
                    "        td," +
                    "        a {" +
                    "            -webkit-text-size-adjust: 100%;" +
                    "            -ms-text-size-adjust: 100%;" +
                    "        }" +
                    "        table," +
                    "        td {" +
                    "            mso-table-lspace: 0pt;" +
                    "            mso-table-rspace: 0pt;" +
                    "        }" +
                    "        img {" +
                    "            -ms-interpolation-mode: bicubic;" +
                    "        }" +
                    "        img {" +
                    "            border: 0;" +
                    "            height: auto;" +
                    "            line-height: 100%;" +
                    "            outline: none;" +
                    "            text-decoration: none;" +
                    "        }" +
                    "        table {" +
                    "            border-collapse: collapse !important;" +
                    "        }" +
                    "        body {" +
                    "            height: 100% !important;" +
                    "            margin: 0 !important;" +
                    "            padding: 0 !important;" +
                    "            width: 100% !important;" +
                    "        }" +
                    "        a[x-apple-data-detectors] {" +
                    "            color: inherit !important;" +
                    "            text-decoration: none !important;" +
                    "            font-size: inherit !important;" +
                    "            font-family: inherit !important;" +
                    "            font-weight: inherit !important;" +
                    "            line-height: inherit !important;" +
                    "        }" +
                    "        @media screen and (max-width: 480px) {" +
                    "            .mobile-hide {" +
                    "                display: none !important;" +
                    "            }" +
                    "            .mobile-center {" +
                    "                text-align: center !important;" +
                    "            }" +
                    "        }" +
                    '        div[style*="margin: 16px 0;"] {' +
                    "            margin: 0 !important;" +
                    "        }" +
                    "    </style>" +
                    '<body style="margin: 0 !important; padding: 0 !important; background-color: #eeeeee;" bgcolor="#eeeeee">' +
                    '    <div style="display: none; font-size: 1px; color: #fefefe; line-height: 1px; font-family: Open Sans, Helvetica, Arial, sans-serif; max-height: 0px; max-width: 0px; opacity: 0; overflow: hidden;">' +
                    "        For what reason would it be advisable for me to think about business content? That might be little bit risky to have crew member like them." +
                    "    </div>" +
                    '    <table border="0" cellpadding="0" cellspacing="0" width="100%">' +
                    "        <tr>" +
                    '            <td align="center" style="background-color: #eeeeee;" bgcolor="#eeeeee">' +
                    '                <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width:600px;">' +
                    "                     " +
                    "                    <tr>" +
                    '                        <td align="center" style="padding: 35px 35px 20px 35px; background-color: #ffffff;" bgcolor="#ffffff">' +
                    '                            <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width:600px;">' +
                    "                                <tr>" +
                    '                                    <td align="center" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 400; line-height: 24px; padding-top: 25px;"> <img src="https://tastes2plate.com/img/site-logo.png" width="125" height="120" style="display: block; border: 0px;" alt="tastes2plate" /><br>' +
                    '                                        <h2 style="font-size: 30px; font-weight: 800; line-height: 36px; color: #333333; margin: 0;"> Thank You For Your Order! </h2>' +
                    "                                    </td>" +
                    "                                </tr>" +
                    "                                <tr>" +
                    '                                    <td align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 400; line-height: 24px; padding-top: 10px;">' +
                    '                                        <p style="font-size: 16px; font-weight: 400; line-height: 24px; color: #777777;"> Hi ' +
                    response.user.full_name +
                    ", <br/><br/> Just to let you know Ã¢â‚¬â€ we have received your <br/> order #" +
                    response.orderid +
                    ", and it is now being processed: <br/> </p>" +
                    "                                    </td>" +
                    "                                </tr>" +
                    "" +
                    "                                <tr>" +
                    '                                    <td align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 400; line-height: 24px; padding-top: 10px;">' +
                    '                                        <p style="font-size: 16px; font-weight: 400; line-height: 24px; color: #777777;"> ORDER#' +
                    response.orderid +
                    " </p>" +
                    "                                    </td>" +
                    "                                </tr>" +
                    "" +
                    "                                <tr>" +
                    '                                    <td align="left" style="padding-top: 20px;">' +
                    '                                        <table cellspacing="0" cellpadding="0" border="0" width="100%">' +
                    "                                            <tr>" +
                    '                                                <td width="75%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px;"> Items </td>' +
                    '                                                <td width="75%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px;"> Price </td>' +
                    '                                                <td width="75%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px;"> QTY </td>' +
                    '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px;"> Price </td>' +
                    "                                            </tr>";

                var i;
                for (i = 0; i < response.products.length; i++) {
                    html_template = html_template + "                         <tr>" + '                                                <td width="75%" align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 400; line-height: 24px; padding: 15px 10px 5px 10px;"> ' + response.products[i].productname + " </td>" + '                                                <td width="25%" align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 400; line-height: 24px; padding: 15px 10px 5px 10px;"> ' + (response.products[i].price / +response.products[i].quantity).toFixed(2) + " </td>" + '                                                <td width="25%" align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 400; line-height: 24px; padding: 15px 10px 5px 10px;"> ' + response.products[i].quantity + " </td>" + '                                                <td width="25%" align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 400; line-height: 24px; padding: 15px 10px 5px 10px;"> ' + response.products[i].price + " </td>" + "                                           </tr>";
                }

                html_template =
                    html_template +
                    " <tr>" +
                    '                                                <td colspan="3"width="75%" align="right" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px;"> Total </td>' +
                    '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px;">₹' +
                    response.price +
                    " </td>" +
                    "                                            	</tr>" +
                    "												<tr>" +
                    '                                                <td colspan="3"width="75%" align="right" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px;"> Shipping Price </td>' +
                    '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px;">₹' +
                    response.totalShippingPrice +
                    " </td>" +
                    "                                            	</tr>" +
                    "												<tr>" +
                    '                                                <td colspan="3"width="75%" align="right" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px;"> Packaging Price </td>' +
                    '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px;">₹' +
                    response.totalPackingPrice +
                    " </td>" +
                    "                                            	</tr>" +
                    "												<tr>" +
                    '                                                <td colspan="3"width="75%" align="right" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px;"> Total CGST </td>' +
                    '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px;">₹' +
                    response.totalCGST +
                    " </td>" +
                    "                                            	</tr>" +
                    "												<tr>" +
                    '                                                <td colspan="3"width="75%" align="right" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px;"> Total SGST </td>' +
                    '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px;">₹' +
                    response.totalSGST +
                    " </td>" +
                    "                                            	</tr>" +
                    "												<tr>" +
                    '                                                <td colspan="3"width="75%" align="right" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px;"> Total IGST </td>' +
                    '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px;">₹' +
                    response.totalIGST +
                    " </td>" +
                    "                                            	</tr>" +
                    "												<tr>" +
                    '                                                <td colspan="3"width="75%" align="right" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px;"> Discount </td>' +
                    '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px;">₹' +
                    response.couponamount +
                    " </td>" +
                    "                                            	</tr>" +
                    "										</table>" +
                    "                                    </td>" +
                    "                                </tr>" +
                    "                                <tr>" +
                    '                                    <td align="left" style="padding-top: 20px;">' +
                    '                                        <table cellspacing="0" cellpadding="0" border="0" width="100%">' +
                    "                                            <tr>" +
                    '                                                <td width="75%" align="right" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px; border-top: 3px solid #eeeeee; border-bottom: 3px solid #eeeeee;"> SUB TOTAL </td>' +
                    '                                                <td width="25%" align="right" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px; border-top: 3px solid #eeeeee; border-bottom: 3px solid #eeeeee;">₹' +
                    response.finalprice +
                    " </td>" +
                    "                                            </tr>" +
                    "                                        </table>" +
                    "                                    </td>" +
                    "                                </tr>" +
                    "                            </table>" +
                    "                        </td>" +
                    "                    </tr>" +
                    "                    <tr>" +
                    '                        <td align="center" height="100%" valign="top" width="100%" style="padding: 0 35px 0px 35px; background-color: #ffffff;" bgcolor="#ffffff">' +
                    '                            <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width:660px;">' +
                    "                                <tr>" +
                    '                                    <td align="center" valign="top" style="font-size:0;">' +
                    '                                        <div style="display:inline-block; max-width:50%; min-width:240px; vertical-align:top; width:100%;">' +
                    '                                            <table align="left" border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width:300px;">' +
                    "                                                <tr>" +
                    '                                                    <td align="left" valign="top" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 400; line-height: 24px;">' +
                    '                                                        <p style="font-weight: 800;">Delivery Address</p>' +
                    "                                                        <p> <strong>" +
                    response.address.title +
                    "</strong> <br/> " +
                    response.address.address +
                    " <br> " +
                    response.address.address2 +
                    "<br/>" +
                    response.address.city.name +
                    ", " +
                    response.address.pincode +
                    " <br/> Contact name: " +
                    response.address.contact_name +
                    " <br/>  Contact number: " +
                    response.address.contact_mobile +
                    " </p>" +
                    "                                                    </td>" +
                    "                                                </tr>" +
                    "                                            </table>" +
                    "                                        </div>" +
                    '                                        <div style="display:inline-block; max-width:50%; min-width:240px; vertical-align:top; width:100%;">' +
                    '                                            <table align="left" border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width:300px;">' +
                    "                                                <tr>" +
                    '                                                    <td align="left" valign="top" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 400; line-height: 24px;">' +
                    '                                                        <p style="font-weight: 800;">Estimated Delivery Date</p>' +
                    "                                                        <p>" +
                    moment(moment(response.delivery_date, "YYYY-MM-DD")).format("YYYY-MM-DD") +
                    " - " +
                    response.timeslot +
                    " </p>" +
                    "                                                    </td>" +
                    "                                                </tr>" +
                    "                                            </table>" +
                    "                                        </div>" +
                    "                                    </td>" +
                    "                                </tr>" +
                    "                            </table>" +
                    "                        </td>" +
                    "                    </tr>" +
                    '                   <tr><td style="padding: 35px; background-color: #ffffff; font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 14px;" bgcolor="#ffffff;">Thanks for using tastes2plate.com! <br/><br/> Please Pay digitally for all COD Orders and ask for QR code to make payment online from delivery man.  </td></tr>  ' +
                    "                    <tr>" +
                    '                        <td align="center" style="padding: 35px; background-color: #ffffff;" bgcolor="#ffffff">' +
                    '                            <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width:600px;">' +
                    "                                 " +
                    "                                <tr>" +
                    '                                    <td align="center" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 14px; font-weight: 400; line-height: 24px; padding: 5px 0 10px 0;">' +
                    '                                        <img src="https://tastes2plate.com/img/phone_pay.png" style="border:none;display:inline-block;font-size:14px;font-weight:bold;outline:none;text-decoration:none;text-transform:capitalize;vertical-align:middle;margin-right:10px;width:200px;"> <br/> <p style="font-size: 14px; font-weight: 800; line-height: 18px; color: #333333;"> ' +
                    "                                        tastes2plate.com <br/>" +
                    "                                        Charabuni Services Pvt Ltd, 811 QUBE <br/>" +
                    "                                        Near City Center II New Town <br/>Kolkata 700156" +
                    "                                        </p>" +
                    "                                    </td>" +
                    "                                </tr>" +
                    "                                " +
                    "                            </table>" +
                    "                        </td>" +
                    "                    </tr>" +
                    "                </table>" +
                    "            </td>" +
                    "        </tr>" +
                    "    </table>" +
                    "</body>" +
                    "</html>";

                var to = response.user.email;
                var subject = "Order invoice";
                send_email(to, subject, html_template);

                res.status(200).send({
                    status: "success",
                });
            });
    },

    get_order_invoice: function (req, res) {
        var where = {};
        where["_id"] = req.query.id;
        Checkout.findOne(where)
            .populate("user")
            .populate("products.product")
            .populate("vendor")
            .populate("cargo_partner")
            .populate("delivery_partner")
            .populate("pickup_partner")
            .populate({
                path: "address",
                populate: [
                    {
                        path: "city",
                        model: "cities",
                        select: "name",
                    },
                ],
            })
            .then((response) => {
                var html_template =
                    "<!DOCTYPE html>" +
                    "<html>" +
                    "<head>" +
                    "    <title></title>" +
                    '    <meta httpEquiv="Content-Type" content="text/html; charset=utf-8" />' +
                    '    <meta name="viewport" content="width=device-width, initial-scale=1">' +
                    '    <meta httpEquiv="X-UA-Compatible" content="IE=edge" />' +
                    '    <style type="text/css">' +
                    "        body," +
                    "        table," +
                    "        td," +
                    "        a {" +
                    "            -webkit-text-size-adjust: 100%;" +
                    "            -ms-text-size-adjust: 100%;" +
                    "        }" +
                    "        table," +
                    "        td {" +
                    "            mso-table-lspace: 0pt;" +
                    "            mso-table-rspace: 0pt;" +
                    "        }" +
                    "        img {" +
                    "            -ms-interpolation-mode: bicubic;" +
                    "        }" +
                    "        img {" +
                    "            border: 0;" +
                    "            height: auto;" +
                    "            line-height: 100%;" +
                    "            outline: none;" +
                    "            text-decoration: none;" +
                    "        }" +
                    "        table {" +
                    "            border-collapse: collapse !important;" +
                    "        }" +
                    "        body {" +
                    "            height: 100% !important;" +
                    "            margin: 0 !important;" +
                    "            padding: 0 !important;" +
                    "            width: 100% !important;" +
                    "        }" +
                    "        a[x-apple-data-detectors] {" +
                    "            color: inherit !important;" +
                    "            text-decoration: none !important;" +
                    "            font-size: inherit !important;" +
                    "            font-family: inherit !important;" +
                    "            font-weight: inherit !important;" +
                    "            line-height: inherit !important;" +
                    "        }" +
                    "        @media screen and (max-width: 480px) {" +
                    "            .mobile-hide {" +
                    "                display: none !important;" +
                    "            }" +
                    "            .mobile-center {" +
                    "                text-align: center !important;" +
                    "            }" +
                    "        }" +
                    '        div[style*="margin: 16px 0;"] {' +
                    "            margin: 0 !important;" +
                    "        }" +
                    "    </style>" +
                    '<body style="margin: 0 !important; padding: 0 !important; background-color: #eeeeee;" bgcolor="#eeeeee">' +
                    '    <div style="display: none; font-size: 1px; color: #fefefe; line-height: 1px; font-family: Open Sans, Helvetica, Arial, sans-serif; max-height: 0px; max-width: 0px; opacity: 0; overflow: hidden;">' +
                    "        For what reason would it be advisable for me to think about business content? That might be little bit risky to have crew member like them." +
                    "    </div>" +
                    '    <table border="0" cellpadding="0" cellspacing="0" width="100%">' +
                    "        <tr>" +
                    '            <td align="center" style="background-color: #eeeeee;" bgcolor="#eeeeee">' +
                    '                <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width:600px;">' +
                    "                     " +
                    "                    <tr>" +
                    '                        <td align="center" style="padding: 35px 35px 20px 35px; background-color: #ffffff;" bgcolor="#ffffff">' +
                    '                            <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width:600px;">' +
                    "                                <tr>" +
                    '                                    <td align="center" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 400; line-height: 24px; padding-top: 25px;"> <img src="https://tastes2plate.com/img/site-logo.png" width="125" height="120" style="display: block; border: 0px;" alt="tastes2plate" /><br>' +
                    '                                        <h2 style="font-size: 30px; font-weight: 800; line-height: 36px; color: #333333; margin: 0;"> Thank You For Your Order! </h2>' +
                    "                                    </td>" +
                    "                                </tr>" +
                    "                                <tr>" +
                    '                                    <td align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 400; line-height: 24px; padding-top: 10px;">' +
                    '                                        <p style="font-size: 16px; font-weight: 400; line-height: 24px; color: #777777;"> Hi ' +
                    response.user.full_name +
                    ", <br/><br/> Just to let you know Ã¢â‚¬â€ we have received your <br/> order #" +
                    response.orderid +
                    ", and it is now being processed: <br/> </p>" +
                    "                                    </td>" +
                    "                                </tr>" +
                    "" +
                    "                                <tr>" +
                    '                                    <td align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 400; line-height: 24px; padding-top: 10px;">' +
                    '                                        <p style="font-size: 16px; font-weight: 400; line-height: 24px; color: #777777;"> ORDER#' +
                    response.orderid +
                    " </p>" +
                    "                                    </td>" +
                    "                                </tr>" +
                    "" +
                    "                                <tr>" +
                    '                                    <td align="left" style="padding-top: 20px;">' +
                    '                                        <table cellspacing="0" cellpadding="0" border="0" width="100%">' +
                    "                                            <tr>" +
                    '                                                <td width="75%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px;"> Items </td>' +
                    '                                                <td width="75%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px;"> Price </td>' +
                    '                                                <td width="75%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px;"> QTY </td>' +
                    '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px;"> Price </td>' +
                    "                                            </tr>";

                var i;
                for (i = 0; i < response.products.length; i++) {
                    html_template = html_template + "                         <tr>" + '                                                <td width="75%" align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 400; line-height: 24px; padding: 15px 10px 5px 10px;"> ' + response.products[i].productname + " </td>" + '                                                <td width="25%" align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 400; line-height: 24px; padding: 15px 10px 5px 10px;"> ' + (response.products[i].price / +response.products[i].quantity).toFixed(2) + " </td>" + '                                                <td width="25%" align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 400; line-height: 24px; padding: 15px 10px 5px 10px;"> ' + response.products[i].quantity + " </td>" + '                                                <td width="25%" align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 400; line-height: 24px; padding: 15px 10px 5px 10px;"> ' + response.products[i].price.toFixed(2) + " </td>" + "                                           </tr>";
                }

                html_template =
                    html_template +
                    " <tr>" +
                    '                                                <td colspan="3"width="75%" align="right" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px;"> Total </td>' +
                    '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px;">₹' +
                    response.price.toFixed(2) +
                    " </td>" +
                    "                                            	</tr>" +
                    "												<tr>" +
                    '                                                <td colspan="3"width="75%" align="right" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px;"> Shipping Price </td>' +
                    '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px;">₹' +
                    response.totalShippingPrice.toFixed(2) +
                    " </td>" +
                    "                                            	</tr>" +
                    "												<tr>" +
                    '                                                <td colspan="3"width="75%" align="right" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px;"> Packaging Price </td>' +
                    '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px;">₹' +
                    response.totalPackingPrice.toFixed(2) +
                    " </td>" +
                    "                                            	</tr>" +
                    "												<tr>" +
                    '                                                <td colspan="3"width="75%" align="right" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px;"> Total CGST </td>' +
                    '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px;">₹' +
                    response.totalCGST.toFixed(2) +
                    " </td>" +
                    "                                            	</tr>" +
                    "												<tr>" +
                    '                                                <td colspan="3"width="75%" align="right" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px;"> Total SGST </td>' +
                    '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px;">₹' +
                    response.totalSGST.toFixed(2) +
                    " </td>" +
                    "                                            	</tr>" +
                    "												<tr>" +
                    '                                                <td colspan="3"width="75%" align="right" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px;"> Total IGST </td>' +
                    '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px;">₹' +
                    response.totalIGST.toFixed(2) +
                    " </td>" +
                    "                                            	</tr>" +
                    "												<tr>" +
                    '                                                <td colspan="3"width="75%" align="right" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px;"> Discount </td>' +
                    '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px;">₹' +
                    response.couponamount.toFixed(2) +
                    " </td>" +
                    "                                            	</tr>" +
                    "										</table>" +
                    "                                    </td>" +
                    "                                </tr>" +
                    "                                <tr>" +
                    '                                    <td align="left" style="padding-top: 20px;">' +
                    '                                        <table cellspacing="0" cellpadding="0" border="0" width="100%">' +
                    "                                            <tr>" +
                    '                                                <td width="75%" align="right" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px; border-top: 3px solid #eeeeee; border-bottom: 3px solid #eeeeee;"> SUB TOTAL </td>' +
                    '                                                <td width="25%" align="right" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 800; line-height: 24px; padding: 10px; border-top: 3px solid #eeeeee; border-bottom: 3px solid #eeeeee;">₹' +
                    response.finalprice.toFixed(2) +
                    " </td>" +
                    "                                            </tr>" +
                    "                                        </table>" +
                    "                                    </td>" +
                    "                                </tr>" +
                    "                            </table>" +
                    "                        </td>" +
                    "                    </tr>" +
                    "                    <tr>" +
                    '                        <td align="center" height="100%" valign="top" width="100%" style="padding: 0 35px 0px 35px; background-color: #ffffff;" bgcolor="#ffffff">' +
                    '                            <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width:660px;">' +
                    "                                <tr>" +
                    '                                    <td align="center" valign="top" style="font-size:0;">' +
                    '                                        <div style="display:inline-block; max-width:50%; min-width:240px; vertical-align:top; width:100%;">' +
                    '                                            <table align="left" border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width:300px;">' +
                    "                                                <tr>" +
                    '                                                    <td align="left" valign="top" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 400; line-height: 24px;">' +
                    '                                                        <p style="font-weight: 800;">Delivery Address</p>' +
                    "                                                        <p> <strong>" +
                    response.address.title +
                    "</strong> <br/> " +
                    response.address.address +
                    " <br> " +
                    response.address.address2 +
                    "<br/>" +
                    response.address.city.name +
                    ", " +
                    response.address.pincode +
                    " <br/> Contact name: " +
                    response.address.contact_name +
                    " <br/>  Contact number: " +
                    response.address.contact_mobile +
                    " </p>" +
                    "                                                    </td>" +
                    "                                                </tr>" +
                    "                                            </table>" +
                    "                                        </div>" +
                    '                                        <div style="display:inline-block; max-width:50%; min-width:240px; vertical-align:top; width:100%;">' +
                    '                                            <table align="left" border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width:300px;">' +
                    "                                                <tr>" +
                    '                                                    <td align="left" valign="top" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 400; line-height: 24px;">' +
                    '                                                        <p style="font-weight: 800;">Estimated Delivery Date</p>' +
                    "                                                        <p>" +
                    moment(moment(response.delivery_date, "YYYY-MM-DD")).format("YYYY-MM-DD") +
                    " - " +
                    response.timeslot +
                    " </p>" +
                    "                                                    </td>" +
                    "                                                </tr>" +
                    "                                            </table>" +
                    "                                        </div>" +
                    "                                    </td>" +
                    "                                </tr>" +
                    "                            </table>" +
                    "                        </td>" +
                    "                    </tr>" +
                    '                   <tr><td style="padding: 35px; background-color: #ffffff; font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 14px;" bgcolor="#ffffff;">Thanks for using tastes2plate.com! <br/><br/> Please Pay digitally for all COD Orders and ask for QR code to make payment online from delivery man.  </td></tr>  ' +
                    "                    <tr>" +
                    '                        <td align="center" style="padding: 35px; background-color: #ffffff;" bgcolor="#ffffff">' +
                    '                            <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width:600px;">' +
                    "                                 " +
                    "                                <tr>" +
                    '                                    <td align="center" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 14px; font-weight: 400; line-height: 24px; padding: 5px 0 10px 0;">' +
                    '                                        <img src="https://tastes2plate.com/img/phone_pay.png" style="border:none;display:inline-block;font-size:14px;font-weight:bold;outline:none;text-decoration:none;text-transform:capitalize;vertical-align:middle;margin-right:10px;width:200px;"> <br/> <p style="font-size: 14px; font-weight: 800; line-height: 18px; color: #333333;"> ' +
                    "                                        tastes2plate.com <br/>" +
                    "                                        Charabuni Services Pvt Ltd, 811 QUBE <br/>" +
                    "                                        Near City Center II New Town <br/>Kolkata 700156" +
                    "                                        </p>" +
                    "                                    </td>" +
                    "                                </tr>" +
                    "                                " +
                    "                            </table>" +
                    "                        </td>" +
                    "                    </tr>" +
                    "                </table>" +
                    "            </td>" +
                    "        </tr>" +
                    "    </table>" +
                    "</body>" +
                    "</html>";

                res.status(200).send({
                    result: html_template,
                });
            });
    },

    bulk_order_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.user && req.query.user != "") {
                where["name"] = {
                    $regex: ".*" + req.query.user,
                    $options: "i",
                };
            }

            if (req.query.email && req.query.email != "") {
                where["email"] = {
                    $regex: ".*" + req.query.email,
                    $options: "i",
                };
            }

            if (req.query.mobile && req.query.mobile != "") {
                where["mobile"] = {
                    $regex: ".*" + req.query.mobile,
                    $options: "i",
                };
            }

            if (req.query.active && req.query.active != "") {
                where["active"] = req.query.active;
            }

            BulkOrderModel.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    BulkOrderModel.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_bulk_order_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            BulkOrderModel.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "data not found",
                            token: req.token,
                        });
                    } else {
                        if (response.active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        BulkOrderModel.findOneAndUpdate(
                            where,
                            {
                                active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                                return;
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                                return;
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    send_otp: function (req, res) {
        var where = {};
        where["mobile"] = req.body.mobile;
        where["deleted"] = 0;
        Users.findOne(where)
            .then((response) => {
                if (response != null) {
                    if (response.user_type == "customer") {
                        res.status(200).send({
                            status: "error",
                            message: "Access denied",
                        });
                        return;
                    } else {
                        gen_otp(
                            req.body.mobile,
                            res,
                            (successResponse, errorResponse) => {
                                res.status(200).send({
                                    status: "success",
                                    OTP: successResponse,
                                    message: "OTP has been sent.",
                                });
                            },
                            (errorResponse) => {
                                res.status(200).send({
                                    status: "error",
                                    message: errorResponse,
                                    OTP: "",
                                });
                            }
                        );
                    }
                } else {
                    res.status(200).send({
                        status: "error",
                        message: "mobile number not registered",
                        OTP: "",
                    });
                }
            })
            .catch((error) => {
                res.status(200).send({
                    status: "error",
                    message: "Invalid mobile",
                    OTP: "",
                });
            });
    },

    send_email_template: function (req, res) {
        var html_template =
            "<!DOCTYPE html>" +
            "<html>" +
            "<head>" +
            "    <title></title>" +
            '    <meta httpEquiv="Content-Type" content="text/html; charset=utf-8" />' +
            '    <meta name="viewport" content="width=device-width, initial-scale=1">' +
            '    <meta httpEquiv="X-UA-Compatible" content="IE=edge" />' +
            '    <style type="text/css">' +
            "        body," +
            "        table," +
            "        td," +
            "        a {" +
            "            -webkit-text-size-adjust: 100%;" +
            "            -ms-text-size-adjust: 100%;" +
            "        }" +
            "        table," +
            "        td {" +
            "            mso-table-lspace: 0pt;" +
            "            mso-table-rspace: 0pt;" +
            "        }" +
            "        img {" +
            "            -ms-interpolation-mode: bicubic;" +
            "        }" +
            "        img {" +
            "            border: 0;" +
            "            height: auto;" +
            "            line-height: 100%;" +
            "            outline: none;" +
            "            text-decoration: none;" +
            "        }" +
            "        table {" +
            "            border-collapse: collapse !important;" +
            "        }" +
            "        body {" +
            "            height: 100% !important;" +
            "            margin: 0 !important;" +
            "            padding: 0 !important;" +
            "            width: 100% !important;" +
            "        }" +
            "        a[x-apple-data-detectors] {" +
            "            color: inherit !important;" +
            "            text-decoration: none !important;" +
            "            font-size: inherit !important;" +
            "            font-family: inherit !important;" +
            "            font-weight: inherit !important;" +
            "            line-height: inherit !important;" +
            "        }" +
            "        @media screen and (max-width: 480px) {" +
            "            .mobile-hide {" +
            "                display: none !important;" +
            "            }" +
            "            .mobile-center {" +
            "                text-align: center !important;" +
            "            }" +
            "        }" +
            '        div[style*="margin: 16px 0;"] {' +
            "            margin: 0 !important;" +
            "        }" +
            "    </style>" +
            '<body style="margin: 0 !important; padding: 0 !important; background-color: #eeeeee;" bgcolor="#eeeeee">' +
            '    <div style="display: none; font-size: 1px; color: #fefefe; line-height: 1px; font-family: Open Sans, Helvetica, Arial, sans-serif; max-height: 0px; max-width: 0px; opacity: 0; overflow: hidden;">' +
            "        For what reason would it be advisable for me to think about business content? That might be little bit risky to have crew member like them." +
            "    </div>" +
            '    <table border="0" cellpadding="0" cellspacing="0" width="100%">' +
            "        <tr>" +
            '            <td align="center" style="background-color: #eeeeee;" bgcolor="#eeeeee">' +
            '                <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width:600px;">' +
            "                     " +
            "                    <tr>" +
            '                        <td align="center" style="padding: 35px 35px 20px 35px; background-color: #ffffff;" bgcolor="#ffffff">' +
            '                            <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width:600px;">' +
            "                                <tr>" +
            '                                    <td align="center" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 400; line-height: 24px; padding-top: 25px;"> <img src="https://tastes2plate.com/img/site-logo.png" width="125" height="120" style="display: block; border: 0px;" alt="tastes2plate" /><br>' +
            '                                        <h2 style="font-size: 30px; font-weight: 800; line-height: 36px; color: #333333; margin: 0;"> Thank You For Your Order! </h2>' +
            "                                    </td>" +
            "                                </tr>" +
            "                                <tr>" +
            '                                    <td align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 400; line-height: 24px; padding-top: 10px;">' +
            '                                        <p style="font-size: 16px; font-weight: 400; line-height: 24px; color: #777777;">' +
            req.query.msg +
            "</p>" +
            "                                    </td>" +
            "                                </tr>" +
            "                            </table>" +
            "                        </td>" +
            "                    </tr>" +
            '                   <tr><td style="padding: 35px; background-color: #ffffff; font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 14px;" bgcolor="#ffffff;"><br/><br/><br/>Thanks for using tastes2plate.com! <br/><br/> Please Pay digitally for all COD Orders and ask for QR code to make payment online from delivery man.  </td></tr>  ' +
            "                    <tr>" +
            '                        <td align="center" style="padding: 35px; background-color: #ffffff;" bgcolor="#ffffff">' +
            '                            <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width:600px;">' +
            "                                 " +
            "                                <tr>" +
            '                                    <td align="center" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 14px; font-weight: 400; line-height: 24px; padding: 5px 0 10px 0;">' +
            '                                        <img src="https://tastes2plate.com/img/phone_pay.png" style="border:none;display:inline-block;font-size:14px;font-weight:bold;outline:none;text-decoration:none;text-transform:capitalize;vertical-align:middle;margin-right:10px;width:200px;"> <br/> <p style="font-size: 14px; font-weight: 800; line-height: 18px; color: #333333;"> ' +
            "                                        tastes2plate.com <br/>" +
            "                                        Charabuni Services Pvt Ltd, 811 QUBE <br/>" +
            "                                        Near City Center II New Town <br/>Kolkata 700156" +
            "                                        </p>" +
            "                                    </td>" +
            "                                </tr>" +
            "                                " +
            "                            </table>" +
            "                        </td>" +
            "                    </tr>" +
            "                </table>" +
            "            </td>" +
            "        </tr>" +
            "    </table>" +
            "</body>" +
            "</html>";

        var to = req.query.email;
        var subject = "Status update";
        send_email(to, subject, html_template);
        res.status(200).send({
            status: "success",
        });
    },

    get_map_data: function (req, res) {
        if (req.query.order_id && req.query.order_id != "") {
            var where = {};
            where["orderid"] = {
                $regex: ".*" + req.query.order_id,
                $options: "i",
            };
            Checkout.findOne(where)
                .populate({
                    path: "address",
                    populate: [
                        {
                            path: "city",
                            model: "cities",
                            select: "name",
                        },
                    ],
                })
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        position: {
                            latitude: response.address.position.coordinates[0],
                            longitude: response.address.position.coordinates[1],
                        },
                        address: response.address,
                        name: "",
                        delivery_boy: "",
                    });
                    return;
                });
        } else {
            var where = {};
            where["mobile"] = {
                $regex: ".*" + req.query.delivery_boy,
                $options: "i",
            };
            Users.findOne(where).then((delivery_response) => {
                var where = {};
                if (delivery_response != null && req.query.delivery_boy && req.query.delivery_boy != "") {
                    where["delivery_boy"] = delivery_response._id;
                }

                //console.log(where);
                Checkout.findOne(where)
                    .sort({
                        created_date: -1,
                    })
                    .then((response) => {
                        // Set the configuration for your app
                        // TODO: Replace with your project's config object
                        var config = {
                            apiKey: "AIzaSyAb0GFBI8anhuIiG1za7HMO4IlTf3CV39k",
                            authDomain: "taste2plate-1be43.firebaseapp.com",
                            databaseURL: "https://taste2plate-1be43-default-rtdb.firebaseio.com",
                            projectId: "taste2plate-1be43",
                            storageBucket: "taste2plate-1be43.appspot.com",
                            messagingSenderId: "569149647523",
                            appId: "1:569149647523:web:d45b4e84541e550344ed16",
                            measurementId: "G-JXJ8SYTZ2W",
                        };
                        //firebase.initializeApp(config);
                        if (!firebase.apps.length) {
                            firebase.initializeApp(config);
                        }

                        // Get a reference to the database service
                        var database = firebase.database();

                        database
                            .ref("/")
                            .once("value")
                            .then(function (snapshot) {
                                var result = snapshot.val();

                                if (!response) {
                                    res.status(200).send({
                                        status: "error",
                                        position: {},
                                        name: "",
                                        delivery_boy: "",
                                    });
                                    return;
                                } else {
                                    var order_id = response._id;
                                }
                                if (result["userlocation" + order_id]) {
                                    res.status(200).send({
                                        status: "success",
                                        position: result["userlocation" + order_id] ? result["userlocation" + order_id] : {},
                                        name: "",
                                        delivery_boy: "Name: " + delivery_response.full_name + " Mobile: " + delivery_response.mobile,
                                    });
                                } else {
                                    res.status(200).send({
                                        status: "error",
                                        position: {},
                                        name: "",
                                        delivery_boy: "",
                                    });
                                }
                            });
                    })
                    .catch((error) => {
                        res.status(200).send({
                            status: "error",
                            message: error,
                            token: req.token,
                        });
                    });
            });
        }
    },

    update_pickup_boy_status_login: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Users.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Boy not found",
                            token: req.token,
                        });
                    } else {
                        if (response.login_active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        Users.findOneAndUpdate(
                            where,
                            {
                                login_active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    update_delivery_boy_status_login: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Users.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Boy not found",
                            token: req.token,
                        });
                    } else {
                        if (response.login_active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        Users.findOneAndUpdate(
                            where,
                            {
                                login_active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    get_order_invoice: function (req, res) {
        var where = {};
        var ids = [];
        var k;
        if (req.query.id.split(",").length > 0) {
            for (k = 0; k < req.query.id.split(",").length; k++) {
                ids.push(mongoose.Types.ObjectId(req.query.id.split(",")[k]));
            }
        }

        where["_id"] = { $in: ids };
        Checkout.find(where)
            .populate("user")
            .populate("products.product")
            .populate("vendor")
            .populate("cargo_partner")
            .populate("delivery_partner")
            .populate("pickup_partner")
            .populate({
                path: "address",
                populate: [
                    {
                        path: "city",
                        model: "cities",
                        select: "name",
                    },
                ],
            })
            .then((response) => {
                var html_template = "";
                var i;
                for (i = 0; i < response.length; i++) {
                    html_template =
                        html_template +
                        "<!DOCTYPE html>" +
                        "<html>" +
                        "<head>" +
                        '    <meta httpEquiv="Content-Type" content="text/html; charset=utf-8" />' +
                        '    <meta name="viewport" content="width=device-width, initial-scale=1">' +
                        '    <meta httpEquiv="X-UA-Compatible" content="IE=edge" />' +
                        '    <style type="text/css">' +
                        "        body," +
                        "        table," +
                        "        td," +
                        "        a {" +
                        "            -webkit-text-size-adjust: 100%;" +
                        "            -ms-text-size-adjust: 100%;" +
                        "        }" +
                        "        table," +
                        "        td {" +
                        "            mso-table-lspace: 0pt;" +
                        "            mso-table-rspace: 0pt;" +
                        "        }" +
                        "        img {" +
                        "            -ms-interpolation-mode: bicubic;" +
                        "        }" +
                        "        img {" +
                        "            border: 0;" +
                        "            height: auto;" +
                        "            line-height: 100%;" +
                        "            outline: none;" +
                        "            text-decoration: none;" +
                        "        }" +
                        "        table {" +
                        "            border-collapse: collapse !important;" +
                        "        }" +
                        "        body {" +
                        "            height: 100% !important;" +
                        "            margin: 0 !important;" +
                        "            padding: 0 !important;" +
                        "            width: 100% !important;" +
                        "        }" +
                        "        a[x-apple-data-detectors] {" +
                        "            color: inherit !important;" +
                        "            text-decoration: none !important;" +
                        "            font-size: inherit !important;" +
                        "            font-family: inherit !important;" +
                        "            font-weight: inherit !important;" +
                        "            line-height: inherit !important;" +
                        "        }" +
                        "        @media screen and (max-width: 480px) {" +
                        "            .mobile-hide {" +
                        "                display: none !important;" +
                        "            }" +
                        "            .mobile-center {" +
                        "                text-align: center !important;" +
                        "            }" +
                        "        }" +
                        '        div[style*="margin: 16px 0;"] {' +
                        "            margin: 0 !important;" +
                        "        }" +
                        "    </style>" +
                        '<body style="margin: 0 !important; padding: 0 !important; background-color: #eeeeee;" bgcolor="#eeeeee">' +
                        '    <div style="display: none; font-size: 1px; color: #fefefe; line-height: 1px; font-family: Open Sans, Helvetica, Arial, sans-serif; max-height: 0px; max-width: 0px; opacity: 0; overflow: hidden;">' +
                        "        For what reason would it be advisable for me to think about business content? That might be little bit risky to have crew member like them." +
                        "    </div>" +
                        '    <table border="0" cellpadding="0" cellspacing="0" width="100%">' +
                        "        <tr>" +
                        '            <td align="center" style="background-color: #eeeeee;" bgcolor="#eeeeee">' +
                        '                <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width:600px;">' +
                        "                     " +
                        "                    <tr>" +
                        '                        <td align="center" style="padding: 35px 35px 20px 35px; background-color: #ffffff;" bgcolor="#ffffff">' +
                        '                            <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width:600px;">' +
                        "                                <tr>" +
                        '                                    <td style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 400; line-height: 24px; padding-top: 25px;"> <img src="https://tastes2plate.com/img/site-logo.png" width="50" height="40" style="display: block; border: 0px;" alt="tastes2plate" /><br>' +
                        '                                        <div style="color: #333333; margin: 0;"> Charabuni Services Pvt Ltd, Kolkata <br/> GST - 19AAICC0892M1Z4 <br/> <hr/> ORDER#' +
                        response[i].orderid +
                        " <br/> Order Date: " +
                        moment(moment(response[i].created_date, "YYYY-MM-DD")).format("YYYY-MM-DD") +
                        " <br/> Delivery Date " +
                        moment(moment(response[i].delivery_date, "YYYY-MM-DD")).format("YYYY-MM-DD") +
                        " - " +
                        response[i].timeslot +
                        " <br/> Payment Method: " +
                        response[i].gateway +
                        " </div>  <hr/>" +
                        "                                    </td>" +
                        "                                </tr>" +
                        "<tr><td>" +
                        '                          <table align="left" border="0" cellpadding="0" cellspacing="0" width="100%">' +
                        "                                                <tr>" +
                        '                                                    <td align="left" valign="top" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 400; line-height: 24px;">' +
                        '                                                        <p style="font-weight: 800;">Billing Address</p>' +
                        "                                                        <p> <strong>" +
                        response[i].address.title +
                        "</strong> <br/> " +
                        response[i].address.address +
                        " <br> " +
                        response[i].address.address2 +
                        "<br/>" +
                        response[i].address.city.name +
                        ", " +
                        response[i].address.pincode +
                        " <br/> Contact name: " +
                        response[i].address.contact_name +
                        " <br/>  Contact number: " +
                        response[i].address.contact_mobile +
                        " </p>" +
                        "                                                    </td>" +
                        '                                                    <td align="left" valign="top" style="margin-left: 30px; font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 400; line-height: 24px;">' +
                        '                                                        <p style="font-weight: 800;">Shipping Address</p>' +
                        "                                                        <p> <strong>" +
                        response[i].address.title +
                        "</strong> <br/> " +
                        response[i].address.address +
                        " <br> " +
                        response[i].address.address2 +
                        "<br/>" +
                        response[i].address.city.name +
                        ", " +
                        response[i].address.pincode +
                        " <br/> Contact name: " +
                        response[i].address.contact_name +
                        " <br/>  Contact number: " +
                        response[i].address.contact_mobile +
                        "  <br/>  Payment Method: " +
                        response[i].gateway +
                        " </p>" +
                        "                                                    </td>" +
                        "                                                </tr>" +
                        "                                            </table>" +
                        "</td></tr>" +
                        "                                <tr>" +
                        '                                    <td align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 400; line-height: 24px; padding-top: 10px;">' +
                        '                                        <p style="font-size: 12px; font-weight: 400; line-height: 24px; color: #777777;">  </p>' +
                        "                                    </td>" +
                        "                                </tr>" +
                        "" +
                        "                                <tr>" +
                        '                                    <td align="left" style="padding-top: 20px;">' +
                        '                                        <table cellspacing="0" cellpadding="0" border="0" width="100%">' +
                        "                                            <tr>" +
                        '                                                <td width="75%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 10px;"> Items </td>' +
                        '                                                <td width="75%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 10px;"> Price </td>' +
                        '                                                <td width="75%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 10px;"> QTY </td>' +
                        '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 10px;"> Price </td>' +
                        "                                            </tr>";

                    var j;
                    for (j = 0; j < response[i].products.length; j++) {
                        html_template = html_template + '                         <tr style=" border-bottom: 1px solid rgb(238, 238, 238);">' + '                                                <td width="75%" align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 400; line-height: 24px; padding: 3px;"> ' + response[i].products[j].productname + " </td>" + '                                                <td width="25%" align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 400; line-height: 24px; padding: 3px;">₹' + response[i].products[j].price / +response[i].products[j].quantity + " </td>" + '                                                <td width="25%" align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 400; line-height: 24px; padding: 3px;"> ' + response[i].products[j].quantity + " </td>" + '                                                <td width="25%" align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 400; line-height: 24px; padding: 3px;">₹' + response[i].products[j].price + " </td>" + "                                           </tr>";
                    }

                    html_template =
                        html_template +
                        " <tr>" +
                        '                                                <td colspan="3"width="75%" align="right" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;"> Total </td>' +
                        '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;">₹' +
                        response[i].price +
                        " </td>" +
                        "                                            	</tr>" +
                        "												<tr>" +
                        '                                                <td colspan="3"width="75%" align="right" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;"> Shipping Price </td>' +
                        '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;">₹' +
                        response[i].totalShippingPrice +
                        " </td>" +
                        "                                            	</tr>" +
                        "												<tr>" +
                        '                                                <td colspan="3"width="75%" align="right" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5x;"> Packaging Price </td>' +
                        '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;">₹' +
                        response[i].totalPackingPrice +
                        " </td>" +
                        "                                            	</tr>" +
                        "												<tr>" +
                        '                                                <td colspan="3"width="75%" align="right" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;"> Total CGST </td>' +
                        '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;">₹' +
                        response[i].totalCGST +
                        " </td>" +
                        "                                            	</tr>" +
                        "												<tr>" +
                        '                                                <td colspan="3"width="75%" align="right" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;"> Total SGST </td>' +
                        '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;">₹' +
                        response[i].totalSGST +
                        " </td>" +
                        "                                            	</tr>" +
                        "												<tr>" +
                        '                                                <td colspan="3"width="75%" align="right" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;"> Total IGST </td>' +
                        '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;">₹' +
                        response[i].totalIGST +
                        " </td>" +
                        "                                            	</tr>" +
                        "												<tr>" +
                        '                                                <td colspan="3"width="75%" align="right" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;"> Discount </td>' +
                        '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;">₹' +
                        response[i].couponamount +
                        " </td>" +
                        "                                            	</tr>" +
                        "										</table>" +
                        "                                    </td>" +
                        "                                </tr>" +
                        "                                <tr>" +
                        '                                    <td align="left" style="padding-top: 20px;">' +
                        '                                        <table cellspacing="0" cellpadding="0" border="0" width="100%">' +
                        "                                            <tr>" +
                        '                                                <td width="75%" align="right" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 10px; border-top: 3px solid #eeeeee; border-bottom: 3px solid #eeeeee;"> SUB TOTAL </td>' +
                        '                                                <td width="25%" align="right" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 10px; border-top: 3px solid #eeeeee; border-bottom: 3px solid #eeeeee;">₹' +
                        response[i].finalprice +
                        " </td>" +
                        "                                            </tr>" +
                        "                                        </table>" +
                        "                                    </td>" +
                        "                                </tr>" +
                        "                            </table>" +
                        "                        </td>" +
                        "                    </tr>" +
                        "                </table>" +
                        "            </td>" +
                        "        </tr>" +
                        "    </table>" +
                        "</body>" +
                        '</html> <div style = "display:block; clear:both; page-break-after:always;"></div>';
                }

                res.status(200).send({
                    result: html_template,
                });
            });
    },

    order_delete: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;

            Checkout.findOneAndUpdate(where, { deleted: 1 }, { new: true })
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Order has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });

            // Checkout.findOneAndRemove(where)
            // 	.exec()
            // 	.then((response) => {

            // 	});
        }
    },

    partner_today_order_invoice: function (req, res) {
        var where = {};
        var start = new Date();
        start.setHours(0, 0, 0, 0);

        var end = new Date();
        end.setHours(23, 59, 59, 999);

        if (req.query.city && req.query.city != "") {
            where["city"] = req.query.city;
        }

        if (req.query.vendor && req.query.vendor != "") {
            where["vendor"] = req.query.vendor;
        }

        if (req.query.pickup_partner && req.query.pickup_partner != "") {
            where["pickup_partner"] = req.query.pickup_partner;
        }

        if (req.query.cargo_partner && req.query.cargo_partner != "") {
            where["cargo_partner"] = req.query.cargo_partner;
        }

        if (req.query.delivery_partner && req.query.delivery_partner != "") {
            where["delivery_partner"] = req.query.delivery_partner;
        }

        where["delivery_date"] = { $gte: start, $lt: end };

        Checkout.find(where)
            .populate("user")
            .populate("products.product")
            .populate("vendor")
            .populate("cargo_partner")
            .populate("delivery_partner")
            .populate("pickup_partner")
            .populate({
                path: "address",
                populate: [
                    {
                        path: "city",
                        model: "cities",
                        select: "name",
                    },
                ],
            })
            .then((response) => {
                //console.log(response);
                if (response.length == 0) {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                    });
                    return;
                }
                var html_template = "";
                var i;
                for (i = 0; i < response.length; i++) {
                    console.log(response[i].orderid);
                    html_template =
                        html_template +
                        "<!DOCTYPE html>" +
                        "<html>" +
                        "<head>" +
                        '    <meta httpEquiv="Content-Type" content="text/html; charset=utf-8" />' +
                        '    <meta name="viewport" content="width=device-width, initial-scale=1">' +
                        '    <meta httpEquiv="X-UA-Compatible" content="IE=edge" />' +
                        '    <style type="text/css">' +
                        "        body," +
                        "        table," +
                        "        td," +
                        "        a {" +
                        "            -webkit-text-size-adjust: 100%;" +
                        "            -ms-text-size-adjust: 100%;" +
                        "        }" +
                        "        table," +
                        "        td {" +
                        "            mso-table-lspace: 0pt;" +
                        "            mso-table-rspace: 0pt;" +
                        "        }" +
                        "        img {" +
                        "            -ms-interpolation-mode: bicubic;" +
                        "        }" +
                        "        img {" +
                        "            border: 0;" +
                        "            height: auto;" +
                        "            line-height: 100%;" +
                        "            outline: none;" +
                        "            text-decoration: none;" +
                        "        }" +
                        "        table {" +
                        "            border-collapse: collapse !important;" +
                        "        }" +
                        "        body {" +
                        "            height: 100% !important;" +
                        "            margin: 0 !important;" +
                        "            padding: 0 !important;" +
                        "            width: 100% !important;" +
                        "        }" +
                        "        a[x-apple-data-detectors] {" +
                        "            color: inherit !important;" +
                        "            text-decoration: none !important;" +
                        "            font-size: inherit !important;" +
                        "            font-family: inherit !important;" +
                        "            font-weight: inherit !important;" +
                        "            line-height: inherit !important;" +
                        "        }" +
                        "        @media screen and (max-width: 480px) {" +
                        "            .mobile-hide {" +
                        "                display: none !important;" +
                        "            }" +
                        "            .mobile-center {" +
                        "                text-align: center !important;" +
                        "            }" +
                        "        }" +
                        '        div[style*="margin: 16px 0;"] {' +
                        "            margin: 0 !important;" +
                        "        }" +
                        "    </style>" +
                        '<body style="margin: 0 !important; padding: 0 !important; background-color: #eeeeee;" bgcolor="#eeeeee">' +
                        '    <div style="display: none; font-size: 1px; color: #fefefe; line-height: 1px; font-family: Open Sans, Helvetica, Arial, sans-serif; max-height: 0px; max-width: 0px; opacity: 0; overflow: hidden;">' +
                        "        For what reason would it be advisable for me to think about business content? That might be little bit risky to have crew member like them." +
                        "    </div>" +
                        '    <table border="0" cellpadding="0" cellspacing="0" width="100%">' +
                        "        <tr>" +
                        '            <td align="center" style="background-color: #eeeeee;" bgcolor="#eeeeee">' +
                        '                <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width:600px;">' +
                        "                     " +
                        "                    <tr>" +
                        '                        <td align="center" style="padding: 35px 35px 20px 35px; background-color: #ffffff;" bgcolor="#ffffff">' +
                        '                            <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width:600px;">' +
                        "                                <tr>" +
                        '                                    <td style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 400; line-height: 24px; padding-top: 25px;"> <img src="https://tastes2plate.com/img/site-logo.png" width="50" height="40" style="display: block; border: 0px;" alt="tastes2plate" /><br>' +
                        '                                        <div style="color: #333333; margin: 0;"> Charabuni Services Pvt Ltd, Kolkata <br/> GST - 19AAICC0892M1Z4 <br/> <hr/> ORDER#' +
                        response[i].orderid +
                        " <br/> Order Date: " +
                        moment(moment(response[i].created_date, "YYYY-MM-DD")).format("YYYY-MM-DD") +
                        " <br/> Delivery Date " +
                        moment(moment(response[i].delivery_date, "YYYY-MM-DD")).format("YYYY-MM-DD") +
                        " - " +
                        response[i].timeslot +
                        " <br/>  Payment Method: " +
                        response[i].gateway +
                        " </p> </div>  <hr/>" +
                        "                                    </td>" +
                        "                                </tr>" +
                        "<tr><td>" +
                        '                          <table align="left" border="0" cellpadding="0" cellspacing="0" width="100%">' +
                        "                                                <tr>" +
                        '                                                    <td align="left" valign="top" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 400; line-height: 24px;">' +
                        '                                                        <p style="font-weight: 800;">Billing Address</p>' +
                        "                                                        <p> <strong>" +
                        response[i].address.title +
                        "</strong> <br/> " +
                        response[i].address.address +
                        " <br> " +
                        response[i].address.address2 +
                        "<br/>" +
                        response[i].address.city.name +
                        ", " +
                        response[i].address.pincode +
                        " <br/> Contact name: " +
                        response[i].address.contact_name +
                        " <br/>  Contact number: " +
                        response[i].address.contact_mobile +
                        " </p>" +
                        "                                                    </td>" +
                        '                                                    <td align="left" valign="top" style="margin-left: 30px; font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 400; line-height: 24px;">' +
                        '                                                        <p style="font-weight: 800;">Shipping Address</p>' +
                        "                                                        <p> <strong>" +
                        response[i].address.title +
                        "</strong> <br/> " +
                        response[i].address.address +
                        " <br> " +
                        response[i].address.address2 +
                        "<br/>" +
                        response[i].address.city.name +
                        ", " +
                        response[i].address.pincode +
                        " <br/> Contact name: " +
                        response[i].address.contact_name +
                        " <br/>  Contact number: " +
                        response[i].address.contact_mobile +
                        " </p>" +
                        "                                                    </td>" +
                        "                                                </tr>" +
                        "                                            </table>" +
                        "</td></tr>" +
                        "                                <tr>" +
                        '                                    <td align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 400; line-height: 24px; padding-top: 10px;">' +
                        '                                        <p style="font-size: 12px; font-weight: 400; line-height: 24px; color: #777777;">  </p>' +
                        "                                    </td>" +
                        "                                </tr>" +
                        "" +
                        "                                <tr>" +
                        '                                    <td align="left" style="padding-top: 20px;">' +
                        '                                        <table cellspacing="0" cellpadding="0" border="0" width="100%">' +
                        "                                            <tr>" +
                        '                                                <td width="75%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 10px;"> Items </td>' +
                        '                                                <td width="75%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 10px;"> Price </td>' +
                        '                                                <td width="75%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 10px;"> QTY </td>' +
                        '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 10px;"> Price </td>' +
                        "                                            </tr>";

                    var j;
                    for (j = 0; j < response[i].products.length; j++) {
                        html_template = html_template + '                         <tr style=" border-bottom: 1px solid rgb(238, 238, 238);">' + '                                                <td width="75%" align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 400; line-height: 24px; padding: 3px;"> ' + response[i].products[j].productname + " </td>" + '                                                <td width="25%" align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 400; line-height: 24px; padding: 3px;">₹' + response[i].products[j].price / +response[i].products[j].quantity + " </td>" + '                                                <td width="25%" align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 400; line-height: 24px; padding: 3px;"> ' + response[i].products[j].quantity + " </td>" + '                                                <td width="25%" align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 400; line-height: 24px; padding: 3px;">₹' + response[i].products[j].price + " </td>" + "                                           </tr>";
                    }

                    html_template =
                        html_template +
                        " <tr>" +
                        '                                                <td colspan="3"width="75%" align="right" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;"> Total </td>' +
                        '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;">₹' +
                        response[i].price +
                        " </td>" +
                        "                                            	</tr>" +
                        "												<tr>" +
                        '                                                <td colspan="3"width="75%" align="right" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;"> Shipping Price </td>' +
                        '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;">₹' +
                        response[i].totalShippingPrice +
                        " </td>" +
                        "                                            	</tr>" +
                        "												<tr>" +
                        '                                                <td colspan="3"width="75%" align="right" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5x;"> Packaging Price </td>' +
                        '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;">₹' +
                        response[i].totalPackingPrice +
                        " </td>" +
                        "                                            	</tr>" +
                        "												<tr>" +
                        '                                                <td colspan="3"width="75%" align="right" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;"> Total CGST </td>' +
                        '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;">₹' +
                        response[i].totalCGST +
                        " </td>" +
                        "                                            	</tr>" +
                        "												<tr>" +
                        '                                                <td colspan="3"width="75%" align="right" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;"> Total SGST </td>' +
                        '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;">₹' +
                        response[i].totalSGST +
                        " </td>" +
                        "                                            	</tr>" +
                        "												<tr>" +
                        '                                                <td colspan="3"width="75%" align="right" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;"> Total IGST </td>' +
                        '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;">₹' +
                        response[i].totalIGST +
                        " </td>" +
                        "                                            	</tr>" +
                        "												<tr>" +
                        '                                                <td colspan="3"width="75%" align="right" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;"> Discount </td>' +
                        '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;">₹' +
                        response[i].couponamount +
                        " </td>" +
                        "                                            	</tr>" +
                        "										</table>" +
                        "                                    </td>" +
                        "                                </tr>" +
                        "                                <tr>" +
                        '                                    <td align="left" style="padding-top: 20px;">' +
                        '                                        <table cellspacing="0" cellpadding="0" border="0" width="100%">' +
                        "                                            <tr>" +
                        '                                                <td width="75%" align="right" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 10px; border-top: 3px solid #eeeeee; border-bottom: 3px solid #eeeeee;"> SUB TOTAL </td>' +
                        '                                                <td width="25%" align="right" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 10px; border-top: 3px solid #eeeeee; border-bottom: 3px solid #eeeeee;">₹' +
                        response[i].finalprice +
                        " </td>" +
                        "                                            </tr>" +
                        "                                        </table>" +
                        "                                    </td>" +
                        "                                </tr>" +
                        "                            </table>" +
                        "                        </td>" +
                        "                    </tr>" +
                        "                </table>" +
                        "            </td>" +
                        "        </tr>" +
                        "    </table>" +
                        "</body>" +
                        '</html> <div style = "display:block; clear:both; page-break-after:always;"></div>';
                }

                axios
                    .post("http://142.93.208.70:2001/app/gen_pdf", { html: "Hello" })
                    .then(function (response) {
                        // res.status(200).send({
                        // 	status: "error",
                        // 	message: "Something went wrong"
                        // });

                        var buffer = Buffer.from(response.data.buffer.data);
                        res.contentType("application/pdf");
                        res.send(buffer);
                    })
                    .catch(function (error) {
                        console.log(error);
                    });
            });
    },

    partner_tomorrow_order_invoice: function (req, res) {
        var where = {};
        var start = new Date();
        start.setDate(start.getDate() + 1);
        start.setHours(0, 0, 0, 0);

        var end = new Date();
        end.setDate(end.getDate() + 1);
        end.setHours(23, 59, 59, 999);

        if (req.query.city && req.query.city != "") {
            where["city"] = req.query.city;
        }

        if (req.query.vendor && req.query.vendor != "") {
            where["vendor"] = req.query.vendor;
        }

        if (req.query.pickup_partner && req.query.pickup_partner != "") {
            where["pickup_partner"] = req.query.pickup_partner;
        }

        if (req.query.cargo_partner && req.query.cargo_partner != "") {
            where["cargo_partner"] = req.query.cargo_partner;
        }

        if (req.query.delivery_partner && req.query.delivery_partner != "") {
            where["delivery_partner"] = req.query.delivery_partner;
        }

        where["delivery_date"] = { $gte: start, $lt: end };

        Checkout.find(where)
            .populate("user")
            .populate("products.product")
            .populate("vendor")
            .populate("cargo_partner")
            .populate("delivery_partner")
            .populate("pickup_partner")
            .populate({
                path: "address",
                populate: [
                    {
                        path: "city",
                        model: "cities",
                        select: "name",
                    },
                ],
            })
            .then((response) => {
                if (response.length == 0) {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                    });
                    return;
                }
                var html_template = "";
                var i;
                for (i = 0; i < response.length; i++) {
                    html_template =
                        html_template +
                        "<!DOCTYPE html>" +
                        "<html>" +
                        "<head>" +
                        '    <meta httpEquiv="Content-Type" content="text/html; charset=utf-8" />' +
                        '    <meta name="viewport" content="width=device-width, initial-scale=1">' +
                        '    <meta httpEquiv="X-UA-Compatible" content="IE=edge" />' +
                        '    <style type="text/css">' +
                        "        body," +
                        "        table," +
                        "        td," +
                        "        a {" +
                        "            -webkit-text-size-adjust: 100%;" +
                        "            -ms-text-size-adjust: 100%;" +
                        "        }" +
                        "        table," +
                        "        td {" +
                        "            mso-table-lspace: 0pt;" +
                        "            mso-table-rspace: 0pt;" +
                        "        }" +
                        "        img {" +
                        "            -ms-interpolation-mode: bicubic;" +
                        "        }" +
                        "        img {" +
                        "            border: 0;" +
                        "            height: auto;" +
                        "            line-height: 100%;" +
                        "            outline: none;" +
                        "            text-decoration: none;" +
                        "        }" +
                        "        table {" +
                        "            border-collapse: collapse !important;" +
                        "        }" +
                        "        body {" +
                        "            height: 100% !important;" +
                        "            margin: 0 !important;" +
                        "            padding: 0 !important;" +
                        "            width: 100% !important;" +
                        "        }" +
                        "        a[x-apple-data-detectors] {" +
                        "            color: inherit !important;" +
                        "            text-decoration: none !important;" +
                        "            font-size: inherit !important;" +
                        "            font-family: inherit !important;" +
                        "            font-weight: inherit !important;" +
                        "            line-height: inherit !important;" +
                        "        }" +
                        "        @media screen and (max-width: 480px) {" +
                        "            .mobile-hide {" +
                        "                display: none !important;" +
                        "            }" +
                        "            .mobile-center {" +
                        "                text-align: center !important;" +
                        "            }" +
                        "        }" +
                        '        div[style*="margin: 16px 0;"] {' +
                        "            margin: 0 !important;" +
                        "        }" +
                        "    </style>" +
                        '<body style="margin: 0 !important; padding: 0 !important; background-color: #eeeeee;" bgcolor="#eeeeee">' +
                        '    <div style="display: none; font-size: 1px; color: #fefefe; line-height: 1px; font-family: Open Sans, Helvetica, Arial, sans-serif; max-height: 0px; max-width: 0px; opacity: 0; overflow: hidden;">' +
                        "        For what reason would it be advisable for me to think about business content? That might be little bit risky to have crew member like them." +
                        "    </div>" +
                        '    <table border="0" cellpadding="0" cellspacing="0" width="100%">' +
                        "        <tr>" +
                        '            <td align="center" style="background-color: #eeeeee;" bgcolor="#eeeeee">' +
                        '                <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width:600px;">' +
                        "                     " +
                        "                    <tr>" +
                        '                        <td align="center" style="padding: 35px 35px 20px 35px; background-color: #ffffff;" bgcolor="#ffffff">' +
                        '                            <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width:600px;">' +
                        "                                <tr>" +
                        '                                    <td style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 400; line-height: 24px; padding-top: 25px;"> <img src="https://tastes2plate.com/img/site-logo.png" width="50" height="40" style="display: block; border: 0px;" alt="tastes2plate" /><br>' +
                        '                                        <div style="color: #333333; margin: 0;"> Charabuni Services Pvt Ltd, Kolkata <br/> GST - 19AAICC0892M1Z4 <br/> <hr/> ORDER#' +
                        response[i].orderid +
                        " <br/> Order Date: " +
                        moment(moment(response[i].created_date, "YYYY-MM-DD")).format("YYYY-MM-DD") +
                        " <br/> Delivery Date " +
                        moment(moment(response[i].delivery_date, "YYYY-MM-DD")).format("YYYY-MM-DD") +
                        " - " +
                        response[i].timeslot +
                        " <br/>  Payment Method: " +
                        response[i].gateway +
                        " </p> </div>  <hr/>" +
                        "                                    </td>" +
                        "                                </tr>" +
                        "<tr><td>" +
                        '                          <table align="left" border="0" cellpadding="0" cellspacing="0" width="100%">' +
                        "                                                <tr>" +
                        '                                                    <td align="left" valign="top" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 400; line-height: 24px;">' +
                        '                                                        <p style="font-weight: 800;">Billing Address</p>' +
                        "                                                        <p> <strong>" +
                        response[i].address.title +
                        "</strong> <br/> " +
                        response[i].address.address +
                        " <br> " +
                        response[i].address.address2 +
                        "<br/>" +
                        response[i].address.city.name +
                        ", " +
                        response[i].address.pincode +
                        " <br/> Contact name: " +
                        response[i].address.contact_name +
                        " <br/>  Contact number: " +
                        response[i].address.contact_mobile +
                        " </p>" +
                        "                                                    </td>" +
                        '                                                    <td align="left" valign="top" style="margin-left: 30px; font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 400; line-height: 24px;">' +
                        '                                                        <p style="font-weight: 800;">Shipping Address</p>' +
                        "                                                        <p> <strong>" +
                        response[i].address.title +
                        "</strong> <br/> " +
                        response[i].address.address +
                        " <br> " +
                        response[i].address.address2 +
                        "<br/>" +
                        response[i].address.city.name +
                        ", " +
                        response[i].address.pincode +
                        " <br/> Contact name: " +
                        response[i].address.contact_name +
                        " <br/>  Contact number: " +
                        response[i].address.contact_mobile +
                        " </p>" +
                        "                                                    </td>" +
                        "                                                </tr>" +
                        "                                            </table>" +
                        "</td></tr>" +
                        "                                <tr>" +
                        '                                    <td align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 400; line-height: 24px; padding-top: 10px;">' +
                        '                                        <p style="font-size: 12px; font-weight: 400; line-height: 24px; color: #777777;">  </p>' +
                        "                                    </td>" +
                        "                                </tr>" +
                        "" +
                        "                                <tr>" +
                        '                                    <td align="left" style="padding-top: 20px;">' +
                        '                                        <table cellspacing="0" cellpadding="0" border="0" width="100%">' +
                        "                                            <tr>" +
                        '                                                <td width="75%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 10px;"> Items </td>' +
                        '                                                <td width="75%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 10px;"> Price </td>' +
                        '                                                <td width="75%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 10px;"> QTY </td>' +
                        '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 10px;"> Price </td>' +
                        "                                            </tr>";

                    var j;
                    for (j = 0; j < response[i].products.length; j++) {
                        html_template = html_template + '                         <tr style=" border-bottom: 1px solid rgb(238, 238, 238);">' + '                                                <td width="75%" align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 400; line-height: 24px; padding: 3px;"> ' + response[i].products[j].productname + " </td>" + '                                                <td width="25%" align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 400; line-height: 24px; padding: 3px;">₹' + response[i].products[j].price / +response[i].products[j].quantity + " </td>" + '                                                <td width="25%" align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 400; line-height: 24px; padding: 3px;"> ' + response[i].products[j].quantity + " </td>" + '                                                <td width="25%" align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 400; line-height: 24px; padding: 3px;">₹' + response[i].products[j].price + " </td>" + "                                           </tr>";
                    }

                    html_template =
                        html_template +
                        " <tr>" +
                        '                                                <td colspan="3"width="75%" align="right" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;"> Total </td>' +
                        '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;">₹' +
                        response[i].price +
                        " </td>" +
                        "                                            	</tr>" +
                        "												<tr>" +
                        '                                                <td colspan="3"width="75%" align="right" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;"> Shipping Price </td>' +
                        '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;">₹' +
                        response[i].totalShippingPrice +
                        " </td>" +
                        "                                            	</tr>" +
                        "												<tr>" +
                        '                                                <td colspan="3"width="75%" align="right" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5x;"> Packaging Price </td>' +
                        '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;">₹' +
                        response[i].totalPackingPrice +
                        " </td>" +
                        "                                            	</tr>" +
                        "												<tr>" +
                        '                                                <td colspan="3"width="75%" align="right" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;"> Total CGST </td>' +
                        '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;">₹' +
                        response[i].totalCGST +
                        " </td>" +
                        "                                            	</tr>" +
                        "												<tr>" +
                        '                                                <td colspan="3"width="75%" align="right" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;"> Total SGST </td>' +
                        '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;">₹' +
                        response[i].totalSGST +
                        " </td>" +
                        "                                            	</tr>" +
                        "												<tr>" +
                        '                                                <td colspan="3"width="75%" align="right" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;"> Total IGST </td>' +
                        '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;">₹' +
                        response[i].totalIGST +
                        " </td>" +
                        "                                            	</tr>" +
                        "												<tr>" +
                        '                                                <td colspan="3"width="75%" align="right" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;"> Discount </td>' +
                        '                                                <td width="25%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 5px;">₹' +
                        response[i].couponamount +
                        " </td>" +
                        "                                            	</tr>" +
                        "										</table>" +
                        "                                    </td>" +
                        "                                </tr>" +
                        "                                <tr>" +
                        '                                    <td align="left" style="padding-top: 20px;">' +
                        '                                        <table cellspacing="0" cellpadding="0" border="0" width="100%">' +
                        "                                            <tr>" +
                        '                                                <td width="75%" align="right" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 10px; border-top: 3px solid #eeeeee; border-bottom: 3px solid #eeeeee;"> SUB TOTAL </td>' +
                        '                                                <td width="25%" align="right" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; padding: 10px; border-top: 3px solid #eeeeee; border-bottom: 3px solid #eeeeee;">₹' +
                        response[i].finalprice +
                        " </td>" +
                        "                                            </tr>" +
                        "                                        </table>" +
                        "                                    </td>" +
                        "                                </tr>" +
                        "                            </table>" +
                        "                        </td>" +
                        "                    </tr>" +
                        "                </table>" +
                        "            </td>" +
                        "        </tr>" +
                        "    </table>" +
                        "</body>" +
                        '</html> <div style = "display:block; clear:both; page-break-after:always;"></div>';
                }

                axios
                    .post("http://142.93.208.70:2001/app/gen_pdf", { html: html_template })
                    .then(function (response) {
                        var buffer = Buffer.from(response.data.buffer.data);
                        res.contentType("application/pdf");
                        res.send(buffer);
                    })
                    .catch(function (error) {
                        console.log(error);
                    });
            });
    },

    partner_today_order_by_product_invoice: function (req, res) {
        var where = {};
        var start = new Date();
        start.setHours(0, 0, 0, 0);

        var end = new Date();
        end.setHours(23, 59, 59, 999);

        if (req.query.city && req.query.city != "") {
            where["city"] = req.query.city;
        }

        if (req.query.vendor && req.query.vendor != "") {
            where["vendor"] = req.query.vendor;
        }

        if (req.query.pickup_partner && req.query.pickup_partner != "") {
            where["pickup_partner"] = req.query.pickup_partner;
        }

        if (req.query.cargo_partner && req.query.cargo_partner != "") {
            where["cargo_partner"] = req.query.cargo_partner;
        }

        if (req.query.delivery_partner && req.query.delivery_partner != "") {
            where["delivery_partner"] = req.query.delivery_partner;
        }

        where["delivery_date"] = { $gte: start, $lt: end };

        Checkout.find(where)
            .populate("user")
            .populate("products.product")
            .populate("vendor")
            .populate("cargo_partner")
            .populate("delivery_partner")
            .populate("pickup_partner")
            .populate({
                path: "address",
                populate: [
                    {
                        path: "city",
                        model: "cities",
                        select: "name",
                    },
                ],
            })
            .then((response) => {
                if (response.length == 0) {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                    });
                    return;
                }
                var html_template = "";
                var i, j;
                var products = [];
                var all_products = [];
                for (i = 0; i < response.length; i++) {
                    for (j = 0; j < response[i].products.length; j++) {
                        let obj = products.find((o) => o.product === response[i].products[j].product._id);

                        if (obj) {
                            index = products.findIndex((x) => x.product === response[i].products[j].product._id);
                            products.splice(index, 1);
                            products.push({
                                product: response[i].products[j].product._id,
                                name: response[i].products[j].product.name,
                                quantity: Number(response[i].products[j].quantity) + Number(obj.quantity),
                            });
                        } else {
                            products.push({
                                product: response[i].products[j].product._id,
                                name: response[i].products[j].product.name,
                                quantity: response[i].products[j].quantity,
                            });
                        }
                    }
                }

                var html_template = "";
                html_template =
                    html_template +
                    "<!DOCTYPE html>" +
                    "<html>" +
                    "<head>" +
                    '    <meta httpEquiv="Content-Type" content="text/html; charset=utf-8" />' +
                    '    <meta name="viewport" content="width=device-width, initial-scale=1">' +
                    '    <meta httpEquiv="X-UA-Compatible" content="IE=edge" />' +
                    '    <style type="text/css">' +
                    "        body," +
                    "        table," +
                    "        td," +
                    "        a {" +
                    "            -webkit-text-size-adjust: 100%;" +
                    "            -ms-text-size-adjust: 100%;" +
                    "        }" +
                    "        table," +
                    "        td {" +
                    "            mso-table-lspace: 0pt;" +
                    "            mso-table-rspace: 0pt;" +
                    "        }" +
                    "        img {" +
                    "            -ms-interpolation-mode: bicubic;" +
                    "        }" +
                    "        img {" +
                    "            border: 0;" +
                    "            height: auto;" +
                    "            line-height: 100%;" +
                    "            outline: none;" +
                    "            text-decoration: none;" +
                    "        }" +
                    "        table {" +
                    "            border-collapse: collapse !important;" +
                    "        }" +
                    "        body {" +
                    "            height: 100% !important;" +
                    "            margin: 0 !important;" +
                    "            padding: 0 !important;" +
                    "            width: 100% !important;" +
                    "        }" +
                    "        a[x-apple-data-detectors] {" +
                    "            color: inherit !important;" +
                    "            text-decoration: none !important;" +
                    "            font-size: inherit !important;" +
                    "            font-family: inherit !important;" +
                    "            font-weight: inherit !important;" +
                    "            line-height: inherit !important;" +
                    "        }" +
                    "        @media screen and (max-width: 480px) {" +
                    "            .mobile-hide {" +
                    "                display: none !important;" +
                    "            }" +
                    "            .mobile-center {" +
                    "                text-align: center !important;" +
                    "            }" +
                    "        }" +
                    '        div[style*="margin: 16px 0;"] {' +
                    "            margin: 0 !important;" +
                    "        }" +
                    "    </style>" +
                    '<body style="margin: 0 !important; padding: 0 !important; background-color: #eeeeee;" bgcolor="#eeeeee">' +
                    '    <div style="display: none; font-size: 1px; color: #fefefe; line-height: 1px; font-family: Open Sans, Helvetica, Arial, sans-serif; max-height: 0px; max-width: 0px; opacity: 0; overflow: hidden;">' +
                    "        For what reason would it be advisable for me to think about business content? That might be little bit risky to have crew member like them." +
                    "    </div>" +
                    '    <table border="0" cellpadding="0" cellspacing="0" width="100%">' +
                    "        <tr>" +
                    '            <td align="center" style="background-color: #eeeeee;" bgcolor="#eeeeee">' +
                    '                <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width:600px;">' +
                    "                     " +
                    "                                <tr>" +
                    '                                    <td align="center" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 400; line-height: 24px; padding-top: 25px;"> <img src="https://tastes2plate.com/img/site-logo.png" width="125" height="120" style="display: block; border: 0px;" alt="tastes2plate" /><br>' +
                    '                                        <h2 style="font-size: 15px; font-weight: 800;  color: #333333; margin: 0;"> Total Product List </h2>' +
                    "                                    </td>" +
                    "                                </tr>" +
                    "                    <tr>" +
                    '                        <td align="center" style="padding: 35px 35px 20px 35px; background-color: #ffffff;" bgcolor="#ffffff">' +
                    '                            <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width:600px;">' +
                    "                                <tr>" +
                    '                                    <td align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 400; line-height: 24px; padding-top: 10px;">' +
                    '                                        <p style="font-size: 12px; font-weight: 400; line-height: 24px; color: #777777;">  </p>' +
                    "                                    </td>" +
                    "                                </tr>" +
                    "" +
                    "                                <tr>" +
                    '                                    <td align="left" style="padding-top: 20px;">' +
                    '                                        <table cellspacing="0" cellpadding="0" border="0" width="100%">' +
                    "                                            <tr>" +
                    '                                                <td width="75%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; "> Items </td>' +
                    '                                                <td width="75%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; "> QTY </td>' +
                    "                                            </tr>";

                var a;
                for (a = 0; a < products.length; a++) {
                    html_template = html_template + '                         <tr style=" border-bottom: 1px solid rgb(238, 238, 238);">' + '                                                <td width="75%" align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 400; line-height: 24px; padding: 3px;"> ' + products[a].name + " </td>" + '                                                <td width="25%" align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 400; line-height: 24px; padding: 3px;"> ' + products[a].quantity + " </td>" + "                                           </tr>";
                }

                html_template = html_template + " </table>" + "                        </td>" + "                    </tr>" + "                </table>" + "            </td>" + "        </tr>" + "    </table>" + "</body>" + '</html> <div style = "display:block; clear:both; page-break-after:always;"></div>';

                axios
                    .post("http://142.93.208.70:2001/app/gen_pdf", { html: html_template })
                    .then(function (response) {
                        var buffer = Buffer.from(response.data.buffer.data);
                        res.contentType("application/pdf");
                        res.send(buffer);
                    })
                    .catch(function (error) {
                        console.log(error);
                    });
            });
    },

    partner_tomorrow_order_by_product_invoice: function (req, res) {
        var where = {};
        var start = new Date();
        start.setDate(start.getDate() + 1);
        start.setHours(0, 0, 0, 0);

        var end = new Date();
        end.setDate(end.getDate() + 1);
        end.setHours(23, 59, 59, 999);

        if (req.query.city && req.query.city != "") {
            where["city"] = req.query.city;
        }

        if (req.query.vendor && req.query.vendor != "") {
            where["vendor"] = req.query.vendor;
        }

        if (req.query.pickup_partner && req.query.pickup_partner != "") {
            where["pickup_partner"] = req.query.pickup_partner;
        }

        if (req.query.cargo_partner && req.query.cargo_partner != "") {
            where["cargo_partner"] = req.query.cargo_partner;
        }

        if (req.query.delivery_partner && req.query.delivery_partner != "") {
            where["delivery_partner"] = req.query.delivery_partner;
        }

        where["delivery_date"] = { $gte: start, $lt: end };

        Checkout.find(where)
            .populate("user")
            .populate("products.product")
            .populate("vendor")
            .populate("cargo_partner")
            .populate("delivery_partner")
            .populate("pickup_partner")
            .populate({
                path: "address",
                populate: [
                    {
                        path: "city",
                        model: "cities",
                        select: "name",
                    },
                ],
            })
            .then((response) => {
                if (response.length == 0) {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                    });
                    return;
                }
                var html_template = "";
                var i, j;
                var products = [];
                var all_products = [];
                for (i = 0; i < response.length; i++) {
                    for (j = 0; j < response[i].products.length; j++) {
                        let obj = products.find((o) => o.product === response[i].products[j].product._id);

                        if (obj) {
                            index = products.findIndex((x) => x.product === response[i].products[j].product._id);
                            products.splice(index, 1);
                            products.push({
                                product: response[i].products[j].product._id,
                                name: response[i].products[j].product.name,
                                quantity: Number(response[i].products[j].quantity) + Number(obj.quantity),
                            });
                        } else {
                            products.push({
                                product: response[i].products[j].product._id,
                                name: response[i].products[j].product.name,
                                quantity: response[i].products[j].quantity,
                            });
                        }
                    }
                }

                var html_template = "";
                html_template =
                    html_template +
                    "<!DOCTYPE html>" +
                    "<html>" +
                    "<head>" +
                    '    <meta httpEquiv="Content-Type" content="text/html; charset=utf-8" />' +
                    '    <meta name="viewport" content="width=device-width, initial-scale=1">' +
                    '    <meta httpEquiv="X-UA-Compatible" content="IE=edge" />' +
                    '    <style type="text/css">' +
                    "        body," +
                    "        table," +
                    "        td," +
                    "        a {" +
                    "            -webkit-text-size-adjust: 100%;" +
                    "            -ms-text-size-adjust: 100%;" +
                    "        }" +
                    "        table," +
                    "        td {" +
                    "            mso-table-lspace: 0pt;" +
                    "            mso-table-rspace: 0pt;" +
                    "        }" +
                    "        img {" +
                    "            -ms-interpolation-mode: bicubic;" +
                    "        }" +
                    "        img {" +
                    "            border: 0;" +
                    "            height: auto;" +
                    "            line-height: 100%;" +
                    "            outline: none;" +
                    "            text-decoration: none;" +
                    "        }" +
                    "        table {" +
                    "            border-collapse: collapse !important;" +
                    "        }" +
                    "        body {" +
                    "            height: 100% !important;" +
                    "            margin: 0 !important;" +
                    "            padding: 0 !important;" +
                    "            width: 100% !important;" +
                    "        }" +
                    "        a[x-apple-data-detectors] {" +
                    "            color: inherit !important;" +
                    "            text-decoration: none !important;" +
                    "            font-size: inherit !important;" +
                    "            font-family: inherit !important;" +
                    "            font-weight: inherit !important;" +
                    "            line-height: inherit !important;" +
                    "        }" +
                    "        @media screen and (max-width: 480px) {" +
                    "            .mobile-hide {" +
                    "                display: none !important;" +
                    "            }" +
                    "            .mobile-center {" +
                    "                text-align: center !important;" +
                    "            }" +
                    "        }" +
                    '        div[style*="margin: 16px 0;"] {' +
                    "            margin: 0 !important;" +
                    "        }" +
                    "    </style>" +
                    '<body style="margin: 0 !important; padding: 0 !important; background-color: #eeeeee;" bgcolor="#eeeeee">' +
                    '    <div style="display: none; font-size: 1px; color: #fefefe; line-height: 1px; font-family: Open Sans, Helvetica, Arial, sans-serif; max-height: 0px; max-width: 0px; opacity: 0; overflow: hidden;">' +
                    "        For what reason would it be advisable for me to think about business content? That might be little bit risky to have crew member like them." +
                    "    </div>" +
                    '    <table border="0" cellpadding="0" cellspacing="0" width="100%">' +
                    "        <tr>" +
                    '            <td align="center" style="background-color: #eeeeee;" bgcolor="#eeeeee">' +
                    '                <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width:600px;">' +
                    "                     " +
                    "                                <tr>" +
                    '                                    <td align="center" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 400; line-height: 24px; padding-top: 25px;"> <img src="https://tastes2plate.com/img/site-logo.png" width="125" height="120" style="display: block; border: 0px;" alt="tastes2plate" /><br>' +
                    '                                        <h2 style="font-size: 15px; font-weight: 800;  color: #333333; margin: 0;"> Total Product List </h2>' +
                    "                                    </td>" +
                    "                                </tr>" +
                    "                    <tr>" +
                    '                        <td align="center" style="padding: 35px 35px 20px 35px; background-color: #ffffff;" bgcolor="#ffffff">' +
                    '                            <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width:600px;">' +
                    "                                <tr>" +
                    '                                    <td align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 400; line-height: 24px; padding-top: 10px;">' +
                    '                                        <p style="font-size: 12px; font-weight: 400; line-height: 24px; color: #777777;">  </p>' +
                    "                                    </td>" +
                    "                                </tr>" +
                    "" +
                    "                                <tr>" +
                    '                                    <td align="left" style="padding-top: 20px;">' +
                    '                                        <table cellspacing="0" cellpadding="0" border="0" width="100%">' +
                    "                                            <tr>" +
                    '                                                <td width="75%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; "> Items </td>' +
                    '                                                <td width="75%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 800; line-height: 24px; "> QTY </td>' +
                    "                                            </tr>";

                var a;
                for (a = 0; a < products.length; a++) {
                    html_template = html_template + '                         <tr style=" border-bottom: 1px solid rgb(238, 238, 238);">' + '                                                <td width="75%" align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 400; line-height: 24px; padding: 3px;"> ' + products[a].name + " </td>" + '                                                <td width="25%" align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: 400; line-height: 24px; padding: 3px;"> ' + products[a].quantity + " </td>" + "                                           </tr>";
                }

                html_template = html_template + " </table>" + "                        </td>" + "                    </tr>" + "                </table>" + "            </td>" + "        </tr>" + "    </table>" + "</body>" + '</html> <div style = "display:block; clear:both; page-break-after:always;"></div>';

                axios
                    .post("http://142.93.208.70:2001/app/gen_pdf", { html: html_template })
                    .then(function (response) {
                        var buffer = Buffer.from(response.data.buffer.data);
                        res.contentType("application/pdf");
                        res.send(buffer);
                    })
                    .catch(function (error) {
                        console.log(error);
                    });
            });
    },

    state_list_all: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.name != "") {
                where["name"] = {
                    $regex: ".*" + req.query.name,
                    $options: "i",
                };
            }

            if (req.query.active != "") {
                where["active"] = req.query.active;
            }

            where["deleted"] = 0;

            States.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    States.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_state_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            States.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "States not found",
                            token: req.token,
                        });
                    } else {
                        if (response.active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        States.findOneAndUpdate(
                            where,
                            {
                                active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    upload_doc1: function (req, res) {
        upload(req, res, function (error) {
            if (error) {
                res.status(200).send({
                    status: "error",
                    message: error.code,
                    //token: req.token,
                });
            } else {
                var where = {};
                where["_id"] = req.body.id;
                Users.findOne(where).then((response) => {
                    if (response.doc1 && response.doc1 != "") {
                        var old_image = response.doc1.split("/").pop().split("#")[0].split("?")[0];
                        var params = {
                            Bucket: "swagbag-files",
                            Key: old_image,
                        };

                        s3.deleteObject(params, function (err, data) {
                            if (err) console.log(err, err.stack);
                            else console.log(data);
                        });
                    }

                    if (req.files[0]) {
                        var where = {};
                        where["_id"] = req.body.id;
                        Users.findOneAndUpdate(
                            where,
                            {
                                doc1: req.files[0].location,
                                doc1_type: req.body.doc1_type,
                                update_date: moment().format(),
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Doc 1 has been updated",
                                    doc: req.files[0].location,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: error,
                                    doc: "",
                                });
                            });
                    } else {
                        res.status(200).send({
                            status: "error",
                            message: "Select image",
                            doc: "",
                        });
                    }
                });
            }
        });
    },

    upload_doc2: function (req, res) {
        upload(req, res, function (error) {
            if (error) {
                res.status(200).send({
                    status: "error",
                    message: error.code,
                    //token: req.token,
                });
            } else {
                var where = {};
                where["_id"] = req.body.id;
                Users.findOne(where).then((response) => {
                    if (response.doc2 && response.doc2 != "") {
                        var old_image = response.doc2.split("/").pop().split("#")[0].split("?")[0];
                        var params = {
                            Bucket: "swagbag-files",
                            Key: old_image,
                        };

                        s3.deleteObject(params, function (err, data) {
                            if (err) console.log(err, err.stack);
                            else console.log(data);
                        });
                    }

                    if (req.files[0]) {
                        var where = {};
                        where["_id"] = req.body.id;
                        Users.findOneAndUpdate(
                            where,
                            {
                                doc2: req.files[0].location,
                                doc2_type: req.body.doc2_type,
                                update_date: moment().format(),
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Doc 2 has been updated",
                                    doc: req.files[0].location,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: error,
                                    doc: "",
                                });
                            });
                    } else {
                        res.status(200).send({
                            status: "error",
                            message: "Select image",
                            doc: "",
                        });
                    }
                });
            }
        });
    },

    upload_doc3: function (req, res) {
        upload(req, res, function (error) {
            if (error) {
                res.status(200).send({
                    status: "error",
                    message: error.code,
                    //token: req.token,
                });
            } else {
                var where = {};
                where["_id"] = req.body.id;
                Users.findOne(where).then((response) => {
                    if (response.doc3 && response.doc3 != "") {
                        var old_image = response.doc3.split("/").pop().split("#")[0].split("?")[0];
                        var params = {
                            Bucket: "swagbag-files",
                            Key: old_image,
                        };

                        s3.deleteObject(params, function (err, data) {
                            if (err) console.log(err, err.stack);
                            else console.log(data);
                        });
                    }

                    if (req.files[0]) {
                        var where = {};
                        where["_id"] = req.body.id;
                        Users.findOneAndUpdate(
                            where,
                            {
                                doc3: req.files[0].location,
                                doc3_type: req.body.doc3_type,
                                update_date: moment().format(),
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Doc 3 has been updated",
                                    doc: req.files[0].location,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: error,
                                    doc: "",
                                });
                            });
                    } else {
                        res.status(200).send({
                            status: "error",
                            message: "Select image",
                            doc: "",
                        });
                    }
                });
            }
        });
    },
    update_profile_image2: function (req, res) {
        upload(req, res, function (error) {
            if (error) {
                res.status(200).send({
                    status: "error",
                    message: error.code,
                    //token: req.token,
                });
            } else {
                var where = {};
                where["_id"] = req.body.id;
                Users.findOne(where).then((response) => {
                    if (response.profile_image && response.profile_image != "") {
                        var old_image = response.profile_image.split("/").pop().split("#")[0].split("?")[0];
                        var params = {
                            Bucket: "swagbag-files",
                            Key: old_image,
                        };

                        s3.deleteObject(params, function (err, data) {
                            if (err) console.log(err, err.stack);
                            else console.log(data);
                        });
                    }

                    if (req.files[0]) {
                        var where = {};
                        where["_id"] = req.body.id;
                        Users.findOneAndUpdate(
                            where,
                            {
                                profile_image: req.files[0].location,
                                update_date: moment().format(),
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Profile image has been updated",
                                    doc: req.files[0].location,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: error,
                                    doc: "",
                                });
                            });
                    } else {
                        res.status(200).send({
                            status: "error",
                            message: "Select image",
                            doc: "",
                        });
                    }
                });
            }
        });
    },

    schedule_order_status: function (req, res) {
        console.log(req.query.immediately);
        if (req.query.immediately == "Yes") {
            var where = {};
            where["_id"] = req.query.id;
            Checkout.findOneAndUpdate(
                where,
                {
                    status: req.query.status,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((a) => {
                    console.log(a);
                });

            var where = {};
            where["_id"] = req.query.id;
            Checkout.findOne(where)
                .populate("user")
                .populate("delivery_boy")
                .then((response) => {
                    if (response.user.first_time == 1) {
                        var where = {};
                        Settings.find(where).then((settings_response) => {
                            var signup_bonus_sender = settings_response[32].value;
                            var sender = response.user.reffer_by;

                            var where = {};
                            where["mobile"] = sender;
                            Users.findOne(where).then((sender_response) => {
                                var point = sender_response.subscription.point;
                                var new_point = Number(point) + Number(signup_bonus_sender);
                                var where = {};
                                where["mobile"] = sender;
                                Users.findOneAndUpdate(
                                    where,
                                    {
                                        subscription: {
                                            point: new_point,
                                        },
                                    },
                                    {
                                        new: true,
                                    }
                                )
                                    .exec()
                                    .then((sender_response) => {
                                        var Walletdata = new Wallet({
                                            user: sender_response._id,
                                            point: Number(signup_bonus_sender),
                                            type: 1,
                                            note: "Referral signup bonus",
                                        });
                                        Walletdata.save(function (err, response) {});

                                        var where = {};
                                        where["_id"] = response._id;
                                        Users.findOneAndUpdate(
                                            where,
                                            {
                                                first_time: 0,
                                            },
                                            {
                                                new: true,
                                            }
                                        )
                                            .exec()
                                            .then((response) => {});
                                    });
                            });
                        });
                    }

                    var mobile = response.user.mobile;
                    var email = response.user.email;
                    var name = response.user.full_name != "" ? response.user.full_name : "User";

                    var dname = response.delivery_boy && response.delivery_boy.full_name != "" ? response.user.full_name : "Not Available";
                    var dmobile = response.delivery_boy && response.delivery_boy.mobile != "" ? response.user.mobile : "Not Available";

                    if (req.query.status == "pending_payment") {
                        //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to PENDING-PAYMENT. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                        var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to PENDING-PAYMENT. Thanks, SWAGBAG";

                        var ordernote = new OrderNote({
                            note: msg,
                            order: req.query.id,
                        });
                        ordernote.save(function (err, response) {});

                        axios
                            .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                            .then(function (response) {
                                //console.log(response.data);
                            })
                            .catch(function (error) {
                                console.log(error);
                            });
                    }

                    if (req.query.status == "waiting_vendor_approval") {
                        //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to PROCESSING. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                        var msg = "Dear " + name + ", your order no " + response.orderid + " status is changed to PROCESSING. Thanks, SWAGBAG";

                        var ordernote = new OrderNote({
                            note: msg,
                            order: req.query.id,
                        });
                        ordernote.save(function (err, response) {});

                        axios
                            .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                            .then(function (response) {
                                //console.log(response.data);
                            })
                            .catch(function (error) {
                                console.log(error);
                            });
                    }

                    if (req.query.status == "on_hold") {
                        //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to HOLD. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                        var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to HOLD. Thanks, SWAGBAG";

                        var ordernote = new OrderNote({
                            note: msg,
                            order: req.query.id,
                        });
                        ordernote.save(function (err, response) {});

                        axios
                            .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                            .then(function (response) {
                                //console.log(response.data);
                            })
                            .catch(function (error) {
                                console.log(error);
                            });
                    }

                    if (req.query.status == "ready_pickup") {
                        //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to READY-TO-PICKUP. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                        var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to READY-TO-PICKUP. Thanks, SWAGBAG";

                        var ordernote = new OrderNote({
                            note: msg,
                            order: req.query.id,
                        });
                        ordernote.save(function (err, response) {});

                        axios
                            .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                            .then(function (response) {
                                //console.log(response.data);
                            })
                            .catch(function (error) {
                                console.log(error);
                            });
                    }

                    if (req.query.status == "pickup_boy_assigned") {
                        //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to PICKUP-BOY-ASSIGNED. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                        var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to PICKUP-BOY-ASSIGNED. Thanks, SWAGBAG";

                        var ordernote = new OrderNote({
                            note: msg,
                            order: req.query.id,
                        });
                        ordernote.save(function (err, response) {});

                        axios
                            .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                            .then(function (response) {
                                //console.log(response.data);
                            })
                            .catch(function (error) {
                                console.log(error);
                            });
                    }

                    if (req.query.status == "pickup_boy_started") {
                        //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to PICKUP-BOY-STARTED. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                        var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to PICKUP-BOY-STARTED. Thanks, SWAGBAG";

                        var ordernote = new OrderNote({
                            note: msg,
                            order: req.query.id,
                        });
                        ordernote.save(function (err, response) {});

                        axios
                            .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                            .then(function (response) {
                                //console.log(response.data);
                            })
                            .catch(function (error) {
                                console.log(error);
                            });
                    }

                    if (req.query.status == "delivered_to_cargo_partner") {
                        //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to DELIVERED-TO-CARGO-PARTNER. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                        var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to DELIVERED-TO-CARGO-PARTNER. Thanks, SWAGBAG";

                        var ordernote = new OrderNote({
                            note: msg,
                            order: req.query.id,
                        });
                        ordernote.save(function (err, response) {});

                        axios
                            .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                            .then(function (response) {
                                //console.log(response.data);
                            })
                            .catch(function (error) {
                                console.log(error);
                            });
                    }

                    if (req.query.status == "cargo_off_loaded") {
                        //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to CARGO-OFF-LOADED. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                        var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to CARGO-OFF-LOADED. Thanks, SWAGBAG";

                        var ordernote = new OrderNote({
                            note: msg,
                            order: req.query.id,
                        });
                        ordernote.save(function (err, response) {});

                        axios
                            .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                            .then(function (response) {
                                //console.log(response.data);
                            })
                            .catch(function (error) {
                                console.log(error);
                            });
                    }

                    if (req.query.status == "cargo_delivery_started") {
                        //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to CARGO-LOADED-TO-FLIGHT. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                        var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to CARGO-LOADED-TO-FLIGHT. Thanks, SWAGBAG";

                        var ordernote = new OrderNote({
                            note: msg,
                            order: req.query.id,
                        });
                        ordernote.save(function (err, response) {});

                        axios
                            .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                            .then(function (response) {
                                //console.log(response.data);
                            })
                            .catch(function (error) {
                                console.log(error);
                            });
                    }

                    if (req.query.status == "received_destination_airport") {
                        //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to RECEIVED-AT-DESTINATION-AIRPORT. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                        var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to RECEIVED-AT-DESTINATION-AIRPORT. Thanks, SWAGBAG";

                        var ordernote = new OrderNote({
                            note: msg,
                            order: req.query.id,
                        });
                        ordernote.save(function (err, response) {});

                        axios
                            .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                            .then(function (response) {
                                //console.log(response.data);
                            })
                            .catch(function (error) {
                                console.log(error);
                            });
                    }

                    if (req.query.status == "delivered_to_delivery_partner") {
                        //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to HANDED-OVER-TO-DELIVERY-PARTNER. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                        var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to HANDED-OVER-TO-DELIVERY-PARTNER. Thanks, SWAGBAG";

                        var ordernote = new OrderNote({
                            note: msg,
                            order: req.query.id,
                        });
                        ordernote.save(function (err, response) {});

                        axios
                            .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                            .then(function (response) {
                                //console.log(response.data);
                            })
                            .catch(function (error) {
                                console.log(error);
                            });

                        var msg = encodeURI("Dear CUSTOMER, Delivery Boy " + response.delivery_boy.full_name + " is assigned for your ORDER NO # " + response.orderid + ". Regards, SWAGBAG CUSTOMER SUPPORT TEAM");
                        axios
                            .get("https://media.smsgupshup.com/GatewayAPI/rest?method=SendMediaMessage&format=json&userid=" + wuser + "&password=" + wpwd + "&send_to=91" + mobile + "&v=1.1&auth_scheme=plain&isHSM=true&msg_type=text&caption=" + msg + "&isTemplate=true")
                            //.get("https://media.smsgupshup.com/GatewayAPI/rest?method=SendMediaMessage&format=json&userid="+wuser+"&password="+wpwd+"&send_to=91"+customer_mobile+"&v=1.1&auth_scheme=plain&isHSM=true&msg_type=DOCUMENT&media_url=http://www.africau.edu/images/default/sample.pdf&caption="+msg+"&filename=Acct%20Stmt&isTemplate=true")
                            .then(function () {});
                    }

                    if (req.query.status == "delivery_boy_assigned") {
                        //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to DELIVERY-BOY-ASSIGNED. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                        var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to DELIVERY-BOY-ASSIGNED. Thanks, SWAGBAG";

                        var db_name = response.delivery_boy != null ? response.delivery_boy.full_name : "N/A";
                        var msg2 = "Dear CUSTOMER, Delivery Boy " + db_name + " is assigned for your ORDER NO # " + response.orderid + ". Regards, SWAGBAG CUSTOMER SUPPORT TEAM";
                        gen_custom_sms(mobile, msg2);

                        var msg5 = "DEAR CUSTOMER, PLEASE HELP US BY CHECKING THE QUALITY OF FOOD AT THE TIME OF DELIVERY. AFTER ACCEPTING THE DELIVERY, ANY COMPLAIN REGARDING FOOD QUALITY WILL BE DIFFICULT TO ASCERTAIN. Tastes2plate CC Team";
                        gen_custom_sms(mobile, msg5);

                        var msg = encodeURI("Dear CUSTOMER, Delivery Boy " + response.delivery_boy.full_name + " is assigned for your ORDER NO # " + response.orderid + ". Regards, SWAGBAG CUSTOMER SUPPORT TEAM");
                        axios
                            .get("https://media.smsgupshup.com/GatewayAPI/rest?method=SendMediaMessage&format=json&userid=" + wuser + "&password=" + wpwd + "&send_to=91" + mobile + "&v=1.1&auth_scheme=plain&isHSM=true&msg_type=text&caption=" + msg + "&isTemplate=true")
                            //.get("https://media.smsgupshup.com/GatewayAPI/rest?method=SendMediaMessage&format=json&userid="+wuser+"&password="+wpwd+"&send_to=91"+customer_mobile+"&v=1.1&auth_scheme=plain&isHSM=true&msg_type=DOCUMENT&media_url=http://www.africau.edu/images/default/sample.pdf&caption="+msg+"&filename=Acct%20Stmt&isTemplate=true")
                            .then(function () {});

                        var ordernote = new OrderNote({
                            note: msg,
                            order: req.query.id,
                        });
                        ordernote.save(function (err, response) {});

                        axios
                            .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                            .then(function (response) {
                                //console.log(response.data);
                            })
                            .catch(function (error) {
                                console.log(error);
                            });
                    }

                    if (req.query.status == "delivery_boy_started") {
                        var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to OUT-FOR-DELIVERY. Thanks, SWAGBAG";

                        var db_name = response.delivery_boy ? response.delivery_boy.full_name : "N/A";
                        var db_mobile = response.delivery_boy ? response.delivery_boy.mobile : "N/A";

                        // var msg3 = "DEAR CUSTOMER, DELIVERY BOY "+db_name+" IS OUT FOR DELIVERY FOR YOUR ORDER NO " + response.orderid + " WITH SWAGBAG; HIS MOBILE NUMBER IS "+db_mobile+". YOU CAN NOW TRACK THE DELIVERY BOY REGARDS, SWAGBAG (T2P) CUSTOMER SUPPORT TEAM";
                        // gen_custom_sms(mobile, msg3);

                        var db_image = response.delivery_boy && response.delivery_boy.profile_image != "" ? ' <img src="' + response.delivery_boy.profile_image + '" width="125" height="120" style="display: block; border: 0px; margin-bottom: 15%;" alt="tastes2plate" />' : "";
                        var msg4 = "DEAR CUSTOMER, DELIVERY BOY " + db_name + " IS OUT FOR DELIVERY FOR YOUR ORDER NO " + response.orderid + " AND HIS MOBILE NUMBER IS " + db_mobile + ". <br/> <div> " + db_image + "</div> <br/><br/><br/>  ";
                        //console.log(msg4);
                        var ordernote = new OrderNote({
                            note: msg,
                            order: req.query.id,
                        });
                        ordernote.save(function (err, response) {});

                        //12121212

                        var payload = {
                            merchantId: "SWAGBAGPREPROD",
                            transactionId: response.orderid,
                            merchantOrderId: response.orderid,
                            amount: response.finalprice,
                            //"mobileNumber":"7065265407",
                            expiresIn: 180,
                        };

                        var x_verify = sha256(base64.stringify(utf8.parse(JSON.stringify(payload))) + "/v3/payLink/init" + "5b6a2591-2b28-4840-a5ac-762a5fbfb6d6") + "###" + 1;

                        const url = "https://mercury-uat.phonepe.com/v3/payLink/init";
                        const options = {
                            method: "POST",
                            headers: { "Content-Type": "application/json", "X-VERIFY": x_verify },
                            body: JSON.stringify(payload),
                        };
                        fetch(url, options)
                            .then((res) => res.json())
                            .then((json) => {
                                console.log(json);
                                var payLink = json.payLink;
                                if (payLink) {
                                    var msg9 = "DEAR CUSTOMER, DELIVERY BOY " + db_name + " IS OUT-FOR-DELIVERY OF YOUR ORDER NO " + response.orderid + ". YOU CAN DO PAYMENT ONLINE USING THIS LINK " + payLink + ". REGARDS, SWAGBAG (T2P) CUSTOMER SUPPORT TEAM";

                                    axios
                                        .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg9), {})
                                        .then(function (response) {
                                            //console.log(response.data);
                                        })
                                        .catch(function (error) {
                                            console.log(error);
                                        });

                                    gen_custom_sms(mobile, msg9);
                                }
                            })
                            .catch((err) => console.error("error:" + err));

                        axios
                            .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg4), {})
                            .then(function (response) {
                                //console.log(response.data);
                            })
                            .catch(function (error) {
                                console.log(error);
                            });

                        var msg = encodeURI("Dear CUSTOMER, your order no " + response.orderid + " status is changed to OUT FOR DELIVERY. Thanks, SWAGBAG");
                        axios.get("https://media.smsgupshup.com/GatewayAPI/rest?method=SendMediaMessage&format=json&userid=" + wuser + "&password=" + wpwd + "&send_to=91" + mobile + "&v=1.1&auth_scheme=plain&isHSM=true&msg_type=text&caption=" + msg + "&isTemplate=true").then(function (e) {
                            //console.log(e);
                        });

                        var msg = encodeURI("DEAR CUSTOMER, DELIVERY BOY " + dname + " IS OUT FOR DELIVERY FOR YOUR ORDER NO " + response.orderid + " WITH SWAGBAG; HIS MOBILE NUMBER IS " + dmobile + ". YOU CAN NOW TRACK THE DELIVERY BOY REGARDS, SWAGBAG (T2P) CUSTOMER SUPPORT TEAM");
                        axios.get("https://media.smsgupshup.com/GatewayAPI/rest?method=SendMediaMessage&format=json&userid=" + wuser + "&password=" + wpwd + "&send_to=91" + mobile + "&v=1.1&auth_scheme=plain&isHSM=true&msg_type=text&caption=" + msg + "&isTemplate=true").then(function () {});
                    }

                    if (req.query.status == "pickup_boy_assigned") {
                        //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to PICKUP-MAN-ASSIGNED. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                        var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to PICKUP-MAN-ASSIGNED. Thanks, SWAGBAG";

                        var ordernote = new OrderNote({
                            note: msg,
                            order: req.query.id,
                        });
                        ordernote.save(function (err, response) {});

                        axios
                            .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                            .then(function (response) {
                                //console.log(response.data);
                            })
                            .catch(function (error) {
                                console.log(error);
                            });
                    }

                    if (req.query.status == "pickup_boy_started") {
                        //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to PICKUP-BOY-STARTED. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                        var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to PICKUP-BOY-STARTED. Thanks, SWAGBAG";

                        var ordernote = new OrderNote({
                            note: msg,
                            order: req.query.id,
                        });
                        ordernote.save(function (err, response) {});

                        axios
                            .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                            .then(function (response) {
                                //console.log(response.data);
                            })
                            .catch(function (error) {
                                console.log(error);
                            });
                    }

                    if (req.query.status == "delivered") {
                        //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to DELIVERED. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                        var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to DELIVERED. Thanks, SWAGBAG";

                        var ordernote = new OrderNote({
                            note: msg,
                            order: req.query.id,
                        });
                        ordernote.save(function (err, response) {});

                        axios
                            .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                            .then(function (response) {
                                //console.log(response.data);
                            })
                            .catch(function (error) {
                                console.log(error);
                            });
                    }

                    if (req.query.status == "cancel") {
                        //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to CANCELLED. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                        var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to CANCELLED. Thanks, SWAGBAG";

                        var ordernote = new OrderNote({
                            note: msg,
                            order: req.query.id,
                        });
                        ordernote.save(function (err, response) {});

                        axios
                            .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                            .then(function (response) {
                                //console.log(response.data);
                            })
                            .catch(function (error) {
                                console.log(error);
                            });
                    }

                    if (req.query.status == "failed") {
                        //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to FAILED. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                        var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to FAILED. Thanks, SWAGBAG";

                        var ordernote = new OrderNote({
                            note: msg,
                            order: req.query.id,
                        });
                        ordernote.save(function (err, response) {});

                        axios
                            .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                            .then(function (response) {
                                //console.log(response.data);
                            })
                            .catch(function (error) {
                                console.log(error);
                            });
                    }

                    if (req.query.status == "refunded") {
                        //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to REFUNDED. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                        var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to REFUNDED. Thanks, SWAGBAG";

                        var ordernote = new OrderNote({
                            note: msg,
                            order: req.query.id,
                        });
                        ordernote.save(function (err, response) {});

                        axios
                            .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                            .then(function (response) {
                                //console.log(response.data);
                            })
                            .catch(function (error) {
                                console.log(error);
                            });
                    }

                    if (req.query.status == "rejected_customer") {
                        //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to REJECTED-BY-CUSTOMER. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                        var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to REJECTED-BY-CUSTOMER. Thanks, SWAGBAG";

                        var ordernote = new OrderNote({
                            note: msg,
                            order: req.query.id,
                        });
                        ordernote.save(function (err, response) {});

                        axios
                            .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                            .then(function (response) {
                                //console.log(response.data);
                            })
                            .catch(function (error) {
                                console.log(error);
                            });
                    }

                    if (req.query.status == "declined_vendor") {
                        //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to DECLINED-BY-VENDOR. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                        var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to DECLINED-BY-VENDOR. Thanks, SWAGBAG";

                        var ordernote = new OrderNote({
                            note: msg,
                            order: req.query.id,
                        });
                        ordernote.save(function (err, response) {});

                        axios
                            .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                            .then(function (response) {
                                ////console.log(response.data);
                            })
                            .catch(function (error) {
                                //console.log(error);
                            });
                    }

                    res.status(200).send({
                        status: "success",
                        message: "Order status updated has been scheduled",
                        token: req.token,
                    });
                });
        } else {
            var scheduledata = new Schedule({
                orderid: req.query.id,
                schedule_status_to: req.query.status,
                schedule_date: req.query.schedule_date,
                schedule_time: req.query.schedule_time,
                schedule_status: "Y",
            });

            scheduledata.save(function (err, response) {
                if (err) {
                    res.status(200).send({
                        status: "error",
                        message: err,
                        token: req.token,
                    });
                } else {
                    res.status(200).send({
                        status: "success",
                        message: "Order status updated has been scheduled",
                        token: req.token,
                    });
                }
            });
        }
    },

    schedule_order_status_cron: function (req, res) {
        const today = moment().startOf("day");
        var where = {};
        where["schedule_date"] = {
            $gte: new Date(new Date().setUTCHours(0, 0, 0, 0)).toISOString(),
            $lt: new Date(new Date().setUTCHours(23, 59, 59, 999)).toISOString(),
        };
        where["schedule_status"] = "Y";
        // console.log("where",where);
        // return
        Schedule.find(where)
            .cursor()
            .eachAsync(function (data) {
                //console.log(data.schedule_time);
                const dateKolkata = moment_timezone.tz(Date.now(), "Asia/Kolkata");
                var schedule_time = moment(today).format("YYYY-MM-DD") + " " + data.schedule_time;
                var scheduleTimestamp = Math.floor(new Date(schedule_time).getTime() / 1000);
                //scheduleTimestamp = moment.unix(scheduleTimestamp).tz('Asia/Kolkata').format('YYYY-MM-DD HH:mm:ss');
                var utc = Math.floor(new Date(dateKolkata).getTime() / 1000);
                var unixTimestamp = Math.floor(new Date(moment.unix(utc).tz("Asia/Kolkata").format()).getTime() / 1000);
                //unixTimestamp = moment.unix(unixTimestamp).tz('Asia/Kolkata').format('YYYY-MM-DD HH:mm:ss');
                // console.log("unixTimestamp", unixTimestamp);
                // console.log("scheduleTimestamp", scheduleTimestamp);

                if (unixTimestamp >= scheduleTimestamp) {
                    var where = {};
                    where["_id"] = data.orderid;
                    Checkout.findOne(where).then((response) => {
                        //return

                        if (response.deleted == 0) {
                            var where = {};
                            where["_id"] = data.orderid;
                            Checkout.findOneAndUpdate(
                                where,
                                {
                                    status: data.schedule_status_to,
                                },
                                {
                                    new: true,
                                }
                            )
                                .exec()
                                .then((a) => {
                                    //console.log("updated", a);
                                })
                                .catch(function (error) {
                                    //console.log(error);
                                });

                            var where = {};
                            where["_id"] = data._id;

                            Schedule.findOneAndUpdate(
                                where,
                                {
                                    status: data.schedule_status_to,
                                    schedule_status: "",
                                },
                                {
                                    new: true,
                                }
                            )
                                .exec()
                                .then((response) => {
                                    //console.log("updated", response.status);
                                    //return;
                                    var where = {};
                                    where["_id"] = data.orderid;
                                    Checkout.findOne(where)
                                        .populate("user")
                                        .populate("delivery_boy")
                                        .then((response) => {
                                            if (response.user.first_time == 1) {
                                                var where = {};
                                                Settings.find(where).then((settings_response) => {
                                                    var signup_bonus_sender = settings_response[32].value;
                                                    var sender = response.user.reffer_by;

                                                    var where = {};
                                                    where["mobile"] = sender;
                                                    Users.findOne(where).then((sender_response) => {
                                                        var point = sender_response.subscription.point;
                                                        var new_point = Number(point) + Number(signup_bonus_sender);
                                                        var where = {};
                                                        where["mobile"] = sender;
                                                        Users.findOneAndUpdate(
                                                            where,
                                                            {
                                                                subscription: {
                                                                    point: new_point,
                                                                },
                                                            },
                                                            {
                                                                new: true,
                                                            }
                                                        )
                                                            .exec()
                                                            .then((sender_response) => {
                                                                var Walletdata = new Wallet({
                                                                    user: sender_response._id,
                                                                    point: Number(signup_bonus_sender),
                                                                    type: 1,
                                                                    note: "Referral signup bonus",
                                                                });
                                                                Walletdata.save(function (err, response) {});

                                                                var where = {};
                                                                where["_id"] = response._id;
                                                                Users.findOneAndUpdate(
                                                                    where,
                                                                    {
                                                                        first_time: 0,
                                                                    },
                                                                    {
                                                                        new: true,
                                                                    }
                                                                )
                                                                    .exec()
                                                                    .then((response) => {});
                                                            });
                                                    });
                                                });
                                            }

                                            var mobile = response.user.mobile;
                                            var email = response.user.email;
                                            var name = response.user.full_name != "" ? response.user.full_name : "User";

                                            var dname = response.delivery_boy && response.delivery_boy.full_name != "" ? response.user.full_name : "Not Available";
                                            var dmobile = response.delivery_boy && response.delivery_boy.mobile != "" ? response.user.mobile : "Not Available";

                                            if (data.schedule_status_to == "pending_payment") {
                                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to PENDING-PAYMENT. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to PENDING-PAYMENT. Thanks, SWAGBAG";

                                                var ordernote = new OrderNote({
                                                    note: msg,
                                                    order: data.orderid,
                                                });
                                                ordernote.save(function (err, response) {});

                                                axios
                                                    .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                                                    .then(function (response) {
                                                        //console.log(response.data);
                                                    })
                                                    .catch(function (error) {
                                                        console.log(error);
                                                    });

                                                var msg = encodeURI("Dear CUSTOMER, your order no " + response.orderid + " status is changed to PENDING-PAYMENT. Thanks, SWAGBAG");
                                                axios.get("https://media.smsgupshup.com/GatewayAPI/rest?method=SendMediaMessage&format=json&userid=" + wuser + "&password=" + wpwd + "&send_to=91" + mobile + "&v=1.1&auth_scheme=plain&isHSM=true&msg_type=text&caption=" + msg + "&isTemplate=true").then(function () {});
                                            }

                                            if (data.schedule_status_to == "waiting_vendor_approval") {
                                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to PROCESSING. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                                var msg = "Dear " + name + ", your order no " + response.orderid + " status is changed to PROCESSING. Thanks, SWAGBAG";

                                                var ordernote = new OrderNote({
                                                    note: msg,
                                                    order: data.orderid,
                                                });
                                                ordernote.save(function (err, response) {});

                                                axios
                                                    .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                                                    .then(function (response) {
                                                        //console.log(response.data);
                                                    })
                                                    .catch(function (error) {
                                                        console.log(error);
                                                    });

                                                var msg = encodeURI("Dear CUSTOMER, your order no " + response.orderid + " status is changed to PROCESSING. Thanks, SWAGBAG");
                                                axios.get("https://media.smsgupshup.com/GatewayAPI/rest?method=SendMediaMessage&format=json&userid=" + wuser + "&password=" + wpwd + "&send_to=91" + mobile + "&v=1.1&auth_scheme=plain&isHSM=true&msg_type=text&caption=" + msg + "&isTemplate=true").then(function () {});
                                            }

                                            if (data.schedule_status_to == "on_hold") {
                                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to HOLD. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to HOLD. Thanks, SWAGBAG";

                                                var ordernote = new OrderNote({
                                                    note: msg,
                                                    order: data.orderid,
                                                });
                                                ordernote.save(function (err, response) {});

                                                axios
                                                    .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                                                    .then(function (response) {
                                                        //console.log(response.data);
                                                    })
                                                    .catch(function (error) {
                                                        console.log(error);
                                                    });

                                                var msg = encodeURI("Dear CUSTOMER, your order no " + response.orderid + " status is changed to HOLD. Thanks, SWAGBAG");
                                                axios.get("https://media.smsgupshup.com/GatewayAPI/rest?method=SendMediaMessage&format=json&userid=" + wuser + "&password=" + wpwd + "&send_to=91" + mobile + "&v=1.1&auth_scheme=plain&isHSM=true&msg_type=text&caption=" + msg + "&isTemplate=true").then(function () {});
                                            }

                                            if (data.schedule_status_to == "ready_pickup") {
                                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to READY-TO-PICKUP. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to READY-TO-PICKUP. Thanks, SWAGBAG";

                                                var ordernote = new OrderNote({
                                                    note: msg,
                                                    order: data.orderid,
                                                });
                                                ordernote.save(function (err, response) {});

                                                axios
                                                    .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                                                    .then(function (response) {
                                                        //console.log(response.data);
                                                    })
                                                    .catch(function (error) {
                                                        console.log(error);
                                                    });

                                                var msg = encodeURI("Dear CUSTOMER, your order no " + response.orderid + " status is changed to READY-TO-PICKUP. Thanks, SWAGBAG");
                                                axios.get("https://media.smsgupshup.com/GatewayAPI/rest?method=SendMediaMessage&format=json&userid=" + wuser + "&password=" + wpwd + "&send_to=91" + mobile + "&v=1.1&auth_scheme=plain&isHSM=true&msg_type=text&caption=" + msg + "&isTemplate=true").then(function () {});
                                            }

                                            if (data.schedule_status_to == "pickup_boy_assigned") {
                                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to PICKUP-BOY-ASSIGNED. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to PICKUP-BOY-ASSIGNED. Thanks, SWAGBAG";

                                                var ordernote = new OrderNote({
                                                    note: msg,
                                                    order: data.orderid,
                                                });
                                                ordernote.save(function (err, response) {});

                                                axios
                                                    .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                                                    .then(function (response) {
                                                        //console.log(response.data);
                                                    })
                                                    .catch(function (error) {
                                                        console.log(error);
                                                    });

                                                var msg = encodeURI("Dear CUSTOMER, your order no " + response.orderid + " status is changed to PICKUP-BOY-ASSIGNED. Thanks, SWAGBAG");
                                                axios.get("https://media.smsgupshup.com/GatewayAPI/rest?method=SendMediaMessage&format=json&userid=" + wuser + "&password=" + wpwd + "&send_to=91" + mobile + "&v=1.1&auth_scheme=plain&isHSM=true&msg_type=text&caption=" + msg + "&isTemplate=true").then(function () {});
                                            }

                                            if (data.schedule_status_to == "pickup_boy_started") {
                                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to PICKUP-BOY-STARTED. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to PICKUP-BOY-STARTED. Thanks, SWAGBAG";

                                                var ordernote = new OrderNote({
                                                    note: msg,
                                                    order: data.orderid,
                                                });
                                                ordernote.save(function (err, response) {});

                                                axios
                                                    .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                                                    .then(function (response) {
                                                        //console.log(response.data);
                                                    })
                                                    .catch(function (error) {
                                                        console.log(error);
                                                    });

                                                var msg = encodeURI("Dear CUSTOMER, your order no " + response.orderid + " status is changed to PICKUP-BOY-STARTED. Thanks, SWAGBAG");
                                                axios.get("https://media.smsgupshup.com/GatewayAPI/rest?method=SendMediaMessage&format=json&userid=" + wuser + "&password=" + wpwd + "&send_to=91" + mobile + "&v=1.1&auth_scheme=plain&isHSM=true&msg_type=text&caption=" + msg + "&isTemplate=true").then(function () {});
                                            }

                                            if (data.schedule_status_to == "delivered_to_cargo_partner") {
                                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to DELIVERED-TO-CARGO-PARTNER. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to DELIVERED-TO-CARGO-PARTNER. Thanks, SWAGBAG";

                                                var ordernote = new OrderNote({
                                                    note: msg,
                                                    order: data.orderid,
                                                });
                                                ordernote.save(function (err, response) {});

                                                axios
                                                    .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                                                    .then(function (response) {
                                                        //console.log(response.data);
                                                    })
                                                    .catch(function (error) {
                                                        console.log(error);
                                                    });

                                                var msg = encodeURI("Dear CUSTOMER, your order no " + response.orderid + " status is changed to DELIVERED-TO-CARGO-PARTNER. Thanks, SWAGBAG");
                                                axios.get("https://media.smsgupshup.com/GatewayAPI/rest?method=SendMediaMessage&format=json&userid=" + wuser + "&password=" + wpwd + "&send_to=91" + mobile + "&v=1.1&auth_scheme=plain&isHSM=true&msg_type=text&caption=" + msg + "&isTemplate=true").then(function () {});
                                            }

                                            if (data.schedule_status_to == "cargo_off_loaded") {
                                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to CARGO-OFF-LOADED. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to CARGO-OFF-LOADED. Thanks, SWAGBAG";

                                                var ordernote = new OrderNote({
                                                    note: msg,
                                                    order: data.orderid,
                                                });
                                                ordernote.save(function (err, response) {});

                                                axios
                                                    .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                                                    .then(function (response) {
                                                        //console.log(response.data);
                                                    })
                                                    .catch(function (error) {
                                                        console.log(error);
                                                    });

                                                var msg = encodeURI("Dear CUSTOMER, your order no " + response.orderid + " status is changed to CARGO-OFF-LOADED. Thanks, SWAGBAG");
                                                axios.get("https://media.smsgupshup.com/GatewayAPI/rest?method=SendMediaMessage&format=json&userid=" + wuser + "&password=" + wpwd + "&send_to=91" + mobile + "&v=1.1&auth_scheme=plain&isHSM=true&msg_type=text&caption=" + msg + "&isTemplate=true").then(function () {});

                                                var msg = encodeURI("Dear CUSTOMER, your order no " + response.orderid + " status is changed to CARGO-LOADED-TO-FLIGHT. Thanks, SWAGBAG");
                                                axios.get("https://media.smsgupshup.com/GatewayAPI/rest?method=SendMediaMessage&format=json&userid=" + wuser + "&password=" + wpwd + "&send_to=91" + mobile + "&v=1.1&auth_scheme=plain&isHSM=true&msg_type=text&caption=" + msg + "&isTemplate=true").then(function () {});
                                            }

                                            if (data.schedule_status_to == "cargo_delivery_started") {
                                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to CARGO-LOADED-TO-FLIGHT. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to CARGO-LOADED-TO-FLIGHT. Thanks, SWAGBAG";

                                                var ordernote = new OrderNote({
                                                    note: msg,
                                                    order: data.orderid,
                                                });
                                                ordernote.save(function (err, response) {});

                                                axios
                                                    .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                                                    .then(function (response) {
                                                        //console.log(response.data);
                                                    })
                                                    .catch(function (error) {
                                                        console.log(error);
                                                    });

                                                var msg = encodeURI("Dear CUSTOMER, your order no " + response.orderid + " status is changed to CARGO-LOADED-TO-FLIGHT. Thanks, SWAGBAG");
                                                axios.get("https://media.smsgupshup.com/GatewayAPI/rest?method=SendMediaMessage&format=json&userid=" + wuser + "&password=" + wpwd + "&send_to=91" + mobile + "&v=1.1&auth_scheme=plain&isHSM=true&msg_type=text&caption=" + msg + "&isTemplate=true").then(function () {});
                                            }

                                            if (data.schedule_status_to == "received_destination_airport") {
                                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to RECEIVED-AT-DESTINATION-AIRPORT. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to RECEIVED-AT-DESTINATION-AIRPORT. Thanks, SWAGBAG";

                                                var ordernote = new OrderNote({
                                                    note: msg,
                                                    order: data.orderid,
                                                });
                                                ordernote.save(function (err, response) {});

                                                axios
                                                    .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                                                    .then(function (response) {
                                                        //console.log(response.data);
                                                    })
                                                    .catch(function (error) {
                                                        console.log(error);
                                                    });

                                                var msg = encodeURI("Dear CUSTOMER, your order no " + response.orderid + " status is changed to RECEIVED-AT-DESTINATION-AIRPORT. Thanks, SWAGBAG");
                                                axios.get("https://media.smsgupshup.com/GatewayAPI/rest?method=SendMediaMessage&format=json&userid=" + wuser + "&password=" + wpwd + "&send_to=91" + mobile + "&v=1.1&auth_scheme=plain&isHSM=true&msg_type=text&caption=" + msg + "&isTemplate=true").then(function () {});
                                            }

                                            if (data.schedule_status_to == "delivered_to_delivery_partner") {
                                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to HANDED-OVER-TO-DELIVERY-PARTNER. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to HANDED-OVER-TO-DELIVERY-PARTNER. Thanks, SWAGBAG";

                                                var ordernote = new OrderNote({
                                                    note: msg,
                                                    order: data.orderid,
                                                });
                                                ordernote.save(function (err, response) {});

                                                axios
                                                    .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                                                    .then(function (response) {
                                                        //console.log(response.data);
                                                    })
                                                    .catch(function (error) {
                                                        console.log(error);
                                                    });

                                                var msg = encodeURI("Dear CUSTOMER, your order no " + response.orderid + " status is changed to HANDED-OVER-TO-DELIVERY-PARTNER. Thanks, SWAGBAG");
                                                axios.get("https://media.smsgupshup.com/GatewayAPI/rest?method=SendMediaMessage&format=json&userid=" + wuser + "&password=" + wpwd + "&send_to=91" + mobile + "&v=1.1&auth_scheme=plain&isHSM=true&msg_type=text&caption=" + msg + "&isTemplate=true").then(function () {});
                                            }

                                            if (data.schedule_status_to == "delivery_boy_assigned") {
                                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to DELIVERY-BOY-ASSIGNED. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to DELIVERY-BOY-ASSIGNED. Thanks, SWAGBAG";

                                                var db_name = response.delivery_boy != null ? response.delivery_boy.full_name : "N/A";
                                                var msg2 = "Dear CUSTOMER, Delivery Boy " + db_name + " is assigned for your ORDER NO # " + response.orderid + ". Regards, SWAGBAG CUSTOMER SUPPORT TEAM";
                                                gen_custom_sms(mobile, msg2);

                                                var msg5 = "DEAR CUSTOMER, PLEASE HELP US BY CHECKING THE QUALITY OF FOOD AT THE TIME OF DELIVERY. AFTER ACCEPTING THE DELIVERY, ANY COMPLAIN REGARDING FOOD QUALITY WILL BE DIFFICULT TO ASCERTAIN. Tastes2plate CC Team";
                                                gen_custom_sms(mobile, msg5);

                                                var ordernote = new OrderNote({
                                                    note: msg,
                                                    order: data.orderid,
                                                });
                                                ordernote.save(function (err, response) {});

                                                axios
                                                    .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                                                    .then(function (response) {
                                                        //console.log(response.data);
                                                    })
                                                    .catch(function (error) {
                                                        console.log(error);
                                                    });

                                                var msg = encodeURI("Dear CUSTOMER, your order no " + response.orderid + " status is changed to DELIVERY-BOY-ASSIGNED. Thanks, SWAGBAG");
                                                axios.get("https://media.smsgupshup.com/GatewayAPI/rest?method=SendMediaMessage&format=json&userid=" + wuser + "&password=" + wpwd + "&send_to=91" + mobile + "&v=1.1&auth_scheme=plain&isHSM=true&msg_type=text&caption=" + msg + "&isTemplate=true").then(function () {});

                                                var msg = encodeURI("DEAR CUSTOMER, PLEASE HELP US BY CHECKING THE QUALITY OF FOOD AT THE TIME OF DELIVERY. AFTER ACCEPTING THE DELIVERY, ANY COMPLAIN REGARDING FOOD QUALITY WILL BE DIFFICULT TO ASCERTAIN. Tastes2plate CC Team");
                                                axios.get("https://media.smsgupshup.com/GatewayAPI/rest?method=SendMediaMessage&format=json&userid=" + wuser + "&password=" + wpwd + "&send_to=91" + mobile + "&v=1.1&auth_scheme=plain&isHSM=true&msg_type=text&caption=" + msg + "&isTemplate=true").then(function () {});

                                                var msg = "DEAR CUSTOMER, PLEASE HELP US BY CHECKING THE QUALITY OF FOOD AT THE TIME OF DELIVERY. AFTER ACCEPTING THE DELIVERY, ANY COMPLAIN REGARDING FOOD QUALITY WILL BE DIFFICULT TO ASCERTAIN. Tastes2plate CC Team";
                                            }

                                            if (data.schedule_status_to == "delivery_boy_started") {
                                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to OUT-FOR-DELIVERY. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to OUT-FOR-DELIVERY. Thanks, SWAGBAG";

                                                var db_name = response.delivery_boy ? response.delivery_boy.full_name : "N/A";
                                                var db_mobile = response.delivery_boy ? response.delivery_boy.mobile : "N/A";

                                                var msg3 = "DEAR CUSTOMER, DELIVERY BOY " + db_name + " IS OUT FOR DELIVERY FOR YOUR ORDER NO " + response.orderid + " WITH SWAGBAG; HIS MOBILE NUMBER IS " + response.delivery_boy.mobile + ". YOU CAN NOW TRACK THE DELIVERY BOY REGARDS, SWAGBAG (T2P) CUSTOMER SUPPORT TEAM";
                                                gen_custom_sms(mobile, msg3);

                                                var db_image = response.delivery_boy.profile_image && response.delivery_boy.profile_image != "" ? ' <img src="' + response.delivery_boy.profile_image + '" width="125" height="120" style="display: block; border: 0px; margin-bottom: 15%;" alt="tastes2plate" />' : "";
                                                var msg4 = "DEAR CUSTOMER, DELIVERY BOY " + db_name + " IS OUT FOR DELIVERY FOR YOUR ORDER NO " + response.orderid + " AND HIS MOBILE NUMBER IS " + db_mobile + ". <br/> <div> " + db_image + "</div> <br/><br/><br/>  ";
                                                //console.log(msg4);
                                                var ordernote = new OrderNote({
                                                    note: msg,
                                                    order: data.orderid,
                                                });
                                                ordernote.save(function (err, response) {});

                                                var t2purl = "http://tastes2plate.com/map?order=" + response._id;
                                                //const response = bitly.shorten(t2purl);
                                                console.log(bitly.shorten(t2purl));
                                                //return;

                                                axios
                                                    .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg4), {})
                                                    .then(function (response) {
                                                        //console.log(response.data);
                                                    })
                                                    .catch(function (error) {
                                                        console.log(error);
                                                    });

                                                //var msg = "Dear CUSTOMER, your order no "+response.orderid+" status is changed to OUT-FOR-DELIVERY. Thanks, SWAGBAG";
                                                var msg = "DEAR CUSTOMER, DELIVERY BOY " + dname + " IS OUT FOR DELIVERY OF YOUR ORDER NO " + response.orderid + " WITH SWAGBAG; HIS MOBILE NUMBER IS " + dmobile + ". NOW, YOU CAN TRACK CUSTOMER THE DELIVERY BOY. REGARDS, SWAGBAG (T2P) CUSTOMER SUPPORT TEAM";

                                                var payload = {
                                                    merchantId: "SWAGBAGPREPROD",
                                                    transactionId: response.orderid,
                                                    merchantOrderId: response.orderid,
                                                    amount: response.finalprice,
                                                    //"mobileNumber":"7065265407",
                                                    expiresIn: 180,
                                                };

                                                var x_verify = sha256(base64.stringify(utf8.parse(JSON.stringify(payload))) + "/v3/payLink/init" + "5b6a2591-2b28-4840-a5ac-762a5fbfb6d6") + "###" + 1;

                                                const url = "https://mercury-uat.phonepe.com/v3/payLink/init";
                                                const options = {
                                                    method: "POST",
                                                    headers: { "Content-Type": "application/json", "X-VERIFY": x_verify },
                                                    body: JSON.stringify(payload),
                                                };
                                                fetch(url, options)
                                                    .then((res) => res.json())
                                                    .then((json) => {
                                                        console.log(json);
                                                        var payLink = json.payLink;
                                                        if (payLink) {
                                                            var msg9 = "DEAR CUSTOMER, DELIVERY BOY " + db_name + " IS OUT-FOR-DELIVERY OF YOUR ORDER NO " + response.orderid + ". YOU CAN DO PAYMENT ONLINE USING THIS LINK " + payLink + ". REGARDS, SWAGBAG (T2P) CUSTOMER SUPPORT TEAM";

                                                            axios
                                                                .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg9), {})
                                                                .then(function (response) {
                                                                    //console.log(response.data);
                                                                })
                                                                .catch(function (error) {
                                                                    console.log(error);
                                                                });

                                                            gen_custom_sms(mobile, msg9);
                                                        }
                                                    })
                                                    .catch((err) => console.error("error:" + err));

                                                var msg = encodeURI("Dear CUSTOMER, your order no " + response.orderid + " status is changed to OUT FOR DELIVERY. Thanks, SWAGBAG");
                                                axios.get("https://media.smsgupshup.com/GatewayAPI/rest?method=SendMediaMessage&format=json&userid=" + wuser + "&password=" + wpwd + "&send_to=91" + mobile + "&v=1.1&auth_scheme=plain&isHSM=true&msg_type=text&caption=" + msg + "&isTemplate=true").then(function () {});

                                                var msg = encodeURI("DEAR CUSTOMER, DELIVERY BOY " + dname + " IS OUT FOR DELIVERY FOR YOUR ORDER NO " + response.orderid + " WITH SWAGBAG; HIS MOBILE NUMBER IS " + dmobile + ". YOU CAN NOW TRACK THE DELIVERY BOY REGARDS, SWAGBAG (T2P) CUSTOMER SUPPORT TEAM");
                                                axios.get("https://media.smsgupshup.com/GatewayAPI/rest?method=SendMediaMessage&format=json&userid=" + wuser + "&password=" + wpwd + "&send_to=91" + mobile + "&v=1.1&auth_scheme=plain&isHSM=true&msg_type=text&caption=" + msg + "&isTemplate=true").then(function () {});
                                            }

                                            if (data.schedule_status_to == "pickup_boy_assigned") {
                                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to PICKUP-MAN-ASSIGNED. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to PICKUP-MAN-ASSIGNED. Thanks, SWAGBAG";

                                                var ordernote = new OrderNote({
                                                    note: msg,
                                                    order: data.orderid,
                                                });
                                                ordernote.save(function (err, response) {});

                                                axios
                                                    .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                                                    .then(function (response) {
                                                        //console.log(response.data);
                                                    })
                                                    .catch(function (error) {
                                                        console.log(error);
                                                    });

                                                var msg = encodeURI("Dear CUSTOMER, your order no " + response.orderid + " status is changed to PICKUP-MAN-ASSIGNED. Thanks, SWAGBAG");
                                                axios.get("https://media.smsgupshup.com/GatewayAPI/rest?method=SendMediaMessage&format=json&userid=" + wuser + "&password=" + wpwd + "&send_to=91" + mobile + "&v=1.1&auth_scheme=plain&isHSM=true&msg_type=text&caption=" + msg + "&isTemplate=true").then(function () {});
                                            }

                                            if (data.schedule_status_to == "pickup_boy_started") {
                                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to PICKUP-BOY-STARTED. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to PICKUP-BOY-STARTED. Thanks, SWAGBAG";

                                                var ordernote = new OrderNote({
                                                    note: msg,
                                                    order: data.orderid,
                                                });
                                                ordernote.save(function (err, response) {});

                                                axios
                                                    .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                                                    .then(function (response) {
                                                        //console.log(response.data);
                                                    })
                                                    .catch(function (error) {
                                                        console.log(error);
                                                    });

                                                var msg = encodeURI("Dear CUSTOMER, your order no " + response.orderid + " status is changed to PICKUP-BOY-STARTED. Thanks, SWAGBAG");
                                                axios.get("https://media.smsgupshup.com/GatewayAPI/rest?method=SendMediaMessage&format=json&userid=" + wuser + "&password=" + wpwd + "&send_to=91" + mobile + "&v=1.1&auth_scheme=plain&isHSM=true&msg_type=text&caption=" + msg + "&isTemplate=true").then(function () {});
                                            }

                                            if (data.schedule_status_to == "delivered") {
                                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to DELIVERED. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to DELIVERED. Thanks, SWAGBAG";

                                                var ordernote = new OrderNote({
                                                    note: msg,
                                                    order: data.orderid,
                                                });
                                                ordernote.save(function (err, response) {});

                                                axios
                                                    .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                                                    .then(function (response) {
                                                        //console.log(response.data);
                                                    })
                                                    .catch(function (error) {
                                                        console.log(error);
                                                    });

                                                var msg = encodeURI("Dear CUSTOMER, your order no " + response.orderid + " status is changed to CANCELLED. Thanks, SWAGBAG");
                                                axios.get("https://media.smsgupshup.com/GatewayAPI/rest?method=SendMediaMessage&format=json&userid=" + wuser + "&password=" + wpwd + "&send_to=91" + mobile + "&v=1.1&auth_scheme=plain&isHSM=true&msg_type=text&caption=" + msg + "&isTemplate=true").then(function () {});
                                            }

                                            if (data.schedule_status_to == "cancel") {
                                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to CANCELLED. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to DELIVERED. Thanks, SWAGBAG";

                                                var ordernote = new OrderNote({
                                                    note: msg,
                                                    order: data.orderid,
                                                });
                                                ordernote.save(function (err, response) {});

                                                axios
                                                    .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                                                    .then(function (response) {
                                                        //console.log(response.data);
                                                    })
                                                    .catch(function (error) {
                                                        console.log(error);
                                                    });

                                                var msg = encodeURI("Dear CUSTOMER, your order no " + response.orderid + " status is changed to CANCELLED. Thanks, SWAGBAG");
                                                axios.get("https://media.smsgupshup.com/GatewayAPI/rest?method=SendMediaMessage&format=json&userid=" + wuser + "&password=" + wpwd + "&send_to=91" + mobile + "&v=1.1&auth_scheme=plain&isHSM=true&msg_type=text&caption=" + msg + "&isTemplate=true").then(function () {});
                                            }

                                            if (data.schedule_status_to == "failed") {
                                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to FAILED. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to FAILED. Thanks, SWAGBAG";

                                                var ordernote = new OrderNote({
                                                    note: msg,
                                                    order: data.orderid,
                                                });
                                                ordernote.save(function (err, response) {});

                                                axios
                                                    .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                                                    .then(function (response) {
                                                        //console.log(response.data);
                                                    })
                                                    .catch(function (error) {
                                                        console.log(error);
                                                    });

                                                var msg = encodeURI("Dear CUSTOMER, your order no " + response.orderid + " status is changed to FAILED. Thanks, SWAGBAG");
                                                axios.get("https://media.smsgupshup.com/GatewayAPI/rest?method=SendMediaMessage&format=json&userid=" + wuser + "&password=" + wpwd + "&send_to=91" + mobile + "&v=1.1&auth_scheme=plain&isHSM=true&msg_type=text&caption=" + msg + "&isTemplate=true").then(function () {});
                                            }

                                            if (data.schedule_status_to == "refunded") {
                                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to REFUNDED. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to REFUNDED. Thanks, SWAGBAG";

                                                var ordernote = new OrderNote({
                                                    note: msg,
                                                    order: data.orderid,
                                                });
                                                ordernote.save(function (err, response) {});

                                                axios
                                                    .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                                                    .then(function (response) {
                                                        //console.log(response.data);
                                                    })
                                                    .catch(function (error) {
                                                        console.log(error);
                                                    });

                                                var msg = encodeURI("Dear CUSTOMER, your order no " + response.orderid + " status is changed to REFUNDED. Thanks, SWAGBAG");
                                                axios.get("https://media.smsgupshup.com/GatewayAPI/rest?method=SendMediaMessage&format=json&userid=" + wuser + "&password=" + wpwd + "&send_to=91" + mobile + "&v=1.1&auth_scheme=plain&isHSM=true&msg_type=text&caption=" + msg + "&isTemplate=true").then(function () {});
                                            }

                                            if (data.schedule_status_to == "rejected_customer") {
                                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to REJECTED-BY-CUSTOMER. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to REJECTED-BY-CUSTOMER. Thanks, SWAGBAG";

                                                var ordernote = new OrderNote({
                                                    note: msg,
                                                    order: data.orderid,
                                                });
                                                ordernote.save(function (err, response) {});

                                                axios
                                                    .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                                                    .then(function (response) {
                                                        //console.log(response.data);
                                                    })
                                                    .catch(function (error) {
                                                        console.log(error);
                                                    });

                                                var msg = encodeURI("Dear CUSTOMER, your order no " + response.orderid + " status is changed to REJECTED-BY-CUSTOMER. Thanks, SWAGBAG");
                                                axios.get("https://media.smsgupshup.com/GatewayAPI/rest?method=SendMediaMessage&format=json&userid=" + wuser + "&password=" + wpwd + "&send_to=91" + mobile + "&v=1.1&auth_scheme=plain&isHSM=true&msg_type=text&caption=" + msg + "&isTemplate=true").then(function () {});
                                            }

                                            if (data.schedule_status_to == "declined_vendor") {
                                                //var msg = "Dear sir / madam, status of your order no "+response.orderid+" with SWAGBAG is changed to DECLINED-BY-VENDOR. Thanks for showing confidence with T2P. Regards, T2P Logistics Management Team";
                                                var msg = "Dear CUSTOMER, your order no " + response.orderid + " status is changed to DECLINED-BY-VENDOR. Thanks, SWAGBAG";

                                                var ordernote = new OrderNote({
                                                    note: msg,
                                                    order: data.orderid,
                                                });
                                                ordernote.save(function (err, response) {});

                                                axios
                                                    .get("https://omst5afyma.execute-api.ap-south-1.amazonaws.com/production/admin/send_email_template?email=" + email + "&msg=" + encodeURI(msg), {})
                                                    .then(function (response) {
                                                        //console.log(response.data);
                                                    })
                                                    .catch(function (error) {
                                                        console.log(error);
                                                    });

                                                var msg = encodeURI("Dear CUSTOMER, your order no " + response.orderid + " status is changed to DECLINED-BY-VENDOR. Thanks, SWAGBAG");
                                                axios.get("https://media.smsgupshup.com/GatewayAPI/rest?method=SendMediaMessage&format=json&userid=" + wuser + "&password=" + wpwd + "&send_to=91" + mobile + "&v=1.1&auth_scheme=plain&isHSM=true&msg_type=text&caption=" + msg + "&isTemplate=true").then(function () {});
                                            }

                                            if (data.schedule_status_to == "vendor_approved") {
                                                var msg = encodeURI("DEAR CUSTOMER, PLEASE HELP US BY CHECKING THE QUALITY OF FOOD AT THE TIME OF DELIVERY. AFTER ACCEPTING THE DELIVERY, ANY COMPLAIN REGARDING FOOD QUALITY WILL BE DIFFICULT TO ASCERTAIN. Tastes2plate CC Team");
                                                axios.get("https://media.smsgupshup.com/GatewayAPI/rest?method=SendMediaMessage&format=json&userid=" + wuser + "&password=" + wpwd + "&send_to=91" + mobile + "&v=1.1&auth_scheme=plain&isHSM=true&msg_type=text&caption=" + msg + "&isTemplate=true").then(function () {});

                                                var msg = "DEAR CUSTOMER, PLEASE HELP US BY CHECKING THE QUALITY OF FOOD AT THE TIME OF DELIVERY. AFTER ACCEPTING THE DELIVERY, ANY COMPLAIN REGARDING FOOD QUALITY WILL BE DIFFICULT TO ASCERTAIN. Tastes2plate CC Team";
                                            }
                                        });
                                });
                        }
                    });
                }
            });
        res.status(200).send({
            status: "success",
        });
    },

    create_holiday: function (req, res) {
        var branddata = new BrandHoliday({
            brand: req.body.brand,
            date: req.body.date,
            reason: req.body.reason,
        });

        branddata.save(function (err, response) {
            if (err) {
                res.status(200).send({
                    status: "error",
                    message: err,
                    token: req.token,
                });
            } else {
                res.status(200).send({
                    status: "success",
                    message: "Holiday has been created successfully.",
                });
            }
        });
    },

    brand_holiday: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["brand"] = req.query.id;
            BrandHoliday.find(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid brand id",
                        token: req.token,
                    });
                });
        }
    },

    delete_holiday: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            BrandHoliday.deleteOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    get_schedule: function (req, res) {
        var where = {};
        Schedule.find(where)
            .then((response) => {
                res.status(200).send({
                    status: "success",
                    token: req.token,
                    result: response,
                });
            })
            .catch((error) => {
                res.status(200).send({
                    status: "error",
                    message: "Invalid schedule id",
                    token: req.token,
                });
            });
    },

    order_pdelete: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Checkout.deleteOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Order has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });

            // Checkout.findOneAndRemove(where)
            // 	.exec()
            // 	.then((response) => {

            // 	});
        }
    },

    create_note: function (req, res) {
        var OrderOtherNote = new OrderOtherNoteModel({
            added_by: req.body.added_by,
            order: req.body.order,
            note: req.body.order_note_field,
            customer_type: req.body.customer_type,
            complaint_type: req.body.complaint_type,
        });

        OrderOtherNote.save(function (err, response) {
            if (err) {
                res.status(200).send({
                    status: "error",
                    message: err,
                    token: req.token,
                });
            } else {
                var where = {};
                where["_id"] = req.body.order;
                Checkout.findOneAndUpdate(
                    where,
                    {
                        has_note: 1,
                    },
                    {
                        new: true,
                    }
                )
                    .exec()
                    .then((response) => {
                        res.status(200).send({
                            status: "success",
                            message: "Note has been created successfully.",
                        });
                    });
            }
        });
    },

    order_note: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["order"] = req.query.id;
            //console.log(where);
            OrderOtherNoteModel.find(where)
                .populate("added_by", "full_name")
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid order id",
                        token: req.token,
                    });
                });
        }
    },

    delete_order_note: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            OrderOtherNoteModel.deleteOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    financial_log: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Users.findOne(where).then((user_response) => {
                var where = {};
                if (req.query.type == "delivery_boy") {
                    where["delivery_boy"] = req.query.id;
                }

                if (req.query.type == "pickup_boy") {
                    where["pickup_boy"] = req.query.id;
                }

                if (req.query.type == "cargo_partner") {
                    where["cargo_partner"] = req.query.id;
                }

                if (req.query.type == "pickup_partner") {
                    where["pickup_partner"] = req.query.id;
                }

                if (req.query.type == "delivery_partner") {
                    where["delivery_partner"] = req.query.id;
                }

                Checkout.find(where, null, {
                    limit: Number(req.query.limit),
                    skip: Number(req.query.page),
                })
                    .select("distance orderid total_weight created_date paid")
                    .sort({
                        created_date: -1,
                    })
                    .then((response) => {
                        Checkout.find(where).countDocuments(function (err, count) {
                            where["paid"] = 0;
                            Checkout.aggregate([
                                {
                                    $match: where,
                                },
                                {
                                    $group: {
                                        _id: "_id",
                                        totalValue: {
                                            $sum: "$distance",
                                        },
                                    },
                                },
                            ]).then((sum_res) => {
                                where["paid"] = 1;
                                Checkout.aggregate([
                                    {
                                        $match: where,
                                    },
                                    {
                                        $group: {
                                            _id: "_id",
                                            totalValue: {
                                                $sum: "$distance",
                                            },
                                        },
                                    },
                                ]).then((sum_paid) => {
                                    var result = [];
                                    var i;
                                    for (i = 0; i < response.length; i++) {
                                        var commission = response[i].delivery_partner_commission ? response[i].delivery_partner_commission : 0;
                                        var price_per_kg = user_response.price_per_kg;
                                        var price_per_pack = user_response.price_per_pack;
                                        var rate_per_km = user_response.rate_per_km;
                                        var monthly_fixed_cost = user_response.monthly_fixed_cost;
                                        var distance = response.distance;

                                        var total_commission = Number(price_per_kg) * Number(response[i].total_weight) + Number(price_per_kg) + Number(rate_per_km) * Number(distance) + Number(monthly_fixed_cost);
                                        if (response[i].gateway == "COD") {
                                            total_commission = total_commission + Number(response[i].cod_order_cost) + Number(response[i].additional_cost1) + Number(response[i].additional_cost2);
                                        }

                                        result.push({
                                            active: response[i].paid,
                                            orderid: response[i].orderid,
                                            commission: total_commission ? total_commission : 0,
                                            distance: response[i].distance,
                                            _id: response[i]._id,
                                            created_date: response[i].created_date,
                                        });
                                    }

                                    res.status(200).send({
                                        status: "success",
                                        result: result,
                                        message: "",
                                        count: count,
                                        sum: sum_res[0] ? sum_res[0].totalValue : 0,
                                        paid: sum_paid[0] ? sum_paid[0].totalValue : 0,
                                    });
                                });
                            });
                        });
                    })
                    .catch((error) => {
                        res.status(200).send({
                            status: "error",
                            message: error,
                            result: [],
                        });
                    });
            });
        }
    },

    update_log_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Checkout.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Boy not found",
                            token: req.token,
                        });
                    } else {
                        if (response.paid == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        Checkout.findOneAndUpdate(
                            where,
                            {
                                paid: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    //// Start Office ////

    create_office: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["deleted"] = 0;
            where["name"] = req.body.name;
            Office.findOne(where)
                .then((response) => {
                    if (response != null) {
                        res.status(200).send({
                            status: "error",
                            message: "Office exist in the database.",
                        });
                    } else {
                        var officedata = new Office({
                            name: req.body.name,
                            city: req.body.city,
                            address: req.body.address,
                            contact_person: req.body.contact_person,
                            contact_person_email: req.body.contact_person_email,
                            contact_person_mobile: req.body.contact_person_mobile,
                        });

                        officedata.save(function (err, response) {
                            if (err) {
                                res.status(200).send({
                                    status: "error",
                                    message: err,
                                    token: req.token,
                                });
                            } else {
                                res.status(200).send({
                                    status: "success",
                                    message: "Office has been created successfully.",
                                    data: response,
                                });
                            }
                        });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Office name exist in the database.",
                    });
                });
        }
    },

    office_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.name && req.query.name != "") {
                where["name"] = {
                    $regex: ".*" + req.query.name,
                    $options: "i",
                };
            }

            if (req.query.active && req.query.active != "") {
                where["active"] = req.query.active;
            }

            where["deleted"] = 0;

            Office.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .populate("city", "name")
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    Office.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_office_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Office.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Office not found",
                            token: req.token,
                        });
                    } else {
                        if (response.active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        Office.findOneAndUpdate(
                            where,
                            {
                                active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },
    get_office: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Office.findOne(where)
                .populate("city", "name")
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid office id",
                        token: req.token,
                    });
                });
        }
    },

    update_office: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Office.findOneAndUpdate(
                where,
                {
                    name: req.body.name,
                    city: req.body.city,
                    address: req.body.address,
                    contact_person: req.body.contact_person,
                    contact_person_email: req.body.contact_person_email,
                    contact_person_mobile: req.body.contact_person_mobile,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Office has been updated",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },
    delete_office: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Office.deleteOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },
    //// Stop Office //////

    //// Start Stock ////

    create_product_rate: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var ratedata = new Rate({
                product: req.body.product,
                vendor: req.body.vendor,
                unit: req.body.unit,
                price: req.body.price,
                note: req.body.note,
            });

            ratedata.save(function (err, response) {
                if (err) {
                    res.status(200).send({
                        status: "error",
                        message: err,
                        token: req.token,
                    });
                } else {
                    res.status(200).send({
                        status: "success",
                        message: "Rate has been created successfully.",
                        data: response,
                    });
                }
            });
        }
    },

    product_rate_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.product && req.query.product != "") {
                where["product"] = req.query.product;
            }

            if (req.query.vendor && req.query.vendor != "") {
                where["vendor"] = req.query.vendor;
            }

            Rate.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .populate("product")
                .populate("vendor")
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    Rate.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    get_product_rate: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Rate.findOne(where)
                .populate("product")
                .populate("vendor")
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid rate id",
                        token: req.token,
                    });
                });
        }
    },

    update_product_rate: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Rate.findOneAndUpdate(
                where,
                {
                    product: req.body.product,
                    vendor: req.body.vendor,
                    unit: req.body.unit,
                    price: req.body.price,
                    note: req.body.note,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Rate has been updated",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },
    delete_product_rate: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Rate.deleteOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },
    //// Stop Office //////

    //// Start Unit ////
    create_unit: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["deleted"] = 0;
            where["name"] = req.body.name;
            Unit.findOne(where)
                .then((response) => {
                    if (response != null) {
                        res.status(200).send({
                            status: "error",
                            message: "Unit exist in the database.",
                        });
                    } else {
                        var unitdata = new Unit({
                            name: req.body.name,
                        });

                        unitdata.save(function (err, response) {
                            if (err) {
                                res.status(200).send({
                                    status: "error",
                                    message: err,
                                    token: req.token,
                                });
                            } else {
                                res.status(200).send({
                                    status: "success",
                                    message: "Unit has been created successfully.",
                                    data: response,
                                });
                            }
                        });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Unit name exist in the database.",
                    });
                });
        }
    },

    unit_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.name && req.query.name != "") {
                where["name"] = {
                    $regex: ".*" + req.query.name,
                    $options: "i",
                };
            }

            Unit.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    Unit.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    get_unit: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Unit.findOne(where)
                .populate("city", "name")
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid office id",
                        token: req.token,
                    });
                });
        }
    },

    update_unit: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Unit.findOneAndUpdate(
                where,
                {
                    name: req.body.name,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Unit has been updated",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    delete_unit: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Unit.deleteOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    product_unit_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            Unit.find(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid office id",
                        token: req.token,
                    });
                });
        }
    },

    product_by_vendor: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            if (req.query.vendor && req.query.vendor != "") {
                where["vendor"] = req.query.vendor;
            }

            Rate.find(where)
                .populate("product")
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid office id",
                        token: req.token,
                    });
                });
        }
    },

    //// Stop Unit //////

    check_stock: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            if (req.query.provider != "office") {
                where["vendor"] = req.query.vendor;
                where["product"] = req.query.product;
                Rate.findOne(where)
                    .populate("product")
                    .populate("vendor")
                    .then((response) => {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            stock: null,
                        });
                    })
                    .catch((error) => {
                        res.status(200).send({
                            status: "error",
                            message: "Invalid product id",
                            token: req.token,
                        });
                    });
            } else {
                where["vendor"] = req.query.vendor;
                where["product"] = req.query.product;
                Rate.findOne(where)
                    .populate("product")
                    .populate("vendor")
                    .then((response) => {
                        var where = {};
                        where["inward_office"] = mongoose.Types.ObjectId(req.query.office);
                        where["type"] = 0;
                        where["product"] = mongoose.Types.ObjectId(req.query.product);
                        StockTransactionProduct.aggregate([
                            {
                                $match: where,
                            },
                            {
                                $group: {
                                    _id: "_id",
                                    totalValue: {
                                        $sum: "$qty",
                                    },
                                },
                            },
                        ]).then((sum_inward) => {
                            var inward = 0;
                            if (sum_inward[0]) {
                                var inward = sum_inward[0].totalValue;
                            }

                            var where = {};
                            where["office"] = mongoose.Types.ObjectId(req.query.office);
                            where["type"] = 1;
                            where["product"] = mongoose.Types.ObjectId(req.query.product);
                            StockTransactionProduct.aggregate([
                                {
                                    $match: where,
                                },
                                {
                                    $group: {
                                        _id: "_id",
                                        totalValue: {
                                            $sum: "$qty",
                                        },
                                    },
                                },
                            ]).then((sum_outward) => {
                                var outward = 0;
                                if (sum_outward[0]) {
                                    var outward = sum_outward[0].totalValue;
                                }

                                res.status(200).send({
                                    status: "success",
                                    token: req.token,
                                    result: response,
                                    stock: Number(inward) - Number(outward),
                                });
                            });
                        });
                    });
            }
        }
    },

    check_office_stock: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["product"] = req.query.product;
            Rate.findOne(where)
                .populate("product")
                .populate("vendor")
                .then((response) => {
                    var where = {};
                    where["inward_office"] = mongoose.Types.ObjectId(req.query.office);
                    where["type"] = 0;
                    where["product"] = mongoose.Types.ObjectId(req.query.product);
                    StockTransactionProduct.aggregate([
                        {
                            $match: where,
                        },
                        {
                            $group: {
                                _id: "_id",
                                totalValue: {
                                    $sum: "$qty",
                                },
                            },
                        },
                    ]).then((sum_inward) => {
                        var inward = 0;
                        if (sum_inward[0]) {
                            var inward = sum_inward[0].totalValue;
                        }

                        var where = {};
                        where["office"] = mongoose.Types.ObjectId(req.query.office);
                        where["type"] = 1;
                        where["product"] = mongoose.Types.ObjectId(req.query.product);
                        StockTransactionProduct.aggregate([
                            {
                                $match: where,
                            },
                            {
                                $group: {
                                    _id: "_id",
                                    totalValue: {
                                        $sum: "$qty",
                                    },
                                },
                            },
                        ]).then((sum_outward) => {
                            var outward = 0;
                            if (sum_outward[0]) {
                                var outward = sum_outward[0].totalValue;
                            }

                            res.status(200).send({
                                status: "success",
                                token: req.token,
                                result: response,
                                stock: Number(inward) - Number(outward),
                            });
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid product id",
                        token: req.token,
                    });
                });
        }
    },

    //// Start Plan ////

    create_plan: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["deleted"] = 0;
            where["name"] = req.body.name;
            Plan.findOne(where)
                .then((response) => {
                    if (response != null) {
                        res.status(200).send({
                            status: "error",
                            message: "Plan exist in the database.",
                        });
                    } else {
                        var plandata = new Plan({
                            name: req.body.name,
                            city: req.body.city.split(","),
                            description: req.body.description,
                            price: req.body.price,
                            day: req.body.day,
                            min_price: req.body.min_price,
                            max_price: req.body.max_price,
                            discount: req.body.discount,
                            point: req.body.point,
                        });

                        plandata.save(function (err, response) {
                            if (err) {
                                res.status(200).send({
                                    status: "error",
                                    message: err,
                                    token: req.token,
                                });
                            } else {
                                res.status(200).send({
                                    status: "success",
                                    message: "Plan has been created successfully.",
                                    data: response,
                                });
                            }
                        });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Office name exist in the database.",
                    });
                });
        }
    },

    plan_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.name && req.query.name != "") {
                where["name"] = {
                    $regex: ".*" + req.query.name,
                    $options: "i",
                };
            }

            if (req.query.active && req.query.active != "") {
                where["active"] = req.query.active;
            }

            where["deleted"] = 0;

            Plan.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .populate("city", "name")
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    Plan.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_plan_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Plan.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Office not found",
                            token: req.token,
                        });
                    } else {
                        if (response.active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        Plan.findOneAndUpdate(
                            where,
                            {
                                active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },
    get_plan: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Plan.findOne(where)
                .populate("city", "name")
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid office id",
                        token: req.token,
                    });
                });
        }
    },

    update_plan: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Plan.findOneAndUpdate(
                where,
                {
                    name: req.body.name,
                    city: req.body.city.split(","),
                    description: req.body.description,
                    price: req.body.price,
                    day: req.body.day,
                    min_price: req.body.min_price,
                    max_price: req.body.max_price,
                    discount: req.body.discount,
                    point: req.body.point,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Office has been updated",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },
    delete_plan: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Plan.deleteOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },
    //// Stop Plan //////

    ///// Start Wallet ///////////

    add_wallet: function (req, res) {
        var where = {};
        where["email"] = req.body.email;
        Users.findOne(where).then((response) => {
            var point = response.subscription && response.subscription.point ? response.subscription.point : 0;
            if (req.body.type == "1") {
                point = Number(point) + Number(req.body.point);
            } else {
                point = Number(point) - Number(req.body.point);
            }

            where["email"] = req.body.email;
            Users.findOneAndUpdate(
                where,
                {
                    subscription: {
                        point: point,
                    },
                },
                {
                    new: true,
                }
            ).exec();

            var Walletdata = new Wallet({
                user: response._id,
                point: req.body.point,
                type: req.body.type,
                note: req.body.note,
            });
            Walletdata.save(function (err, response) {
                if (err) {
                    res.status(200).send({
                        status: "error",
                        message: err,
                        token: req.token,
                    });
                } else {
                    res.status(200).send({
                        status: "success",
                        message: "Wallet data created successfully.",
                    });
                }
            });
        });
    },

    wallet_list: async function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.name && req.query.name != "") {
                where["email"] = {
                    $regex: ".*" + req.query.name,
                    $options: "i",
                };
            }

            var user = await Users.findOne(where);

            var where = {};
            if (user && user.length > 0) {
                where["user"] = response._id;
            }

            var wallet = await Wallet.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .populate("user")
                .sort({
                    created_date: -1,
                });

            var count = await Wallet.find(where).countDocuments;

            res.status(200).send({
                status: "success",
                token: req.token,
                result: wallet,
                totalCount: count,
            });
        }
    },

    delete_wallet: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Wallet.deleteOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    ///// End Wallet ///////////

    ///// Stock Start Users ///////////

    add_vendor2: function (req, res) {
        var where = {};
        where["name"] = req.body.name;
        where["deleted"] = 0;
        Vendor.findOne(where).then((response) => {
            if (response != null) {
                res.status(200).send({
                    status: "error",
                    message: "Vendor exist in the database.",
                });
            } else {
                var VendorData = new Vendor({
                    name: req.body.name,
                    contact_person: req.body.contact_person,
                    note: req.body.note,
                    email: req.body.email,
                    mobile: req.body.mobile,
                    address: req.body.address,
                });
                VendorData.save(function (err, response) {
                    if (err) {
                        res.status(200).send({
                            status: "error",
                            message: err,
                            token: req.token,
                        });
                    } else {
                        res.status(200).send({
                            status: "success",
                            message: "Vendor has been created successfully.",
                        });
                    }
                });
            }
        });
    },

    vendor2_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.name != "") {
                where["name"] = {
                    $regex: ".*" + req.query.name,
                    $options: "i",
                };
            }

            if (req.query.active != "") {
                where["active"] = req.query.active;
            }

            where["deleted"] = 0;

            Vendor.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    Vendor.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_vendor2_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Vendor.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Vendor not found",
                            token: req.token,
                        });
                    } else {
                        if (response.active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        Vendor.findOneAndUpdate(
                            where,
                            {
                                active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    update_vendor2: function (req, res) {
        var where = {};
        where["_id"] = req.body.id;
        var updatedata = {};
        updatedata["name"] = req.body.name;
        updatedata["contact_person"] = req.body.contact_person;
        updatedata["note"] = req.body.note;
        updatedata["email"] = req.body.email;
        updatedata["mobile"] = req.body.mobile;
        updatedata["address"] = req.body.address;
        Vendor.findOneAndUpdate(where, updatedata, {
            new: true,
        })
            .exec()
            .then((response) => {
                res.status(200).send({
                    status: "success",
                    message: "Vendor has been updated",
                    token: req.token,
                });
            });
    },

    get_vendor2: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Vendor.findOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid vendor id",
                        token: req.token,
                    });
                });
        }
    },

    delete_vendor2: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Vendor.findOneAndUpdate(
                where,
                {
                    deleted: 1,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Users has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    ///// End Users ///////////

    /////// Start Stock Categiry ///////

    add_stock_category: function (req, res) {
        if (!req.body.name || req.body.name == "") {
            res.status(200).send({
                status: "error",
                message: "Enter category name",
                token: req.token,
            });
        } else {
            var where = {};
            where["name"] = req.body.name;
            where["deleted"] = 0;
            StockCategory.findOne(where).then((response) => {
                if (response != null) {
                    res.status(200).send({
                        status: "error",
                        message: "Category exist in the database.",
                    });
                } else {
                    var Categorydata = new StockCategory({
                        description: req.body.description,
                        name: req.body.name,
                        parent: req.body.parent == "" ? null : req.body.parent,
                    });
                    Categorydata.save(function (err, response) {
                        if (err) {
                            res.status(200).send({
                                status: "error",
                                message: err,
                                token: req.token,
                            });
                        } else {
                            res.status(200).send({
                                status: "success",
                                message: "Category has been created successfully.",
                            });
                        }
                    });
                }
            });
        }
    },

    stock_category_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.name != "") {
                where["name"] = {
                    $regex: ".*" + req.query.name,
                    $options: "i",
                };
            }

            if (req.query.active != "") {
                where["active"] = req.query.active;
            }

            if (req.query.parent != "") {
                where["parent"] = req.query.parent;
            }

            where["deleted"] = 0;

            StockCategory.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .populate("parent", "name")
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    StockCategory.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_stock_category_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            StockCategory.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Category not found",
                            token: req.token,
                        });
                    } else {
                        if (response.active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        StockCategory.findOneAndUpdate(
                            where,
                            {
                                active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    get_stock_category: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            StockCategory.findOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid category id",
                        token: req.token,
                    });
                });
        }
    },

    delete_stock_category: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            StockCategory.findOneAndUpdate(
                where,
                {
                    deleted: 1,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Category has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    update_stock_category: function (req, res) {
        if (!req.body.name || req.body.name == "") {
            res.status(200).send({
                status: "error",
                message: "Enter category name",
                token: req.token,
            });
        }
        if (!req.body.id || req.body.id == "") {
            res.status(200).send({
                status: "error",
                message: "Enter category id",
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            StockCategory.findOneAndUpdate(
                where,
                {
                    description: req.body.description,
                    name: req.body.name,
                    parent: req.body.parent == "" ? null : req.body.parent,
                    update_date: moment().format(),
                    //file: ""
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Category has been updated",
                        token: req.token,
                    });
                    return;
                });
        }
    },

    parent_stock_category_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["parent"] = null;
            where["active"] = 1;
            where["deleted"] = 0;
            StockCategory.find(where)
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    ///// End Category ///////////

    //// Start Stock Product ////
    add_stock_product: function (req, res) {
        var where = {};
        where["name"] = req.body.name;
        where["deleted"] = 0;
        StockProduct.findOne(where).then((response) => {
            if (response != null) {
                res.status(200).send({
                    status: "error",
                    message: "Product exist in the database.",
                    token: req.token,
                });
            } else {
                var ProductsData = new StockProduct({
                    name: req.body.name,
                    category: req.body.category,
                    sub_category: req.body.sub_category,
                    desc: req.body.desc,
                });
                ProductsData.save(function (err, response) {
                    if (err) {
                        res.status(200).send({
                            status: "error",
                            message: err,
                            token: req.token,
                        });
                    } else {
                        res.status(200).send({
                            status: "success",
                            message: "Product has been created successfully.",
                            token: req.token,
                        });
                    }
                });
            }
        });
    },

    stock_product_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.name != "") {
                where["name"] = {
                    $regex: ".*" + req.query.name + "*",
                    $options: "i",
                };
            }

            if (req.query.category != "") {
                where["category"] = req.query.category;
            }

            if (req.query.sub_category != "") {
                where["sub_category"] = req.query.sub_category;
            }

            where["deleted"] = 0;

            StockProduct.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .populate("category", "name")
                .populate("sub_category", "name")
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    StockProduct.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    all_stock_product_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["active"] = 1;
            where["deleted"] = 0;

            StockProduct.find(where)
                .then((response) => {
                    StockProduct.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_stock_product_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            StockProduct.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Product not found",
                            token: req.token,
                        });
                    } else {
                        if (response.active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        StockProduct.findOneAndUpdate(
                            where,
                            {
                                active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    get_stock_product: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            StockProduct.findOne(where)
                .populate("category", "name")
                .populate("sub_category", "name")

                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid product id",
                        token: req.token,
                    });
                });
        }
    },

    delete_stock_product: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            StockProduct.findOneAndUpdate(
                where,
                {
                    deleted: 1,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Product has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    update_stock_product: function (req, res) {
        var where = {};
        where["_id"] = req.body.id;
        StockProduct.findOneAndUpdate(
            where,
            {
                name: req.body.name,
                category: req.body.category,
                sub_category: req.body.sub_category,
                desc: req.body.desc,
            },
            {
                new: true,
            }
        )
            .exec()
            .then((response) => {
                res.status(200).send({
                    status: "success",
                    message: "Product has been updated",
                    token: req.token,
                });
                return;
            });
    },

    sub_stock_category_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["parent"] = req.body.category_id;
            where["active"] = 1;
            where["deleted"] = 0;
            StockCategory.find(where)
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    //// Stop Stock Product ///

    all_stock_vendor_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["active"] = 1;
            where["deleted"] = 0;
            Vendor.find(where)
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    all_stock_office_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["active"] = 1;
            where["deleted"] = 0;
            Office.find(where)
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    add_inward: function (req, res) {
        var StockTransactionData = new StockTransaction({
            inward_office: req.body.inward_office,
            bill_no: req.body.bill_no,
            bill_date: req.body.bill_date,
            amount: req.body.sub_total,
            note: req.body.note,
        });
        StockTransactionData.save(function (err, response) {
            if (err) {
                res.status(200).send({
                    status: "error",
                    message: err,
                    token: req.token,
                });
            } else {
                var product = JSON.parse(req.body.stock_data);
                var rawDocuments = [];
                var rawDocuments2 = [];

                for (let i = 0; i < product.length; i++) {
                    rawDocuments.push({
                        inward_office: req.body.inward_office,
                        transaction: response._id,
                        product: product[i].product,
                        vendor: product[i].vendor == "" ? null : product[i].vendor,
                        office: product[i].office == "" ? null : product[i].office,
                        category: product[i].category == "" ? null : product[i].category,
                        sub_category: product[i].sub_category == "" ? null : product[i].sub_category,
                        name: product[i].product_name == "" ? null : product[i].product_name,
                        qty: product[i].qty,
                        unit: product[i].unit,
                        rate: product[i].rate,
                        total: Number(product[i].qty) * Number(product[i].rate),
                    });
                }

                for (let i = 0; i < product.length; i++) {
                    if (product[i].office != "") {
                        rawDocuments2.push({
                            transaction: response._id,
                            product: product[i].product,
                            vendor: product[i].vendor == "" ? null : product[i].vendor,
                            outward_office: product[i].office == "" ? null : product[i].office,
                            category: product[i].category == "" ? null : product[i].category,
                            sub_category: product[i].sub_category == "" ? null : product[i].sub_category,
                            name: product[i].product_name == "" ? null : product[i].product_name,
                            qty: product[i].qty,
                            unit: product[i].unit,
                            rate: product[i].rate,
                            total: Number(product[i].qty) * Number(product[i].rate),
                            type: 1,
                        });
                    }
                }

                StockTransactionProduct.insertMany(rawDocuments)
                    .then(function (mongooseDocuments) {
                        StockTransactionProduct.insertMany(rawDocuments2).then(function (mongooseDocuments) {
                            res.status(200).send({
                                status: "success",
                                message: "Created successfully.",
                                token: req.token,
                            });
                        });
                    })
                    .catch(function (err) {
                        res.status(200).send({
                            status: "error",
                            message: err,
                            token: req.token,
                        });
                    });
            }
        });
    },

    inward_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["type"] = 0;
            StockTransaction.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .populate("inward_office")
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    StockTransaction.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    delete_inward: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            StockTransaction.deleteOne(where)
                .then((response) => {
                    StockTransactionProduct.deleteMany(
                        {
                            transaction: req.query.id,
                        },
                        function (err, result) {
                            res.status(200).send({
                                status: "success",
                                token: req.token,
                            });
                        }
                    );
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    get_inward_data: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            StockTransaction.findOne(where)
                .then((response) => {
                    var where = {};
                    where["transaction"] = req.query.id;
                    where["type"] = 0;
                    StockTransactionProduct.find(where)
                        .populate("product")
                        .populate("vendor")
                        .populate("office")
                        .then((product_response) => {
                            res.status(200).send({
                                status: "success",
                                token: req.token,
                                result: {
                                    transaction: response,
                                    product: product_response,
                                },
                            });
                        });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_inward: function (req, res) {
        var where = {};
        where["_id"] = req.body.id;
        StockTransaction.findOneAndUpdate(
            where,
            {
                inward_office: req.body.inward_office,
                bill_no: req.body.bill_no,
                bill_date: req.body.bill_date,
                amount: req.body.sub_total,
                note: req.body.note,
            },
            {
                new: true,
            }
        )
            .exec()
            .then((response) => {
                var where = {};
                where["transaction"] = req.body.id;
                StockTransactionProduct.deleteMany(
                    {
                        transaction: req.body.id,
                    },
                    function (err, result) {
                        var product = JSON.parse(req.body.stock_data);
                        var rawDocuments = [];
                        var rawDocuments2 = [];

                        for (let i = 0; i < product.length; i++) {
                            rawDocuments.push({
                                inward_office: req.body.inward_office,
                                transaction: response._id,
                                product: product[i].product,
                                vendor: product[i].vendor == "" ? null : product[i].vendor,
                                office: product[i].office == "" ? null : product[i].office,
                                category: product[i].category == "" ? null : product[i].category,
                                sub_category: product[i].sub_category == "" ? null : product[i].sub_category,
                                name: product[i].product_name == "" ? null : product[i].product_name,
                                qty: product[i].qty,
                                unit: product[i].unit,
                                rate: product[i].rate,
                                total: Number(product[i].qty) * Number(product[i].rate),
                            });
                        }

                        for (let i = 0; i < product.length; i++) {
                            if (product[i].office != "") {
                                rawDocuments2.push({
                                    transaction: response._id,
                                    product: product[i].product,
                                    vendor: product[i].vendor == "" ? null : product[i].vendor,
                                    outward_office: product[i].office == "" ? null : product[i].office,
                                    category: product[i].category == "" ? null : product[i].category,
                                    sub_category: product[i].sub_category == "" ? null : product[i].sub_category,
                                    name: product[i].product_name == "" ? null : product[i].product_name,
                                    qty: product[i].qty,
                                    unit: product[i].unit,
                                    rate: product[i].rate,
                                    total: Number(product[i].qty) * Number(product[i].rate),
                                    type: 1,
                                });
                            }
                        }

                        StockTransactionProduct.insertMany(rawDocuments)
                            .then(function (mongooseDocuments) {
                                StockTransactionProduct.insertMany(rawDocuments2).then(function (outward_response) {
                                    res.status(200).send({
                                        status: "success",
                                        message: "Transaction has been updated",
                                        token: req.token,
                                    });
                                    return;
                                });
                            })
                            .catch(function (err) {
                                res.status(200).send({
                                    status: "error",
                                    message: err,
                                    token: req.token,
                                });
                            });
                    }
                );
            });
    },

    add_outward: function (req, res) {
        var StockTransactionData = new StockTransaction({
            outward_office: req.body.outward_office,
            bill_no: req.body.bill_no,
            bill_date: req.body.bill_date,
            amount: req.body.sub_total,
            note: req.body.note,
            type: 1,
        });
        StockTransactionData.save(function (err, response) {
            if (err) {
                res.status(200).send({
                    status: "error",
                    message: err,
                    token: req.token,
                });
            } else {
                var product = JSON.parse(req.body.stock_data);
                var rawDocuments = [];
                var rawDocuments2 = [];

                for (let i = 0; i < product.length; i++) {
                    if (product[i].office != "") {
                        rawDocuments.push({
                            inward_office: product[i].office == "" ? null : product[i].office,
                            transaction: response._id,
                            product: product[i].product,
                            vendor: product[i].vendor == "" ? null : product[i].vendor,
                            category: product[i].category == "" ? null : product[i].category,
                            sub_category: product[i].sub_category == "" ? null : product[i].sub_category,
                            name: product[i].product_name == "" ? null : product[i].product_name,
                            qty: product[i].qty,
                            unit: product[i].unit,
                            rate: product[i].rate,
                            total: Number(product[i].qty) * Number(product[i].rate),
                            type: 0,
                        });
                    }
                }

                for (let i = 0; i < product.length; i++) {
                    rawDocuments2.push({
                        outward_office: req.body.outward_office,
                        transaction: response._id,
                        product: product[i].product,
                        vendor: product[i].vendor == "" ? null : product[i].vendor,
                        category: product[i].category == "" ? null : product[i].category,
                        sub_category: product[i].sub_category == "" ? null : product[i].sub_category,
                        name: product[i].product_name == "" ? null : product[i].product_name,
                        qty: product[i].qty,
                        unit: product[i].unit,
                        rate: product[i].rate,
                        total: Number(product[i].qty) * Number(product[i].rate),
                        type: 1,
                    });
                }

                StockTransactionProduct.insertMany(rawDocuments)
                    .then(function (inward_response) {
                        StockTransactionProduct.insertMany(rawDocuments2).then(function (outward_response) {
                            res.status(200).send({
                                status: "success",
                                message: "Product has been created successfully.",
                                token: req.token,
                            });
                        });
                    })
                    .catch(function (err) {
                        res.status(200).send({
                            status: "error",
                            message: err,
                            token: req.token,
                        });
                    });
            }
        });
    },

    outward_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["type"] = 1;
            StockTransaction.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .populate("outward_office")
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    StockTransaction.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    get_outward_data: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            StockTransaction.findOne(where)
                .then((response) => {
                    var where = {};
                    where["transaction"] = req.query.id;
                    where["type"] = 0;
                    StockTransactionProduct.find(where)
                        .populate("product")
                        .populate("vendor")
                        .populate("office")
                        .then((product_response) => {
                            res.status(200).send({
                                status: "success",
                                token: req.token,
                                result: {
                                    transaction: response,
                                    product: product_response,
                                },
                            });
                        });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_outward: function (req, res) {
        var where = {};
        where["_id"] = req.body.id;
        StockTransaction.findOneAndUpdate(
            where,
            {
                inward_office: req.body.inward_office,
                bill_no: req.body.bill_no,
                bill_date: req.body.bill_date,
                amount: req.body.sub_total,
                note: req.body.note,
            },
            {
                new: true,
            }
        )
            .exec()
            .then((response) => {
                var where = {};
                where["transaction"] = req.body.id;
                StockTransactionProduct.deleteMany(
                    {
                        transaction: req.body.id,
                    },
                    function (err, result) {
                        var product = JSON.parse(req.body.stock_data);
                        var rawDocuments = [];
                        var rawDocuments2 = [];
                        for (let i = 0; i < product.length; i++) {
                            if (product[i].office != "") {
                                rawDocuments.push({
                                    inward_office: product[i].office == "" ? null : product[i].office,
                                    transaction: response._id,
                                    product: product[i].product,
                                    vendor: product[i].vendor == "" ? null : product[i].vendor,
                                    category: product[i].category == "" ? null : product[i].category,
                                    sub_category: product[i].sub_category == "" ? null : product[i].sub_category,
                                    name: product[i].product_name == "" ? null : product[i].product_name,
                                    qty: product[i].qty,
                                    unit: product[i].unit,
                                    rate: product[i].rate,
                                    total: Number(product[i].qty) * Number(product[i].rate),
                                    type: 0,
                                });
                            }
                        }

                        for (let i = 0; i < product.length; i++) {
                            rawDocuments2.push({
                                outward_office: req.body.outward_office,
                                transaction: response._id,
                                product: product[i].product,
                                vendor: product[i].vendor == "" ? null : product[i].vendor,
                                category: product[i].category == "" ? null : product[i].category,
                                sub_category: product[i].sub_category == "" ? null : product[i].sub_category,
                                name: product[i].product_name == "" ? null : product[i].product_name,
                                qty: product[i].qty,
                                unit: product[i].unit,
                                rate: product[i].rate,
                                total: Number(product[i].qty) * Number(product[i].rate),
                                type: 1,
                            });
                        }

                        StockTransactionProduct.insertMany(rawDocuments)
                            .then(function (mongooseDocuments) {
                                StockTransactionProduct.insertMany(rawDocuments2).then(function (outward_response) {
                                    res.status(200).send({
                                        status: "success",
                                        message: "Product has been updated successfully.",
                                        token: req.token,
                                    });
                                });
                            })
                            .catch(function (err) {
                                res.status(200).send({
                                    status: "error",
                                    message: err,
                                    token: req.token,
                                });
                            });
                    }
                );
            });
    },

    delete_outward: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            StockTransaction.deleteOne(where)
                .then((response) => {
                    StockTransactionProduct.deleteMany(
                        {
                            transaction: req.query.id,
                        },
                        function (err, result) {
                            res.status(200).send({
                                status: "success",
                                token: req.token,
                            });
                        }
                    );
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    stock_report: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            if (req.query.office && req.query.office != "") {
                where["inward_office"] = mongoose.Types.ObjectId(req.query.office);
            }

            if (req.query.category && req.query.category != "") {
                where["category"] = mongoose.Types.ObjectId(req.query.category);
            }
            if (req.query.sub_category && req.query.sub_category != "") {
                where["sub_category"] = mongoose.Types.ObjectId(req.query.sub_category);
            }

            if (req.query.name && req.query.name != "") {
                where["name"] = req.query.name;
            }

            where["type"] = 0;
            StockTransactionProduct.aggregate([
                {
                    $match: where,
                },
                {
                    $group: {
                        _id: "$product",
                        obj: { $push: { unit: "$unit", rate: "$rate" } },
                        qty: { $sum: "$qty" },
                    },
                },
                { $project: { product: "$_id", qty: 1, _id: 0, document: "$$ROOT" } },
                {
                    $lookup: {
                        from: "stock_products",
                        localField: "product",
                        foreignField: "_id",
                        as: "patient_doc",
                    },
                },
            ]).then((inward_response) => {
                //////////////
                var where = {};
                if (req.query.office && req.query.office != "") {
                    where["outward_office"] = mongoose.Types.ObjectId(req.query.office);
                }

                if (req.query.category && req.query.category != "") {
                    where["category"] = mongoose.Types.ObjectId(req.query.category);
                }
                if (req.query.sub_category && req.query.sub_category != "") {
                    where["sub_category"] = mongoose.Types.ObjectId(req.query.sub_category);
                }

                if (req.query.start && req.query.start != "" && req.query.end && req.query.end != "") {
                    where["created_date"] = {
                        $gte: new Date(req.query.start),
                        $lt: new Date(req.query.end),
                    };
                }

                if (req.query.name && req.query.name != "") {
                    where["name"] = req.query.name;
                }

                where["type"] = 1;
                StockTransactionProduct.aggregate([
                    {
                        $match: where,
                    },
                    {
                        $group: {
                            _id: "$product",
                            obj: { $push: { unit: "$unit", rate: "$rate" } },
                            qty: { $sum: "$qty" },
                        },
                    },
                    { $project: { product: "$_id", qty: 1, _id: 0, document: "$$ROOT" } },
                    {
                        $lookup: {
                            from: "stock_products",
                            localField: "product",
                            foreignField: "_id",
                            as: "patient_doc",
                        },
                    },
                ]).then((outward_response) => {
                    res.status(200).send({
                        inward_response: inward_response,
                        outward_response: outward_response,
                        status: "success",
                        token: req.token,
                    });
                });
            });
        }
    },

    sales_report_chart: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["status"] = "delivered";

            CheckoutModel.aggregate([
                { $match: where },
                {
                    $group: {
                        _id: {
                            year: { $year: { date: "$created_date" } },
                            month: { $month: { date: "$created_date" } },
                        },
                        sum: { $sum: { $toDouble: "$finalprice" } },
                    },
                },
                {
                    $sort: {
                        "_id.year": 1,
                        "_id.month": 1,
                    },
                },
            ]).then((inward_response) => {
                res.status(200).send({
                    result: inward_response,
                    status: "success",
                    token: req.token,
                });
                //////////////
            });
        }
    },

    /////// Start ExpenseCategories ///////

    add_expense_category: function (req, res) {
        var where = {};
        where["name"] = req.body.name;
        where["deleted"] = 0;
        ExpenseCategories.findOne(where).then((response) => {
            if (response != null) {
                res.status(200).send({
                    status: "error",
                    message: "Expense category exist in the database.",
                });
            } else {
                var ExpenseCategoriesdata = new ExpenseCategories({
                    description: req.body.description,
                    name: req.body.name,
                    parent: req.body.parent == "" ? null : req.body.parent,
                });
                ExpenseCategoriesdata.save(function (err, response) {
                    if (err) {
                        res.status(200).send({
                            status: "error",
                            message: err,
                            token: req.token,
                        });
                    } else {
                        res.status(200).send({
                            status: "success",
                            message: "Expense category has been created successfully.",
                        });
                    }
                });
            }
        });
    },

    expense_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.name != "") {
                where["name"] = {
                    $regex: ".*" + req.query.name,
                    $options: "i",
                };
            }

            if (req.query.active != "") {
                where["active"] = req.query.active;
            }

            if (req.query.parent != "") {
                where["parent"] = req.query.parent;
            }

            where["deleted"] = 0;

            ExpenseCategories.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .populate("parent", "name")
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    ExpenseCategories.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_expense_category_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            ExpenseCategories.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Expense category not found",
                            token: req.token,
                        });
                    } else {
                        if (response.active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        ExpenseCategories.findOneAndUpdate(
                            where,
                            {
                                active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    get_expense_category: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            ExpenseCategories.findOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid category id",
                        token: req.token,
                    });
                });
        }
    },

    delete_expense_category: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            ExpenseCategories.findOneAndUpdate(
                where,
                {
                    deleted: 1,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Expense category has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    update_expense_category: function (req, res) {
        if (!req.body.name || req.body.name == "") {
            res.status(200).send({
                status: "error",
                message: "Enter expense category name",
                token: req.token,
            });
        }
        if (!req.body.id || req.body.id == "") {
            res.status(200).send({
                status: "error",
                message: "Enter expense category id",
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            ExpenseCategories.findOneAndUpdate(
                where,
                {
                    description: req.body.description,
                    name: req.body.name,
                    parent: req.body.parent == "" ? null : req.body.parent,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Expense category has been updated",
                        token: req.token,
                    });
                    return;
                });
        }
    },

    parent_expense_category_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["parent"] = null;
            where["active"] = 1;
            where["deleted"] = 0;
            ExpenseCategories.find(where)
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    ///// End Expense Categories ///////////

    /////// Start Cargo Expense ///////

    add_cargo_expense: function (req, res) {
        multi_upload(req, res, function (error) {
            if (error) {
                res.status(200).send({
                    status: "error",
                    message: error.code,
                    token: req.token,
                });
            } else {
                ////
                if (req.files.length > 0) {
                    var file = [];
                    req.files.forEach(function (arrayItem) {
                        file.push(arrayItem);
                    });

                    var CargoExpenseData = new CargoExpense({
                        category: req.query.category,
                        sub_category: req.query.sub_category,
                        office: req.query.office,
                        booking: req.query.booking,
                        from_city: req.query.from_city,
                        to_city: req.query.to_city,
                        challan_no: req.query.challan_no,
                        bag_no: req.query.no_of_bag,
                        weight: req.query.weight_in_kg,
                        rate: req.query.rate,
                        amount: req.query.amount,
                        date_of_payment: req.query.date_of_payment,
                        comment: req.query.comment,
                        added_by: req.query.added_by,
                        file: file,
                        office_type: req.query.office_type,
                    });
                    CargoExpenseData.save(function (err, response) {
                        if (err) {
                            res.status(200).send({
                                status: "error",
                                message: err,
                                token: req.token,
                            });
                        } else {
                            res.status(200).send({
                                status: "success",
                                message: "Cargo expense has been created successfully.",
                            });
                        }
                    });
                } else {
                    var CargoExpenseData = new CargoExpense({
                        category: req.query.category,
                        sub_category: req.query.sub_category,
                        office: req.query.office,
                        booking: req.query.booking,
                        from_city: req.query.from_city,
                        to_city: req.query.to_city,
                        challan_no: req.query.challan_no,
                        bag_no: req.query.no_of_bag,
                        weight: req.query.weight_in_kg,
                        rate: req.query.rate,
                        amount: req.query.amount,
                        date_of_payment: req.query.date_of_payment,
                        comment: req.query.comment,
                        added_by: req.query.added_by,
                        office_type: req.query.office_type,
                    });
                    CargoExpenseData.save(function (err, response) {
                        if (err) {
                            res.status(200).send({
                                status: "error",
                                message: err,
                                token: req.token,
                            });
                        } else {
                            res.status(200).send({
                                status: "success",
                                message: "Cargo expense has been created successfully.",
                            });
                        }
                    });
                }
            }
        });
    },

    cargo_expense_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.from_city && req.query.from_city != "") {
                where["from_city"] = req.query.from_city;
            }

            if (req.query.to_city && req.query.to_city != "") {
                where["to_city"] = req.query.to_city;
            }

            if (req.query.start_date && req.query.start_date != "" && req.query.end_date && req.query.end_date != "") {
                where["created_date"] = {
                    $gte: new Date(req.query.start_date),
                    $lt: new Date(req.query.end_date),
                };
            }

            if (req.query.added_by && req.query.added_by != "") {
                where["added_by"] = req.query.added_by;
            }

            if (req.query.office && req.query.office != "") {
                where["office"] = req.query.office;
            }

            if (req.query.category && req.query.category != "") {
                where["category"] = req.query.category;
            }

            if (req.query.sub_category && req.query.sub_category != "") {
                where["sub_category"] = req.query.sub_category;
            }

            where["deleted"] = 0;

            CargoExpense.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .populate("office")
                .populate("added_by")
                .populate("from_city")
                .populate("to_city")
                .populate("category")
                .populate("sub_category")
                .populate("action_by")
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    CargoExpense.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_cargo_expense_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            CargoExpense.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Cargo expense category not found",
                            token: req.token,
                        });
                    } else {
                        CargoExpense.findOneAndUpdate(
                            where,
                            {
                                active: req.body.active,
                                reason: req.body.reason,
                                action_by: req.body.action_by,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    get_cargo_expense: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            CargoExpense.findOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid expense id",
                        token: req.token,
                    });
                });
        }
    },

    delete_cargo_expense: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            CargoExpense.findOneAndUpdate(
                where,
                {
                    deleted: 1,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Cargo expense category has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    update_cargo_expense: function (req, res) {
        multi_upload(req, res, function (error) {
            if (error) {
                res.status(200).send({
                    status: "error",
                    message: error.code,
                    token: req.token,
                });
            } else {
                ////
                if (req.files.length > 0) {
                    var where = {};
                    where["_id"] = req.query.id;
                    CargoExpense.findOne(where).then((response) => {
                        var file = response.file;
                        req.files.forEach(function (arrayItem) {
                            file.push(arrayItem);
                        });

                        var where = {};
                        where["_id"] = req.query.id;
                        CargoExpense.findOneAndUpdate(
                            where,
                            {
                                category: req.query.category,
                                sub_category: req.query.sub_category,
                                office: req.query.office,
                                booking: req.query.booking,
                                from_city: req.query.from_city,
                                to_city: req.query.to_city,
                                challan_no: req.query.challan_no,
                                bag_no: req.query.no_of_bag,
                                weight: req.query.weight_in_kg,
                                rate: req.query.rate,
                                amount: req.query.amount,
                                date_of_payment: req.query.date_of_payment,
                                comment: req.query.comment,
                                file: file,
                                office_type: req.query.office_type,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Expense category has been updated",
                                    token: req.token,
                                });
                                return;
                            });
                    });
                } else {
                    var where = {};
                    where["_id"] = req.query.id;
                    CargoExpense.findOneAndUpdate(
                        where,
                        {
                            category: req.query.category,
                            sub_category: req.query.sub_category,
                            office: req.query.office,
                            booking: req.query.booking,
                            from_city: req.query.from_city,
                            to_city: req.query.to_city,
                            challan_no: req.query.challan_no,
                            bag_no: req.query.no_of_bag,
                            weight: req.query.weight_in_kg,
                            rate: req.query.rate,
                            amount: req.query.amount,
                            date_of_payment: req.query.date_of_payment,
                            comment: req.query.comment,
                            office_type: req.query.office_type,
                        },
                        {
                            new: true,
                        }
                    )
                        .exec()
                        .then((response) => {
                            res.status(200).send({
                                status: "success",
                                message: "Expense category has been updated",
                                token: req.token,
                            });
                            return;
                        });
                }
            }
        });
    },

    delete_cargo_expense_file: function (req, res) {
        var file = req.query.file.split("/").pop().split("#")[0].split("?")[0];
        var params = {
            Bucket: "swagbag-files",
            Key: file,
        };

        s3.deleteObject(params, function (err, data) {
            if (err) {
                res.status(200).send({
                    status: "error",
                    message: err.stack,
                    token: req.token,
                });
            } else {
                var where = {};
                where["_id"] = req.query.id;
                CargoExpense.findOne(where).then((response) => {
                    var file = response.file;
                    file.splice(req.query.index, 1);

                    var where = {};
                    where["_id"] = req.query.id;
                    CargoExpense.findOneAndUpdate(
                        where,
                        {
                            file: file,
                        },
                        {
                            new: true,
                        }
                    )
                        .exec()
                        .then((response) => {
                            res.status(200).send({
                                status: "success",
                                message: "File has been deleted",
                                token: req.token,
                            });
                            return;
                        });
                });
            }
        });
    },
    ///// End Cargo Expense ///////////

    /////// Start Pickup Expense ///////

    add_pickup_expense: function (req, res) {
        multi_upload(req, res, function (error) {
            if (error) {
                res.status(200).send({
                    status: "error",
                    message: error.code,
                    token: req.token,
                });
            } else {
                ////
                if (req.files.length > 0) {
                    var file = [];
                    req.files.forEach(function (arrayItem) {
                        file.push(arrayItem);
                    });

                    var PickupExpenseData = new PickupExpense({
                        category: req.query.category,
                        sub_category: req.query.sub_category,
                        name: req.query.name,
                        head: req.query.head,
                        city: req.query.city,
                        office: req.query.office,
                        bag_no: req.query.no_of_bag,
                        weight: req.query.weight_in_kg,
                        kilomiter: req.query.kilomiter,
                        amount: req.query.amount,
                        date_of_payment: req.query.date_of_payment,
                        comment: req.query.comment,
                        added_by: req.query.added_by,
                        file: file,
                        office_type: req.query.office_type,
                    });
                    PickupExpenseData.save(function (err, response) {
                        if (err) {
                            res.status(200).send({
                                status: "error",
                                message: err,
                                token: req.token,
                            });
                        } else {
                            res.status(200).send({
                                status: "success",
                                message: "Pickup expense has been created successfully.",
                            });
                        }
                    });
                } else {
                    var PickupExpenseData = new PickupExpense({
                        category: req.query.category,
                        sub_category: req.query.sub_category,
                        name: req.query.name,
                        head: req.query.head,
                        city: req.query.city,
                        office: req.query.office,
                        bag_no: req.query.no_of_bag,
                        weight: req.query.weight_in_kg,
                        kilomiter: req.query.kilomiter,
                        amount: req.query.amount,
                        date_of_payment: req.query.date_of_payment,
                        comment: req.query.comment,
                        added_by: req.query.added_by,
                        office_type: req.query.office_type,
                    });
                    PickupExpenseData.save(function (err, response) {
                        if (err) {
                            res.status(200).send({
                                status: "error",
                                message: err,
                                token: req.token,
                            });
                        } else {
                            res.status(200).send({
                                status: "success",
                                message: "Pickup expense has been created successfully.",
                            });
                        }
                    });
                }
            }
        });
    },

    pickup_expense_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.city && req.query.city != "") {
                where["city"] = req.query.city;
            }

            if (req.query.start_date && req.query.start_date != "" && req.query.end_date && req.query.end_date != "") {
                where["created_date"] = {
                    $gte: new Date(req.query.start_date),
                    $lt: new Date(req.query.end_date),
                };
            }

            if (req.query.added_by && req.query.added_by != "") {
                where["added_by"] = req.query.added_by;
            }

            if (req.query.office && req.query.office != "") {
                where["office"] = req.query.office;
            }

            if (req.query.category && req.query.category != "") {
                where["category"] = req.query.category;
            }

            if (req.query.sub_category && req.query.sub_category != "") {
                where["sub_category"] = req.query.sub_category;
            }

            where["deleted"] = 0;

            PickupExpense.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .populate("office")
                .populate("added_by")
                .populate("city")
                .populate("category")
                .populate("sub_category")
                .populate("action_by")
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    PickupExpense.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_pickup_expense_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            PickupExpense.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Pickup expense category not found",
                            token: req.token,
                        });
                    } else {
                        PickupExpense.findOneAndUpdate(
                            where,
                            {
                                active: req.body.active,
                                reason: req.body.reason,
                                action_by: req.body.action_by,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    get_pickup_expense: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            PickupExpense.findOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid expense id",
                        token: req.token,
                    });
                });
        }
    },

    delete_pickup_expense: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            PickupExpense.findOneAndUpdate(
                where,
                {
                    deleted: 1,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Pickup expense category has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    update_pickup_expense: function (req, res) {
        multi_upload(req, res, function (error) {
            if (error) {
                res.status(200).send({
                    status: "error",
                    message: error.code,
                    token: req.token,
                });
            } else {
                ////
                if (req.files.length > 0) {
                    var where = {};
                    where["_id"] = req.query.id;
                    PickupExpense.findOne(where).then((response) => {
                        var file = response.file;
                        req.files.forEach(function (arrayItem) {
                            file.push(arrayItem);
                        });

                        var where = {};
                        where["_id"] = req.query.id;
                        PickupExpense.findOneAndUpdate(
                            where,
                            {
                                category: req.query.category,
                                sub_category: req.query.sub_category,
                                name: req.query.name,
                                head: req.query.head,
                                city: req.query.city,
                                office: req.query.office,
                                bag_no: req.query.no_of_bag,
                                weight: req.query.weight_in_kg,
                                kilomiter: req.query.kilomiter,
                                amount: req.query.amount,
                                date_of_payment: req.query.date_of_payment,
                                comment: req.query.comment,
                                added_by: req.query.added_by,
                                file: file,
                                office_type: req.query.office_type,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Pickup category has been updated",
                                    token: req.token,
                                });
                                return;
                            });
                    });
                } else {
                    var where = {};
                    where["_id"] = req.query.id;
                    PickupExpense.findOneAndUpdate(
                        where,
                        {
                            category: req.query.category,
                            sub_category: req.query.sub_category,
                            name: req.query.name,
                            head: req.query.head,
                            city: req.query.city,
                            office: req.query.office,
                            bag_no: req.query.no_of_bag,
                            weight: req.query.weight_in_kg,
                            kilomiter: req.query.kilomiter,
                            amount: req.query.amount,
                            date_of_payment: req.query.date_of_payment,
                            comment: req.query.comment,
                            added_by: req.query.added_by,
                            office_type: req.query.office_type,
                        },
                        {
                            new: true,
                        }
                    )
                        .exec()
                        .then((response) => {
                            res.status(200).send({
                                status: "success",
                                message: "Pickup has been updated",
                                token: req.token,
                            });
                            return;
                        });
                }
            }
        });
    },

    delete_pickup_expense_file: function (req, res) {
        var file = req.query.file.split("/").pop().split("#")[0].split("?")[0];
        var params = {
            Bucket: "swagbag-files",
            Key: file,
        };

        s3.deleteObject(params, function (err, data) {
            if (err) {
                res.status(200).send({
                    status: "error",
                    message: err.stack,
                    token: req.token,
                });
            } else {
                var where = {};
                where["_id"] = req.query.id;
                PickupExpense.findOne(where).then((response) => {
                    var file = response.file;
                    file.splice(req.query.index, 1);

                    var where = {};
                    where["_id"] = req.query.id;
                    PickupExpense.findOneAndUpdate(
                        where,
                        {
                            file: file,
                        },
                        {
                            new: true,
                        }
                    )
                        .exec()
                        .then((response) => {
                            res.status(200).send({
                                status: "success",
                                message: "File has been deleted",
                                token: req.token,
                            });
                            return;
                        });
                });
            }
        });
    },
    ///// End Pickup Expense ///////////

    /////// Start Other Expense ///////

    add_other_expense: function (req, res) {
        multi_upload(req, res, function (error) {
            if (error) {
                res.status(200).send({
                    status: "error",
                    message: error.code,
                    token: req.token,
                });
            } else {
                ////
                if (req.files.length > 0) {
                    var file = [];
                    req.files.forEach(function (arrayItem) {
                        file.push(arrayItem);
                    });

                    var OtherExpenseData = new OtherExpense({
                        number: req.query.number,
                        name: req.query.name,
                        category: req.query.category,
                        sub_category: req.query.sub_category,
                        city: req.query.city,
                        office: req.query.office,
                        total_payment: req.query.total_payment,
                        amount: req.query.amount,
                        date_of_payment: req.query.date_of_payment,
                        comment: req.query.comment,
                        added_by: req.query.added_by,
                        file: file,
                        office_type: req.query.office_type,
                    });
                    OtherExpenseData.save(function (err, response) {
                        if (err) {
                            res.status(200).send({
                                status: "error",
                                message: err,
                                token: req.token,
                            });
                        } else {
                            res.status(200).send({
                                status: "success",
                                message: "Other expense has been created successfully.",
                            });
                        }
                    });
                } else {
                    var OtherExpenseData = new OtherExpense({
                        number: req.query.number,
                        name: req.query.name,
                        category: req.query.category,
                        sub_category: req.query.sub_category,
                        city: req.query.city,
                        office: req.query.office,
                        total_payment: req.query.total_payment,
                        amount: req.query.amount,
                        date_of_payment: req.query.date_of_payment,
                        comment: req.query.comment,
                        added_by: req.query.added_by,
                        office_type: req.query.office_type,
                    });
                    OtherExpenseData.save(function (err, response) {
                        if (err) {
                            res.status(200).send({
                                status: "error",
                                message: err,
                                token: req.token,
                            });
                        } else {
                            res.status(200).send({
                                status: "success",
                                message: "Other expense has been created successfully.",
                            });
                        }
                    });
                }
            }
        });
    },

    other_expense_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.city && req.query.city != "") {
                where["city"] = req.query.city;
            }

            if (req.query.start_date && req.query.start_date != "" && req.query.end_date && req.query.end_date != "") {
                where["created_date"] = {
                    $gte: new Date(req.query.start_date),
                    $lt: new Date(req.query.end_date),
                };
            }

            if (req.query.added_by && req.query.added_by != "") {
                where["added_by"] = req.query.added_by;
            }

            if (req.query.office && req.query.office != "") {
                where["office"] = req.query.office;
            }

            where["deleted"] = 0;

            OtherExpense.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .populate("office")
                .populate("category")
                .populate("sub_category")
                .populate("city")
                .populate("added_by")
                .populate("action_by")
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    OtherExpense.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_other_expense_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            OtherExpense.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Other expense category not found",
                            token: req.token,
                        });
                    } else {
                        OtherExpense.findOneAndUpdate(
                            where,
                            {
                                active: req.body.active,
                                reason: req.body.reason,
                                action_by: req.body.action_by,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    get_other_expense: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            OtherExpense.findOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid expense id",
                        token: req.token,
                    });
                });
        }
    },

    delete_other_expense: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            OtherExpense.findOneAndUpdate(
                where,
                {
                    deleted: 1,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Other expense category has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    update_other_expense: function (req, res) {
        multi_upload(req, res, function (error) {
            if (error) {
                res.status(200).send({
                    status: "error",
                    message: error.code,
                    token: req.token,
                });
            } else {
                ////
                if (req.files.length > 0) {
                    var where = {};
                    where["_id"] = req.query.id;
                    OtherExpense.findOne(where).then((response) => {
                        var file = response.file;
                        req.files.forEach(function (arrayItem) {
                            file.push(arrayItem);
                        });

                        var where = {};
                        where["_id"] = req.query.id;
                        OtherExpense.findOneAndUpdate(
                            where,
                            {
                                number: req.query.number,
                                name: req.query.name,
                                category: req.query.category,
                                sub_category: req.query.sub_category,
                                city: req.query.city,
                                office: req.query.office,
                                total_payment: req.query.total_payment,
                                amount: req.query.amount,
                                date_of_payment: req.query.date_of_payment,
                                comment: req.query.comment,
                                added_by: req.query.added_by,
                                file: file,
                                office_type: req.query.office_type,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Other category has been updated",
                                    token: req.token,
                                });
                                return;
                            });
                    });
                } else {
                    var where = {};
                    where["_id"] = req.query.id;
                    OtherExpense.findOneAndUpdate(
                        where,
                        {
                            number: req.query.number,
                            name: req.query.name,
                            category: req.query.category,
                            sub_category: req.query.sub_category,
                            city: req.query.city,
                            office: req.query.office,
                            total_payment: req.query.total_payment,
                            amount: req.query.amount,
                            date_of_payment: req.query.date_of_payment,
                            comment: req.query.comment,
                            added_by: req.query.added_by,
                            office_type: req.query.office_type,
                        },
                        {
                            new: true,
                        }
                    )
                        .exec()
                        .then((response) => {
                            res.status(200).send({
                                status: "success",
                                message: "Other has been updated",
                                token: req.token,
                            });
                            return;
                        });
                }
            }
        });
    },

    delete_other_expense_file: function (req, res) {
        var file = req.query.file.split("/").pop().split("#")[0].split("?")[0];
        var params = {
            Bucket: "swagbag-files",
            Key: file,
        };

        s3.deleteObject(params, function (err, data) {
            if (err) {
                res.status(200).send({
                    status: "error",
                    message: err.stack,
                    token: req.token,
                });
            } else {
                var where = {};
                where["_id"] = req.query.id;
                OtherExpense.findOne(where).then((response) => {
                    var file = response.file;
                    file.splice(req.query.index, 1);

                    var where = {};
                    where["_id"] = req.query.id;
                    OtherExpense.findOneAndUpdate(
                        where,
                        {
                            file: file,
                        },
                        {
                            new: true,
                        }
                    )
                        .exec()
                        .then((response) => {
                            res.status(200).send({
                                status: "success",
                                message: "File has been deleted",
                                token: req.token,
                            });
                            return;
                        });
                });
            }
        });
    },
    ///// End Other Expense ///////////

    all_expense_category: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["deleted"] = 0;
            where["active"] = 1;
            where["parent"] = null;
            ExpenseCategories.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    all_expense_sub_category: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["deleted"] = 0;
            where["active"] = 1;

            if (req.query.parent && req.query.parent != "") {
                where["parent"] = req.query.parent;
            }

            ExpenseCategories.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    /////// Start Marketing Expense ///////

    add_marketing_expense: function (req, res) {
        multi_upload(req, res, function (error) {
            if (error) {
                res.status(200).send({
                    status: "error",
                    message: error.code,
                    token: req.token,
                });
            } else {
                ////
                if (req.files.length > 0) {
                    var file = [];
                    req.files.forEach(function (arrayItem) {
                        file.push(arrayItem);
                    });

                    var MarketingExpenseData = new MarketingExpense({
                        category: req.query.category,
                        sub_category: req.query.sub_category,
                        city: req.query.city,
                        office: req.query.office,
                        amount: req.query.amount,
                        date_of_payment: req.query.date_of_payment,
                        comment: req.query.comment,
                        added_by: req.query.added_by,
                        file: file,
                        office_type: req.query.office_type,
                    });
                    MarketingExpenseData.save(function (err, response) {
                        if (err) {
                            res.status(200).send({
                                status: "error",
                                message: err,
                                token: req.token,
                            });
                        } else {
                            res.status(200).send({
                                status: "success",
                                message: "Marketing expense has been created successfully.",
                            });
                        }
                    });
                } else {
                    var MarketingExpenseData = new MarketingExpense({
                        category: req.query.category,
                        sub_category: req.query.sub_category,
                        city: req.query.city,
                        office: req.query.office,
                        amount: req.query.amount,
                        date_of_payment: req.query.date_of_payment,
                        comment: req.query.comment,
                        added_by: req.query.added_by,
                        office_type: req.query.office_type,
                    });
                    MarketingExpenseData.save(function (err, response) {
                        if (err) {
                            res.status(200).send({
                                status: "error",
                                message: err,
                                token: req.token,
                            });
                        } else {
                            res.status(200).send({
                                status: "success",
                                message: "Marketing expense has been created successfully.",
                            });
                        }
                    });
                }
            }
        });
    },

    marketing_expense_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.city && req.query.city != "") {
                where["city"] = req.query.city;
            }

            if (req.query.start_date && req.query.start_date != "" && req.query.end_date && req.query.end_date != "") {
                where["created_date"] = {
                    $gte: new Date(req.query.start_date),
                    $lt: new Date(req.query.end_date),
                };
            }

            if (req.query.added_by && req.query.added_by != "") {
                where["added_by"] = req.query.added_by;
            }

            if (req.query.office && req.query.office != "") {
                where["office"] = req.query.office;
            }

            where["deleted"] = 0;

            MarketingExpense.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .populate("office")
                .populate("category")
                .populate("sub_category")
                .populate("city")
                .populate("added_by")
                .populate("action_by")
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    MarketingExpense.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_marketing_expense_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            MarketingExpense.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Marketing expense category not found",
                            token: req.token,
                        });
                    } else {
                        MarketingExpense.findOneAndUpdate(
                            where,
                            {
                                active: req.body.active,
                                reason: req.body.reason,
                                action_by: req.body.action_by,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    get_marketing_expense: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            MarketingExpense.findOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid expense id",
                        token: req.token,
                    });
                });
        }
    },

    delete_marketing_expense: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            MarketingExpense.findOneAndUpdate(
                where,
                {
                    deleted: 1,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Marketing expense category has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    update_marketing_expense: function (req, res) {
        multi_upload(req, res, function (error) {
            if (error) {
                res.status(200).send({
                    status: "error",
                    message: error.code,
                    token: req.token,
                });
            } else {
                ////
                if (req.files.length > 0) {
                    var where = {};
                    where["_id"] = req.query.id;
                    MarketingExpense.findOne(where).then((response) => {
                        var file = response.file;
                        req.files.forEach(function (arrayItem) {
                            file.push(arrayItem);
                        });

                        var where = {};
                        where["_id"] = req.query.id;
                        MarketingExpense.findOneAndUpdate(
                            where,
                            {
                                category: req.query.category,
                                sub_category: req.query.sub_category,
                                city: req.query.city,
                                office: req.query.office,
                                amount: req.query.amount,
                                date_of_payment: req.query.date_of_payment,
                                comment: req.query.comment,
                                added_by: req.query.added_by,
                                file: file,
                                office_type: req.query.office_type,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Other category has been updated",
                                    token: req.token,
                                });
                                return;
                            });
                    });
                } else {
                    var where = {};
                    where["_id"] = req.query.id;
                    MarketingExpense.findOneAndUpdate(
                        where,
                        {
                            category: req.query.category,
                            sub_category: req.query.sub_category,
                            city: req.query.city,
                            office: req.query.office,
                            amount: req.query.amount,
                            date_of_payment: req.query.date_of_payment,
                            comment: req.query.comment,
                            added_by: req.query.added_by,
                            office_type: req.query.office_type,
                        },
                        {
                            new: true,
                        }
                    )
                        .exec()
                        .then((response) => {
                            res.status(200).send({
                                status: "success",
                                message: "Marketing has been updated",
                                token: req.token,
                            });
                            return;
                        });
                }
            }
        });
    },

    delete_marketing_expense_file: function (req, res) {
        var file = req.query.file.split("/").pop().split("#")[0].split("?")[0];
        var params = {
            Bucket: "swagbag-files",
            Key: file,
        };

        s3.deleteObject(params, function (err, data) {
            if (err) {
                res.status(200).send({
                    status: "error",
                    message: err.stack,
                    token: req.token,
                });
            } else {
                var where = {};
                where["_id"] = req.query.id;
                MarketingExpense.findOne(where).then((response) => {
                    var file = response.file;
                    file.splice(req.query.index, 1);

                    var where = {};
                    where["_id"] = req.query.id;
                    MarketingExpense.findOneAndUpdate(
                        where,
                        {
                            file: file,
                        },
                        {
                            new: true,
                        }
                    )
                        .exec()
                        .then((response) => {
                            res.status(200).send({
                                status: "success",
                                message: "File has been deleted",
                                token: req.token,
                            });
                            return;
                        });
                });
            }
        });
    },
    ///// End Marketing Expense ///////////

    /////// Start Travel Expense ///////

    add_travel_expense: function (req, res) {
        multi_upload(req, res, function (error) {
            if (error) {
                res.status(200).send({
                    status: "error",
                    message: error.code,
                    token: req.token,
                });
            } else {
                ////
                if (req.files.length > 0) {
                    var file = [];
                    req.files.forEach(function (arrayItem) {
                        file.push(arrayItem);
                    });

                    var TravelExpenseData = new TravelExpense({
                        category: req.query.category,
                        sub_category: req.query.sub_category,
                        from_city: req.query.from_city,
                        to_city: req.query.to_city,
                        office: req.query.office,
                        amount: req.query.amount,
                        start: req.query.start,
                        end: req.query.end,
                        date_of_payment: req.query.date_of_payment,
                        comment: req.query.comment,
                        added_by: req.query.added_by,
                        file: file,
                        office_type: req.query.office_type,
                    });
                    TravelExpenseData.save(function (err, response) {
                        if (err) {
                            res.status(200).send({
                                status: "error",
                                message: err,
                                token: req.token,
                            });
                        } else {
                            res.status(200).send({
                                status: "success",
                                message: "Travel expense has been created successfully.",
                            });
                        }
                    });
                } else {
                    var TravelExpenseData = new TravelExpense({
                        category: req.query.category,
                        sub_category: req.query.sub_category,
                        from_city: req.query.from_city,
                        to_city: req.query.to_city,
                        office: req.query.office,
                        amount: req.query.amount,
                        start: req.query.start,
                        end: req.query.end,
                        date_of_payment: req.query.date_of_payment,
                        comment: req.query.comment,
                        added_by: req.query.added_by,
                        office_type: req.query.office_type,
                    });
                    TravelExpenseData.save(function (err, response) {
                        if (err) {
                            res.status(200).send({
                                status: "error",
                                message: err,
                                token: req.token,
                            });
                        } else {
                            res.status(200).send({
                                status: "success",
                                message: "Travel expense has been created successfully.",
                            });
                        }
                    });
                }
            }
        });
    },

    travel_expense_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.city && req.query.city != "") {
                where["city"] = req.query.city;
            }

            if (req.query.start_date && req.query.start_date != "" && req.query.end_date && req.query.end_date != "") {
                where["created_date"] = {
                    $gte: new Date(req.query.start_date),
                    $lt: new Date(req.query.end_date),
                };
            }

            if (req.query.added_by && req.query.added_by != "") {
                where["added_by"] = req.query.added_by;
            }

            if (req.query.office && req.query.office != "") {
                where["office"] = req.query.office;
            }

            where["deleted"] = 0;

            TravelExpense.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .populate("office")
                .populate("category")
                .populate("sub_category")
                .populate("city")
                .populate("added_by")
                .populate("action_by")
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    TravelExpense.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_travel_expense_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            TravelExpense.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Travel expense category not found",
                            token: req.token,
                        });
                    } else {
                        TravelExpense.findOneAndUpdate(
                            where,
                            {
                                active: req.body.active,
                                reason: req.body.reason,
                                action_by: req.body.action_by,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    get_travel_expense: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            TravelExpense.findOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid expense id",
                        token: req.token,
                    });
                });
        }
    },

    delete_travel_expense: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            TravelExpense.findOneAndUpdate(
                where,
                {
                    deleted: 1,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Travel expense category has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    update_travel_expense: function (req, res) {
        multi_upload(req, res, function (error) {
            if (error) {
                res.status(200).send({
                    status: "error",
                    message: error.code,
                    token: req.token,
                });
            } else {
                ////
                if (req.files.length > 0) {
                    var where = {};
                    where["_id"] = req.query.id;
                    TravelExpense.findOne(where).then((response) => {
                        var file = response.file;
                        req.files.forEach(function (arrayItem) {
                            file.push(arrayItem);
                        });

                        var where = {};
                        where["_id"] = req.query.id;
                        TravelExpense.findOneAndUpdate(
                            where,
                            {
                                category: req.query.category,
                                sub_category: req.query.sub_category,
                                from_city: req.query.from_city,
                                to_city: req.query.to_city,
                                office: req.query.office,
                                amount: req.query.amount,
                                start: req.query.start,
                                end: req.query.end,
                                date_of_payment: req.query.date_of_payment,
                                comment: req.query.comment,
                                added_by: req.query.added_by,
                                file: file,
                                office_type: req.query.office_type,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Data has been updated",
                                    token: req.token,
                                });
                                return;
                            });
                    });
                } else {
                    var where = {};
                    where["_id"] = req.query.id;
                    TravelExpense.findOneAndUpdate(
                        where,
                        {
                            category: req.query.category,
                            sub_category: req.query.sub_category,
                            from_city: req.query.from_city,
                            to_city: req.query.to_city,
                            office: req.query.office,
                            amount: req.query.amount,
                            start: req.query.start,
                            end: req.query.end,
                            date_of_payment: req.query.date_of_payment,
                            comment: req.query.comment,
                            added_by: req.query.added_by,
                            office_type: req.query.office_type,
                        },
                        {
                            new: true,
                        }
                    )
                        .exec()
                        .then((response) => {
                            res.status(200).send({
                                status: "success",
                                message: "Travel data has been updated",
                                token: req.token,
                            });
                            return;
                        });
                }
            }
        });
    },

    delete_travel_expense_file: function (req, res) {
        var file = req.query.file.split("/").pop().split("#")[0].split("?")[0];
        var params = {
            Bucket: "swagbag-files",
            Key: file,
        };

        s3.deleteObject(params, function (err, data) {
            if (err) {
                res.status(200).send({
                    status: "error",
                    message: err.stack,
                    token: req.token,
                });
            } else {
                var where = {};
                where["_id"] = req.query.id;
                TravelExpense.findOne(where).then((response) => {
                    var file = response.file;
                    file.splice(req.query.index, 1);

                    var where = {};
                    where["_id"] = req.query.id;
                    TravelExpense.findOneAndUpdate(
                        where,
                        {
                            file: file,
                        },
                        {
                            new: true,
                        }
                    )
                        .exec()
                        .then((response) => {
                            res.status(200).send({
                                status: "success",
                                message: "File has been deleted",
                                token: req.token,
                            });
                            return;
                        });
                });
            }
        });
    },
    ///// End Marketing Expense ///////////

    /////// Start Requisition Expense ///////

    add_requisition_expense: function (req, res) {
        multi_upload(req, res, function (error) {
            if (error) {
                res.status(200).send({
                    status: "error",
                    message: error.code,
                    token: req.token,
                });
            } else {
                ////
                if (req.files.length > 0) {
                    var file = [];
                    req.files.forEach(function (arrayItem) {
                        file.push(arrayItem);
                    });

                    var ExpenseCreditRequisitionData = new ExpenseCreditRequisition({
                        category: req.query.category,
                        sub_category: req.query.sub_category,
                        city: req.query.city,
                        office: req.query.office,
                        amount: req.query.amount,
                        date_of_payment: req.query.date_of_payment,
                        comment: req.query.comment,
                        added_by: req.query.added_by,
                        number: req.query.number,
                        details: req.query.details,
                        file: file,
                        office_type: req.query.office_type,
                    });
                    ExpenseCreditRequisitionData.save(function (err, response) {
                        if (err) {
                            res.status(200).send({
                                status: "error",
                                message: err,
                                token: req.token,
                            });
                        } else {
                            res.status(200).send({
                                status: "success",
                                message: "Marketing expense has been created successfully.",
                            });
                        }
                    });
                } else {
                    var ExpenseCreditRequisitionData = new ExpenseCreditRequisition({
                        category: req.query.category,
                        sub_category: req.query.sub_category,
                        city: req.query.city,
                        office: req.query.office,
                        amount: req.query.amount,
                        date_of_payment: req.query.date_of_payment,
                        comment: req.query.comment,
                        number: req.query.number,
                        details: req.query.details,
                        added_by: req.query.added_by,
                        office_type: req.query.office_type,
                    });
                    ExpenseCreditRequisitionData.save(function (err, response) {
                        if (err) {
                            res.status(200).send({
                                status: "error",
                                message: err,
                                token: req.token,
                            });
                        } else {
                            res.status(200).send({
                                status: "success",
                                message: "Marketing expense has been created successfully.",
                            });
                        }
                    });
                }
            }
        });
    },

    requisition_expense_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.city && req.query.city != "") {
                where["city"] = req.query.city;
            }

            if (req.query.start_date && req.query.start_date != "" && req.query.end_date && req.query.end_date != "") {
                where["created_date"] = {
                    $gte: new Date(req.query.start_date),
                    $lt: new Date(req.query.end_date),
                };
            }

            if (req.query.added_by && req.query.added_by != "") {
                where["added_by"] = req.query.added_by;
            }

            if (req.query.office && req.query.office != "") {
                where["office"] = req.query.office;
            }

            where["deleted"] = 0;

            ExpenseCreditRequisition.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .populate("office")
                .populate("category")
                .populate("sub_category")
                .populate("city")
                .populate("added_by")
                .populate("action_by")
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    ExpenseCreditRequisition.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_requisition_expense_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            ExpenseCreditRequisition.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Marketing expense category not found",
                            token: req.token,
                        });
                    } else {
                        ExpenseCreditRequisition.findOneAndUpdate(
                            where,
                            {
                                active: req.body.active,
                                reason: req.body.reason,
                                action_by: req.body.action_by,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong..",
                        token: req.token,
                    });
                });
        }
    },

    get_requisition_expense: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            ExpenseCreditRequisition.findOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid expense id",
                        token: req.token,
                    });
                });
        }
    },

    delete_requisition_expense: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            ExpenseCreditRequisition.findOneAndUpdate(
                where,
                {
                    deleted: 1,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Marketing expense category has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    update_requisition_expense: function (req, res) {
        multi_upload(req, res, function (error) {
            if (error) {
                res.status(200).send({
                    status: "error",
                    message: error.code,
                    token: req.token,
                });
            } else {
                ////
                if (req.files.length > 0) {
                    var where = {};
                    where["_id"] = req.query.id;
                    ExpenseCreditRequisition.findOne(where).then((response) => {
                        var file = response.file;
                        req.files.forEach(function (arrayItem) {
                            file.push(arrayItem);
                        });

                        var where = {};
                        where["_id"] = req.query.id;
                        ExpenseCreditRequisition.findOneAndUpdate(
                            where,
                            {
                                category: req.query.category,
                                sub_category: req.query.sub_category,
                                city: req.query.city,
                                office: req.query.office,
                                amount: req.query.amount,
                                date_of_payment: req.query.date_of_payment,
                                comment: req.query.comment,
                                added_by: req.query.added_by,
                                number: req.query.number,
                                details: req.query.details,
                                file: file,
                                office_type: req.query.office_type,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Other category has been updated",
                                    token: req.token,
                                });
                                return;
                            });
                    });
                } else {
                    var where = {};
                    where["_id"] = req.query.id;
                    ExpenseCreditRequisition.findOneAndUpdate(
                        where,
                        {
                            category: req.query.category,
                            sub_category: req.query.sub_category,
                            city: req.query.city,
                            office: req.query.office,
                            amount: req.query.amount,
                            date_of_payment: req.query.date_of_payment,
                            comment: req.query.comment,
                            number: req.query.number,
                            details: req.query.details,
                            added_by: req.query.added_by,
                            office_type: req.query.office_type,
                        },
                        {
                            new: true,
                        }
                    )
                        .exec()
                        .then((response) => {
                            res.status(200).send({
                                status: "success",
                                message: "Marketing has been updated",
                                token: req.token,
                            });
                            return;
                        });
                }
            }
        });
    },

    delete_requisition_expense_file: function (req, res) {
        var file = req.query.file.split("/").pop().split("#")[0].split("?")[0];
        var params = {
            Bucket: "swagbag-files",
            Key: file,
        };

        s3.deleteObject(params, function (err, data) {
            if (err) {
                res.status(200).send({
                    status: "error",
                    message: err.stack,
                    token: req.token,
                });
            } else {
                var where = {};
                where["_id"] = req.query.id;
                ExpenseCreditRequisition.findOne(where).then((response) => {
                    var file = response.file;
                    file.splice(req.query.index, 1);

                    var where = {};
                    where["_id"] = req.query.id;
                    ExpenseCreditRequisition.findOneAndUpdate(
                        where,
                        {
                            file: file,
                        },
                        {
                            new: true,
                        }
                    )
                        .exec()
                        .then((response) => {
                            res.status(200).send({
                                status: "success",
                                message: "File has been deleted",
                                token: req.token,
                            });
                            return;
                        });
                });
            }
        });
    },
    ///// End Requisition Expense ///////////

    /////// Start COD Requisition Expense ///////

    add_cod_expense: function (req, res) {
        multi_upload(req, res, function (error) {
            if (error) {
                res.status(200).send({
                    status: "error",
                    message: error.code,
                    token: req.token,
                });
            } else {
                ////
                if (req.files.length > 0) {
                    var file = [];
                    req.files.forEach(function (arrayItem) {
                        file.push(arrayItem);
                    });

                    var CodPaymentData = new CodPayment({
                        category: req.query.category,
                        sub_category: req.query.sub_category,
                        city: req.query.city,
                        office: req.query.office,
                        amount: req.query.amount,
                        date_of_payment: req.query.date_of_payment,
                        comment: req.query.comment,
                        added_by: req.query.added_by,
                        number: req.query.number,
                        delivery_boy: req.query.delivery_boy,
                        payment_recvied: req.query.payment_recvied,
                        file: file,
                        office_type: req.query.office_type,
                    });
                    CodPaymentData.save(function (err, response) {
                        if (err) {
                            res.status(200).send({
                                status: "error",
                                message: err,
                                token: req.token,
                            });
                        } else {
                            res.status(200).send({
                                status: "success",
                                message: "Marketing expense has been created successfully.",
                            });
                        }
                    });
                } else {
                    var CodPaymentData = new CodPayment({
                        category: req.query.category,
                        sub_category: req.query.sub_category,
                        city: req.query.city,
                        office: req.query.office,
                        amount: req.query.amount,
                        date_of_payment: req.query.date_of_payment,
                        comment: req.query.comment,
                        number: req.query.number,
                        delivery_boy: req.query.delivery_boy,
                        payment_recvied: req.query.payment_recvied,
                        added_by: req.query.added_by,
                        delivery_boy: req.query.delivery_boy,
                        office_type: req.query.office_type,
                    });
                    CodPaymentData.save(function (err, response) {
                        if (err) {
                            res.status(200).send({
                                status: "error",
                                message: err,
                                token: req.token,
                            });
                        } else {
                            res.status(200).send({
                                status: "success",
                                message: "Marketing expense has been created successfully.",
                            });
                        }
                    });
                }
            }
        });
    },

    cod_expense_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.city && req.query.city != "") {
                where["city"] = req.query.city;
            }

            if (req.query.start_date && req.query.start_date != "" && req.query.end_date && req.query.end_date != "") {
                where["created_date"] = {
                    $gte: new Date(req.query.start_date),
                    $lt: new Date(req.query.end_date),
                };
            }

            if (req.query.added_by && req.query.added_by != "") {
                where["added_by"] = req.query.added_by;
            }

            if (req.query.office && req.query.office != "") {
                where["office"] = req.query.office;
            }

            where["deleted"] = 0;

            CodPayment.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .populate("office")
                .populate("category")
                .populate("sub_category")
                .populate("city")
                .populate("added_by")
                .populate("action_by")
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    CodPayment.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_cod_expense_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            CodPayment.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Marketing expense category not found",
                            token: req.token,
                        });
                    } else {
                        CodPayment.findOneAndUpdate(
                            where,
                            {
                                active: req.body.active,
                                reason: req.body.reason,
                                action_by: req.body.action_by,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    get_cod_expense: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            CodPayment.findOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid expense id",
                        token: req.token,
                    });
                });
        }
    },

    delete_cod_expense: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            CodPayment.findOneAndUpdate(
                where,
                {
                    deleted: 1,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Marketing expense category has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    update_cod_expense: function (req, res) {
        multi_upload(req, res, function (error) {
            if (error) {
                res.status(200).send({
                    status: "error",
                    message: error.code,
                    token: req.token,
                });
            } else {
                ////
                if (req.files.length > 0) {
                    var where = {};
                    where["_id"] = req.query.id;
                    CodPayment.findOne(where).then((response) => {
                        var file = response.file;
                        req.files.forEach(function (arrayItem) {
                            file.push(arrayItem);
                        });

                        var where = {};
                        where["_id"] = req.query.id;
                        CodPayment.findOneAndUpdate(
                            where,
                            {
                                category: req.query.category,
                                sub_category: req.query.sub_category,
                                city: req.query.city,
                                office: req.query.office,
                                amount: req.query.amount,
                                date_of_payment: req.query.date_of_payment,
                                comment: req.query.comment,
                                added_by: req.query.added_by,
                                number: req.query.number,
                                delivery_boy: req.query.delivery_boy,
                                payment_recvied: req.query.payment_recvied,
                                delivery_boy: req.query.delivery_boy,
                                file: file,
                                office_type: req.query.office_type,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Other category has been updated",
                                    token: req.token,
                                });
                                return;
                            });
                    });
                } else {
                    var where = {};
                    where["_id"] = req.query.id;
                    CodPayment.findOneAndUpdate(
                        where,
                        {
                            category: req.query.category,
                            sub_category: req.query.sub_category,
                            city: req.query.city,
                            office: req.query.office,
                            amount: req.query.amount,
                            date_of_payment: req.query.date_of_payment,
                            comment: req.query.comment,
                            number: req.query.number,
                            delivery_boy: req.query.delivery_boy,
                            payment_recvied: req.query.payment_recvied,
                            delivery_boy: req.query.delivery_boy,
                            added_by: req.query.added_by,
                            office_type: req.query.office_type,
                        },
                        {
                            new: true,
                        }
                    )
                        .exec()
                        .then((response) => {
                            res.status(200).send({
                                status: "success",
                                message: "Marketing has been updated",
                                token: req.token,
                            });
                            return;
                        });
                }
            }
        });
    },

    delete_cod_expense_file: function (req, res) {
        var file = req.query.file.split("/").pop().split("#")[0].split("?")[0];
        var params = {
            Bucket: "swagbag-files",
            Key: file,
        };

        s3.deleteObject(params, function (err, data) {
            if (err) {
                res.status(200).send({
                    status: "error",
                    message: err.stack,
                    token: req.token,
                });
            } else {
                var where = {};
                where["_id"] = req.query.id;
                CodPayment.findOne(where).then((response) => {
                    var file = response.file;
                    file.splice(req.query.index, 1);

                    var where = {};
                    where["_id"] = req.query.id;
                    CodPayment.findOneAndUpdate(
                        where,
                        {
                            file: file,
                        },
                        {
                            new: true,
                        }
                    )
                        .exec()
                        .then((response) => {
                            res.status(200).send({
                                status: "success",
                                message: "File has been deleted",
                                token: req.token,
                            });
                            return;
                        });
                });
            }
        });
    },

    all_delivery_boy_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["deleted"] = 0;
            where["user_type"] = "delivery_boy";

            Users.find(where, null)
                .populate("parent", "name")
                .populate("master")
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    ///// End COD Requisition Expense ///////////

    ///// Start currency ///////////

    add_currency: function (req, res) {
        var where = {};
        where["name"] = req.body.name;
        where["deleted"] = 0;
        Currency.findOne(where).then((response) => {
            if (response != null) {
                res.status(200).send({
                    status: "error",
                    message: "Currency exist in the database.",
                });
            } else {
                var Currencydata = new Currency({
                    name: req.body.name,
                    code: req.body.code,
                    symbol: req.body.symbol,
                    value: req.body.value,
                });
                Currencydata.save(function (err, response) {
                    if (err) {
                        res.status(200).send({
                            status: "error",
                            message: err.message,
                            token: req.token,
                        });
                    } else {
                        res.status(200).send({
                            status: "success",
                            message: "Currency has been created successfully.",
                        });
                    }
                });
            }
        });
    },

    currency_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.body.name && req.body.name != "") {
                where["name"] = {
                    $regex: ".*" + req.body.name,
                    $options: "i",
                };
            }

            if (req.body.code && req.body.code != "") {
                where["code"] = {
                    $regex: ".*" + req.body.code,
                    $options: "i",
                };
            }

            if (req.body.active && req.body.active != "") {
                where["active"] = req.body.active;
            }

            Currency.find(where, null, {
                limit: parseInt(req.body.limit),
                skip: parseInt(req.body.page),
            })
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    Currency.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_currency_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Currency.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Currency not found",
                            token: req.token,
                        });
                    } else {
                        if (response.active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        Currency.findOneAndUpdate(
                            where,
                            {
                                active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    update_currency: function (req, res) {
        var where = {};
        where["_id"] = req.body.id;
        Currency.findOneAndUpdate(
            where,
            {
                name: req.body.name,
                code: req.body.code,
                symbol: req.body.symbol,
                value: req.body.value,
            },
            {
                new: true,
            }
        )
            .exec()
            .then((response) => {
                res.status(200).send({
                    status: "success",
                    message: "Currency has been updated",
                    token: req.token,
                });
                return;
            });
    },

    get_currency: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Currency.findOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid brand id",
                        token: req.token,
                    });
                });
        }
    },

    delete_currency: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Currency.findOneAndDelete(where, {
                deleted: 1,
            })

                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Currency has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    default_currency: function (req, res) {
        Currency.updateMany(
            {},
            {
                is_default: 0,
            },
            {
                new: true,
            }
        )
            .exec()
            .then((response) => {
                var where = {};
                where["_id"] = req.body.id;
                Currency.findOneAndUpdate(
                    where,
                    {
                        is_default: 1,
                        active: 1,
                    },
                    {
                        new: true,
                    }
                )
                    .exec()
                    .then((response) => {
                        res.status(200).send({
                            status: "success",
                            message: "Default currency has been updated",
                            token: req.token,
                        });
                        return;
                    });
            });
    },
    ///// End currency ///////////
    ///// Start Brand ///////////

    add_master_category: function (req, res) {
        if (!req.query.name || req.query.name == "") {
            res.status(200).send({
                status: "error",
                message: "Enter brand name",
                token: req.token,
            });
        } else {
            upload(req, res, function (error) {
                if (error) {
                    var where = {};
                    where["name"] = req.query.name;
                    where["deleted"] = 0;
                    MasterCategory.findOne(where).then((response) => {
                        if (response != null) {
                            res.status(200).send({
                                status: "error",
                                message: "Master category exist in the database.",
                            });
                        } else {
                            var MasterCategorydata = new MasterCategory({
                                name: req.query.name,
                                desc: req.query.desc,
                                short_desc: req.query.short_desc,
                            });
                            MasterCategorydata.save(function (err, response) {
                                if (err) {
                                    res.status(200).send({
                                        status: "error",
                                        message: err,
                                        token: req.token,
                                    });
                                } else {
                                    res.status(200).send({
                                        status: "success",
                                        message: "Master category has been created successfully.",
                                    });
                                }
                            });
                        }
                    });
                } else {
                    var where = {};
                    where["name"] = req.query.name;
                    MasterCategory.findOne(where).then((response) => {
                        if (response != null) {
                            res.status(200).send({
                                status: "error",
                                message: "Master category exist in the database.",
                            });
                        } else {
                            var MasterCategorydata = new MasterCategory({
                                name: req.query.name,
                                desc: req.query.desc,
                                short_desc: req.query.short_desc,
                                file: req.files.length > 0 ? req.files[0].location : null,
                            });
                            MasterCategorydata.save(function (err, response) {
                                if (err) {
                                    res.status(200).send({
                                        status: "error",
                                        message: err,
                                        token: req.token,
                                    });
                                } else {
                                    res.status(200).send({
                                        status: "success",
                                        message: "Master category has been created successfully.",
                                    });
                                }
                            });
                        }
                    });
                }
            });
        }
    },

    master_category_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.name != "") {
                where["name"] = {
                    $regex: ".*" + req.query.name,
                    $options: "i",
                };
            }

            if (req.query.active != "") {
                where["active"] = req.query.active;
            }

            where["deleted"] = 0;

            MasterCategory.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .populate("parent", "name")
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    MasterCategory.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_master_category_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            MasterCategory.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Master category not found",
                            token: req.token,
                        });
                    } else {
                        if (response.active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        MasterCategory.findOneAndUpdate(
                            where,
                            {
                                active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    update_master_category: function (req, res) {
        if (!req.query.name || req.query.name == "") {
            res.status(200).send({
                status: "error",
                message: "Enter Mmaster category name",
                token: req.token,
            });
        }
        if (!req.query.id || req.query.id == "") {
            res.status(200).send({
                status: "error",
                message: "Enter master category id",
                token: req.token,
            });
        } else {
            upload(req, res, function (error) {
                if (error) {
                    var where = {};
                    where["_id"] = req.query.id;
                    MasterCategory.findOneAndUpdate(
                        where,
                        {
                            name: req.query.name,
                            desc: req.query.desc,
                            short_desc: req.query.short_desc,
                            update_date: moment().format(),
                            //file: ""
                        },
                        {
                            new: true,
                        }
                    )
                        .exec()
                        .then((response) => {
                            res.status(200).send({
                                status: "success",
                                message: "Master category has been updated",
                                token: req.token,
                            });
                            return;
                        });
                    ////
                } else {
                    var where = {};
                    where["_id"] = req.query.id;

                    var updatedata = {};
                    updatedata["name"] = req.query.name;
                    updatedata["desc"] = req.query.desc;
                    updatedata["short_desc"] = req.query.short_desc;
                    updatedata["update_date"] = moment().format();
                    if (req.files[0]) {
                        updatedata["file"] = req.files[0].location;
                    }

                    MasterCategory.findOneAndUpdate(where, updatedata, {
                        new: true,
                    })
                        .exec()
                        .then((response) => {
                            res.status(200).send({
                                status: "success",
                                message: "Master category has been updated..",
                                token: req.token,
                            });
                        });
                }
            });
        }
    },

    get_master_category: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            MasterCategory.findOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid brand id",
                        token: req.token,
                    });
                });
        }
    },

    delete_master_category: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            MasterCategory.findOneAndUpdate(
                where,
                {
                    deleted: 1,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Master category has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },
    parent_master_category_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["active"] = 1;
            where["deleted"] = 0;
            MasterCategory.find(where)
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },
    ///// End Brand ///////////

    all_parent_category_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["active"] = 1;
            where["deleted"] = 0;
            MasterCategory.find(where)
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    add_section_image: function (req, res) {
        upload(req, res, function (error) {
            if (error) {
                res.status(200).send({
                    status: "error",
                    message: "Something went wrong",
                    token: req.token,
                });
            } else {
                var where = {};
                where["page"] = req.body.page;
                where["section"] = req.body.section;
                SectionImage.find(where).countDocuments(function (err, count) {
                    if (count > 0 && req.body.section != "1" && req.body.template == "1") {
                        res.status(200).send({
                            status: "error",
                            message: "No more images allowed for the section. Delete current image and then try again.",
                            token: req.token,
                        });

                        var old_image = req.files[0].location.split("/").pop().split("#")[0].split("?")[0];
                        var params = {
                            Bucket: "swagbag-files",
                            Key: old_image,
                        };

                        s3.deleteObject(params, function (err, data) {
                            if (err) console.log(err, err.stack);
                            else console.log(data);
                        });

                        return;
                    } else if (count > 0 && req.body.template == "1") {
                        res.status(200).send({
                            status: "error",
                            message: "No more images allowed for the section. Delete current image and then try again.",
                            token: req.token,
                        });

                        var old_image = req.files[0].location.split("/").pop().split("#")[0].split("?")[0];
                        var params = {
                            Bucket: "swagbag-files",
                            Key: old_image,
                        };

                        s3.deleteObject(params, function (err, data) {
                            if (err) console.log(err, err.stack);
                            else console.log(data);
                        });

                        return;
                    } else {
                        if (req.files.length > 0) {
                            var SectionImageData = new SectionImage({
                                name: req.body.name,
                                url: req.body.url,
                                section: req.body.section,
                                page: req.body.page,
                                template: req.body.template,
                                file: req.files[0].location,
                            });
                            SectionImageData.save(function (err, response) {
                                if (err) {
                                    res.status(200).send({
                                        status: "error",
                                        message: err,
                                        token: req.token,
                                    });
                                } else {
                                    res.status(200).send({
                                        status: "success",
                                        message: "Image has been created successfully.",
                                    });
                                }
                            });
                        } else {
                            res.status(200).send({
                                status: "error",
                                message: "Select image to upload.",
                            });
                        }
                    }
                });
            }
        });
    },

    update_section_image: function (req, res) {
        upload(req, res, function (error) {
            if (error) {
                res.status(200).send({
                    status: "error",
                    message: "Something went wrong",
                    token: req.token,
                });
            } else {
                var where = {};
                where["_id"] = req.body.id;
                SectionImage.findOne(where)
                    .then((response) => {
                        if (response) {
                            if (req.files.length > 0) {
                                // var old_image = response.file.split("/").pop().split("#")[0].split("?")[0];
                                // var params = {
                                //     Bucket: "swagbag-files",
                                //     Key: old_image,
                                // };

                                // s3.deleteObject(params, function (err, data) {
                                //     if (err) console.log(err, err.stack);
                                //     else console.log(data);
                                // });
                                var where = {};
                                where["_id"] = req.body.id;
                                SectionImage.findOneAndUpdate(
                                    where,
                                    {
                                        file: req.files[0].location,
                                        name: req.body.name,
                                        url: req.body.url,
                                    },
                                    {
                                        new: true,
                                    }
                                )
                                    .exec()
                                    .then((response) => {
                                        res.status(200).send({
                                            status: "success",
                                            message: "Section image has been updated",
                                            token: req.token,
                                        });
                                    })
                                    .catch((error) => {
                                        res.status(200).send({
                                            status: "error",
                                            message: "Something went wrong",
                                            token: req.token,
                                        });
                                    });
                            } else {
                                var where = {};
                                where["_id"] = req.body.id;
                                SectionImage.findOneAndUpdate(
                                    where,
                                    {
                                        url: req.body.url,
                                        name: req.body.name,
                                    },
                                    {
                                        new: true,
                                    }
                                )
                                    .exec()
                                    .then((response) => {
                                        res.status(200).send({
                                            status: "success",
                                            message: "Section image has been updated",
                                            token: req.token,
                                        });
                                    })
                                    .catch((error) => {
                                        res.status(200).send({
                                            status: "error",
                                            message: "Something went wrong",
                                            token: req.token,
                                        });
                                    });
                            }
                        } else {
                            res.status(200).send({
                                status: "error",
                                message: "Select image to upload.",
                            });
                        }
                    })
                    .catch((error) => {
                        res.status(200).send({
                            status: "error",
                            message: error,
                            token: req.token,
                        });
                    });
            }
        });
    },

    section_image_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["parent"] = null;

            if (req.query.type != "") {
                where["page"] = req.query.type;
            }

            SectionImage.find(where)
                .sort({
                    section: 1,
                })
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    delete_section_image: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            SectionImage.findOne(where).then((response) => {
                var old_image = response.file.split("/").pop().split("#")[0].split("?")[0];
                var params = {
                    Bucket: "swagbag-files",
                    Key: old_image,
                };

                s3.deleteObject(params, function (err, data) {
                    if (err) console.log(err, err.stack);
                    else console.log(data);
                });

                var where = {};
                where["_id"] = req.query.id;
                SectionImage.deleteOne(where)
                    .then((response) => {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                        });
                    })
                    .catch((error) => {
                        res.status(200).send({
                            status: "error",
                            message: error,
                            token: req.token,
                        });
                    });
            });
        }
    },

    ////// Country Start /////////
    create_country: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["name"] = req.body.name;
            where["deleted"] = 0;
            Country.findOne(where).then((response) => {
                if (response != null) {
                    res.status(200).send({
                        status: "error",
                        message: "Country exist in the database.",
                    });
                } else {
                    var CountryData = new Country({
                        country_code: req.body.country_code,
                        name: req.body.name,
                        price_per_kg: req.body.price_per_kg,
                        price_cubic_cm: req.body.price_cubic_cm,
                    });
                    CountryData.save(function (err, response) {
                        if (err) {
                            res.status(200).send({
                                status: "error",
                                message: err,
                                token: req.token,
                            });
                        } else {
                            res.status(200).send({
                                status: "success",
                                message: "Country has been created successfully.",
                            });
                        }
                    });
                }
            });
        }
    },

    country_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.name != "") {
                where["name"] = {
                    $regex: ".*" + req.query.name,
                    $options: "i",
                };
            }

            if (req.query.active != "") {
                where["active"] = req.query.active;
            }

            where["deleted"] = 0;

            Country.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    Country.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    all_country_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            where["active"] = 1;
            where["deleted"] = 0;

            Country.find(where)
                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_country_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Country.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Country not found",
                            token: req.token,
                        });
                    } else {
                        if (response.active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        Country.findOneAndUpdate(
                            where,
                            {
                                active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    get_country: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Country.findOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid country id",
                        token: req.token,
                    });
                });
        }
    },

    update_country: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;

            var updatedata = {};
            updatedata["name"] = req.body.name;
            updatedata["country_code"] = req.body.country_code;
            updatedata["price_per_kg"] = req.body.price_per_kg;
            updatedata["price_cubic_cm"] = req.body.price_cubic_cm;
            updatedata["update_date"] = moment().format();
            Country.findOneAndUpdate(where, updatedata, {
                new: true,
            })
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Country has been updated..",
                        token: req.token,
                    });
                });
        }
    },
    delete_country: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Country.findOneAndUpdate(
                where,
                {
                    deleted: 1,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Child stock has been updated",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    ///// Country End ////////

    update_child_stock: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Products.findOne(where)
                .then((response) => {
                    var option = response.options[req.body.index];
                    var selected_option = option.value.split(",")[req.body.index2].split(":");
                    var new_option = selected_option[0] + ":" + selected_option[1] + ":" + selected_option[2] + ":" + req.body.value;
                    var new_option2 = option.value.split(",");
                    new_option2.splice(new_option2.indexOf(option.value.split(",")[req.body.index2]), 1, new_option);
                    var final = new_option2.join();

                    var final_option = response.options;
                    final_option.splice(req.body.index, 1, {
                        name: option.name,
                        value: final,
                    });

                    var where = {};
                    where["_id"] = req.body.id;
                    Products.findOneAndUpdate(
                        where,
                        {
                            options: final_option,
                        },
                        {
                            new: true,
                        }
                    )
                        .exec()
                        .then((response) => {
                            res.status(200).send({
                                status: "success",
                                message: "Stock has been updated",
                                token: req.token,
                            });
                        })
                        .catch((error) => {
                            res.status(200).send({
                                status: "error",
                                message: "Something went wrong",
                                token: req.token,
                            });
                        });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error.message,
                        token: req.token,
                    });
                });
        }
    },

    update_parent_stock: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            Products.findOneAndUpdate(
                where,
                {
                    stock_qty: req.body.value,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Parent stock has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    ////

    ///// Start Deactivate Reason ///////////

    add_reason_reason: function (req, res) {
        if (!req.query.name || req.query.name == "") {
            res.status(200).send({
                status: "error",
                message: "Enter brand name",
                token: req.token,
            });
        } else {
            upload(req, res, function (error) {
                if (error) {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                } else {
                    var DeactivateReasonData = new DeactivateReason({
                        name: req.query.name,
                    });
                    DeactivateReasonData.save(function (err, response) {
                        if (err) {
                            res.status(200).send({
                                status: "error",
                                message: err,
                                token: req.token,
                            });
                        } else {
                            res.status(200).send({
                                status: "success",
                                message: "Deactivate reason has been created successfully.",
                            });
                        }
                    });
                }
            });
        }
    },

    deactivate_reason_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.name != "") {
                where["name"] = {
                    $regex: ".*" + req.query.name,
                    $options: "i",
                };
            }

            if (req.query.active != "") {
                where["active"] = req.query.active;
            }

            where["deleted"] = 0;

            DeactivateReason.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })

                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    DeactivateReason.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_deactivate_reason_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            DeactivateReason.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Deactivate reason not found",
                            token: req.token,
                        });
                    } else {
                        if (response.active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        DeactivateReason.findOneAndUpdate(
                            where,
                            {
                                active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    update_deactivate_reason: function (req, res) {
        if (!req.query.name || req.query.name == "") {
            res.status(200).send({
                status: "error",
                message: "Enter name",
                token: req.token,
            });
        }
        if (!req.query.id || req.query.id == "") {
            res.status(200).send({
                status: "error",
                message: "Enter id",
                token: req.token,
            });
        } else {
            upload(req, res, function (error) {
                if (error) {
                    ////
                    var where = {};
                    where["_id"] = req.query.id;
                    DeactivateReason.findOneAndUpdate(
                        where,
                        {
                            name: req.query.name,
                            update_date: moment().format(),
                        },
                        {
                            new: true,
                        }
                    )
                        .exec()
                        .then((response) => {
                            res.status(200).send({
                                status: "success",
                                message: "Deactivate reason has been updated",
                                token: req.token,
                            });
                            return;
                        });
                    ////
                } else {
                    var where = {};
                    where["_id"] = req.query.id;

                    var updatedata = {};
                    updatedata["name"] = req.query.name;
                    updatedata["update_date"] = moment().format();
                    if (req.files[0]) {
                        updatedata["file"] = req.files[0].location;
                    }

                    DeactivateReason.findOneAndUpdate(where, updatedata, {
                        new: true,
                    })
                        .exec()
                        .then((response) => {
                            res.status(200).send({
                                status: "success",
                                message: "Deactivate reason has been updated",
                                token: req.token,
                            });
                        });
                }
            });
        }
    },

    get_deactivate_reason: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            DeactivateReason.findOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid id",
                        token: req.token,
                    });
                });
        }
    },

    delete_deactivate_reason: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            DeactivateReason.findOneAndUpdate(
                where,
                {
                    deleted: 1,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Deactivate reason has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    ///// End Deactivate Reason ///////////

    ///// Start Return Reason ///////////

    add_return_reason: function (req, res) {
        if (!req.query.name || req.query.name == "") {
            res.status(200).send({
                status: "error",
                message: "Enter brand name",
                token: req.token,
            });
        } else {
            upload(req, res, function (error) {
                if (error) {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                } else {
                    var ReturnReasonData = new ReturnReason({
                        name: req.query.name,
                    });
                    ReturnReasonData.save(function (err, response) {
                        if (err) {
                            res.status(200).send({
                                status: "error",
                                message: err,
                                token: req.token,
                            });
                        } else {
                            res.status(200).send({
                                status: "success",
                                message: "Return reason has been created successfully.",
                            });
                        }
                    });
                }
            });
        }
    },

    return_reason_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.name != "") {
                where["name"] = {
                    $regex: ".*" + req.query.name,
                    $options: "i",
                };
            }

            if (req.query.active != "") {
                where["active"] = req.query.active;
            }

            where["deleted"] = 0;

            ReturnReason.find(where, null, {
                limit: parseInt(req.query.limit),
                skip: parseInt(req.query.page),
            })

                .sort({
                    created_date: -1,
                })
                .then((response) => {
                    ReturnReason.find(where).countDocuments(function (err, count) {
                        res.status(200).send({
                            status: "success",
                            token: req.token,
                            result: response,
                            totalCount: count,
                        });
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_return_reason_status: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            ReturnReason.findOne(where)
                .then((response) => {
                    if (response == null) {
                        res.status(200).send({
                            status: "error",
                            message: "Return reason not found",
                            token: req.token,
                        });
                    } else {
                        if (response.active == 0) {
                            var active = 1;
                        } else {
                            var active = 0;
                        }
                        ReturnReason.findOneAndUpdate(
                            where,
                            {
                                active: active,
                            },
                            {
                                new: true,
                            }
                        )
                            .exec()
                            .then((response) => {
                                res.status(200).send({
                                    status: "success",
                                    message: "Status updated",
                                    token: req.token,
                                    active: active,
                                });
                            })
                            .catch((error) => {
                                res.status(200).send({
                                    status: "error",
                                    message: "Something went wrong",
                                    token: req.token,
                                });
                            });
                    }
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    update_return_reason: function (req, res) {
        if (!req.query.name || req.query.name == "") {
            res.status(200).send({
                status: "error",
                message: "Enter name",
                token: req.token,
            });
        }
        if (!req.query.id || req.query.id == "") {
            res.status(200).send({
                status: "error",
                message: "Enter id",
                token: req.token,
            });
        } else {
            upload(req, res, function (error) {
                if (error) {
                    ////
                    var where = {};
                    where["_id"] = req.query.id;
                    ReturnReason.findOneAndUpdate(
                        where,
                        {
                            name: req.query.name,
                            update_date: moment().format(),
                        },
                        {
                            new: true,
                        }
                    )
                        .exec()
                        .then((response) => {
                            res.status(200).send({
                                status: "success",
                                message: "Return reason has been updated",
                                token: req.token,
                            });
                            return;
                        });
                    ////
                } else {
                    var where = {};
                    where["_id"] = req.query.id;

                    var updatedata = {};
                    updatedata["name"] = req.query.name;
                    updatedata["update_date"] = moment().format();
                    if (req.files[0]) {
                        updatedata["file"] = req.files[0].location;
                    }

                    ReturnReason.findOneAndUpdate(where, updatedata, {
                        new: true,
                    })
                        .exec()
                        .then((response) => {
                            res.status(200).send({
                                status: "success",
                                message: "Return reason has been updated",
                                token: req.token,
                            });
                        });
                }
            });
        }
    },

    get_return_reason: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.body.id;
            ReturnReason.findOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Invalid id",
                        token: req.token,
                    });
                });
        }
    },

    delete_return_reason: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            ReturnReason.findOneAndUpdate(
                where,
                {
                    deleted: 1,
                },
                {
                    new: true,
                }
            )
                .exec()
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        message: "Return reason has been deleted",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: "Something went wrong",
                        token: req.token,
                    });
                });
        }
    },

    update_customer_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            if (req.body.id && req.body.id != "") {
                where["_id"] = req.body.id;
            }
            Address.findOne(where).then((response) => {
                Address.findOneAndUpdate(
                    where,
                    {
                        title: req.body.title,
                        address: req.body.address,
                        address2: req.body.address2,
                        country: req.body.country,
                        city: req.body.city,
                        pincode: req.body.pincode,
                        contact_name: req.body.contact_name,
                        contact_mobile: req.body.contact_mobile,
                        state: req.body.state,
                        post_office: req.body.post_office,
                        position: {
                            type: "Point",
                            coordinates: [req.body.lat ? req.body.lat : 0, req.body.lng ? req.body.lng : 0],
                        },
                    },
                    {
                        new: true,
                    }
                )
                    .exec()
                    .then((response) => {
                        res.status(200).send({
                            status: "success",
                            message: "Address has been updated.",
                            token: req.token,
                        });
                    })
                    .catch((error) => {
                        res.status(200).send({
                            status: "error",
                            message: "Something went wrong",
                            token: req.token,
                        });
                    });
            });
            // Users.aggregate([
            //   { $limit: parseInt(req.query.limit) },
            //   { $skip: parseInt(req.query.page) },
            //   { $match: where },
            //   { $sort: { created_date: -1 } },
            //   {  $lookup: {  from: "addresses", localField: "_id",  foreignField: "user", as: "address" } }
            // ]).then(response => {
            //   Users.find(where).countDocuments(function (err, count) {
            //     res.status(200).send({
            //       status: "success",
            //       token: req.token,
            //       result: response,
            //       totalCount: count,
            //     });
            //   });
            // });

            // Users.find(where)
            //     .sort({
            //         created_date: -1,
            //     })
            //     .then((response) => {
            //         Users.find(where).countDocuments(function (err, count) {
            //             res.status(200).send({
            //                 status: "success",
            //                 token: req.token,
            //                 result: response,
            //                 totalCount: count,
            //             });
            //         });
            //     })
            //     .catch((error) => {
            //         res.status(200).send({
            //             status: "error",
            //             message: error,
            //             token: req.token,
            //         });
            //     });
        }
    },

    bulk_upload: async function (req, res) {
        const file = req.file;
        if (!file) {
            res.status(200).send({
                status: "error",
                message: "No zip file selected",
            });
        }

        var target = "/var/www/html/api/uploads/";

        if (!fs.existsSync(target)) {
            fs.mkdirSync(target);
        }

        try {
            await extract(file.path, { dir: target });
            var csvData = [];
            fs.createReadStream(target + "bulk_upload/products.csv")
                .pipe(csv())
                .on("data", function (data) {
                    try {
                        csvData.push(data);
                    } catch (err) {
                        console.log("U1:", err);
                        //error handler
                    }
                })
                .on("end", async function () {
                    let s3bucket = new aws.S3({
                        accessKeyId: "AKIAYFSHH6MZEYZ7IEGA",
                        secretAccessKey: "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",
                        Bucket: "swagbag-files",
                    });

                    for (let i = 0; i < csvData.length; i++) {
                        var FileResponseData = [];
                        var files = csvData[i].file.split(",");

                        for (let i = 0; i < files.length; i++) {
                            var params = {
                                Bucket: "swagbag-files",
                                Key: Date.now().toString() + Math.random().toString(36).substring(2, 7) + path.extname(files[i]),
                                Body: fs.createReadStream(target + "bulk_upload/images/" + files[i]),
                                ACL: "public-read",
                            };
                            // console.log(params);

                            const putObjectWrapper = (params) => {
                                return new Promise((resolve, reject) => {
                                    s3bucket.upload(params, function (err, result) {
                                        if (err) console.log("AWS", err);
                                        if (err) reject(err);
                                        if (result) resolve(result);
                                    });
                                });
                            };

                            var aws_res = await putObjectWrapper(params);
                            FileResponseData.push(aws_res);
                        }

                        var mew_files = [];
                        for (let img = 0; img < FileResponseData.length; img++) {
                            mew_files.push({
                                location: FileResponseData[img].Location,
                            });
                        }

                        var ProductsData = new Products({
                            options: csvData[i].options != "" ? JSON.parse(csvData[i].options) : [],
                            product_types:
                                csvData[i].product_types != ""
                                    ? csvData[i].product_types.split(",").map(function (a) {
                                          return mongoose.Types.ObjectId(a.trim());
                                      })
                                    : null,
                            combo_products:
                                csvData[i].combo_products != ""
                                    ? csvData[i].combo_products.split(",").map(function (a) {
                                          return mongoose.Types.ObjectId(a.trim());
                                      })
                                    : null,
                            city: null,
                            name: csvData[i].name,
                            master_category:
                                csvData[i].master_category != ""
                                    ? csvData[i].master_category.split(",").map(function (a) {
                                          return mongoose.Types.ObjectId(a.trim());
                                      })
                                    : null,
                            category:
                                csvData[i].category != ""
                                    ? csvData[i].category.split(",").map(function (a) {
                                          return mongoose.Types.ObjectId(a.trim());
                                      })
                                    : null,
                            sub_category:
                                csvData[i].sub_category != ""
                                    ? csvData[i].sub_category.split(",").map(function (a) {
                                          return mongoose.Types.ObjectId(a.trim());
                                      })
                                    : null,
                            cuisine: null,
                            brand: mongoose.Types.ObjectId(csvData[i].brand.trim()),
                            vendor: mongoose.Types.ObjectId(csvData[i].vendor.trim()),
                            desc: csvData[i].desc,
                            //additional_description: csvData[i].additional_description,
                            details: csvData[i].details,
                            short_desc: csvData[i].short_desc,
                            price: Number(csvData[i].price),
                            file: mew_files,
                            express: false,
                            selling_price: csvData[i].selling_price,
                            batchno: csvData[i].batchno,
                            packaging_charge: csvData[i].packaging_charge,
                            tax_status: csvData[i].tax_status,
                            cgst: "",
                            sgst: "",
                            igst: "",
                            sku: csvData[i].sku,
                            stock_qty: csvData[i].stock_qty,
                            //manage_stock: csvData[i].manage_stock != "" ? csvData[i].manage_stock : 0,
                            weight: csvData[i].weight,
                            length: csvData[i].length,
                            width: csvData[i].width,
                            height: csvData[i].height,
                            shipping: "",
                            tags: csvData[i].tags,
                            deal: csvData[i].deal,
                            featured: csvData[i].featured,
                            added_by: null,
                            point: csvData[i].point,
                            stock_product: null,
                            consumable: null,
                            shelving_location: csvData[i].shelving_location,
                            video_url: csvData[i].product_video,
                            returnable: csvData[i].returnable,
                            return_day: csvData[i].return_day,
                            start_date: csvData[i].start_date,
                            end_date: csvData[i].end_date,

                            bin_location: csvData[i].bin_location,
                            fulfilment_center: csvData[i].fulfilment_center,
                            expiry_date: csvData[i].expiry_date,
                            up_code: csvData[i].up_code,
                            hs_code: csvData[i].hs_code,
                            country_of_origin: csvData[i].country_of_origin,
                            unit_cost: csvData[i].unit_cost,
                            profit_margin: csvData[i].profit_margin,

                            additional_description: csvData[i].shipping_return,
                            vendor_sku: csvData[i].vendor_sku,
                        });
                        ProductsData.save(function (err, response) {
                            if (err) {
                                console.log("UDB", err);
                            } else {
                            }
                        });
                    }

                    fs.rmSync(target + "bulk_upload", { recursive: true, force: true });
                    fs.unlinkSync(file.path);
                })
                .on("error", function (err) {
                    console.log("Read Error", err);
                });

            res.status(200).send({
                status: "success",
                message: "Product has been added.",
            });
        } catch (err) {
            console.log("UE:", err);
            // handle any errors
        }
    },

    ///// End Return Reason ///////////

    add_landing_extra: function (req, res) {
        upload_any(req, res, function (error) {
            if (error) {
                res.status(200).send({
                    status: "success",
                    message: error,
                });
                return;
            } else {
                if (req.body.grid == "") {
                    res.status(200).send({
                        status: "error",
                        message: "Grid is required",
                    });
                    return;
                }

                var insertdata = {};
                for (let i = 0; i < req.files.length; i++) {
                    insertdata[req.files[i].fieldname] = req.files[i].location;
                }

                insertdata["grid"] = req.body.grid;

                insertdata["url1"] = req.body.url1;
                insertdata["url2"] = req.body.url2;
                insertdata["url3"] = req.body.url3;
                insertdata["url4"] = req.body.url4;
                insertdata["url5"] = req.body.url5;
                insertdata["url6"] = req.body.url6;
                insertdata["url7"] = req.body.url7;

                var LandingData = new Landing(insertdata);
                LandingData.save(function (err, response) {
                    res.status(200).send({
                        status: "success",
                        message: "Grid section added",
                    });
                });
            }
        });
    },

    grid_image_list: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};

            if (req.query.type != "") {
                where["page"] = req.query.type;
            }

            Landing.find(where)
                .sort({
                    sort: 1,
                })
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                        result: response,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_landing_extra: function (req, res) {
        upload_any(req, res, function (error) {
            if (error) {
                res.status(200).send({
                    status: "success",
                    message: error,
                });
                return;
            } else {
                if (req.body.grid == "") {
                    res.status(200).send({
                        status: "error",
                        message: "Grid is required",
                    });
                    return;
                }

                var updatedata = {};
                for (let i = 0; i < req.files.length; i++) {
                    updatedata[req.files[i].fieldname] = req.files[i].location;
                }

                updatedata["grid"] = req.body.grid;

                updatedata["url1"] = req.body.url1;
                updatedata["url2"] = req.body.url2;
                updatedata["url3"] = req.body.url3;
                updatedata["url4"] = req.body.url4;
                updatedata["url5"] = req.body.url5;
                updatedata["url6"] = req.body.url6;
                updatedata["url7"] = req.body.url7;

                var where = {};
                where["_id"] = req.body.id;
                Landing.findOneAndUpdate(where, updatedata, {
                    new: true,
                })
                    .exec()
                    .then((response) => {
                        res.status(200).send({
                            status: "success",
                            message: "Data has been updated",
                            token: req.token,
                        });
                    })
                    .catch((error) => {
                        res.status(200).send({
                            status: "error",
                            message: "Something went wrong",
                            token: req.token,
                        });
                    });
            }
        });
    },

    delete_grid: function (req, res) {
        const errors = validationResult(req);
        if (Object.keys(errors.array()).length > 0) {
            res.status(200).send({
                status: "validation_error",
                errors: errors.array(),
                token: req.token,
            });
        } else {
            var where = {};
            where["_id"] = req.query.id;
            Landing.deleteOne(where)
                .then((response) => {
                    res.status(200).send({
                        status: "success",
                        token: req.token,
                    });
                })
                .catch((error) => {
                    res.status(200).send({
                        status: "error",
                        message: error,
                        token: req.token,
                    });
                });
        }
    },

    update_landing_extra_sort: async function (req, res) {
        var orders = req.body.orders;

        for (let i = 0; i < orders.length; i++) {
            var where = {};
            where["_id"] = orders[i].id;
            await Landing.findOneAndUpdate(
                where,
                { sort: orders[i].order },
                {
                    new: true,
                }
            ).exec();
        }

        res.status(200).send({
            status: "success",
            message: "Data has been updated",
            token: req.token,
        });
    },

    test: function (req, res) {
        var data = JSON.stringify({
            action: "CREATE",
            fields: {
                itemId: "aTaefst f WITfffH TdOK8EN THINGG",
                itemType: "inventoryitem",
                displayname: "Test Item 1 2 3 4",
                itemdesc: "dddNEW DESCRIPTION Item description please fill",
                upccode: "12345678",
                basePrice: 60,
                cost: 10,
                mastercategory: "ADD THIS",
                category: "BRAND1122434,CATEGORY112,CATEGORY1123",
                "ids from": "swagbag",
                subcategory: "subcategory1,subcategory3",
                brand: "",
                taxable: 1,
                options: {
                    color: "#00FF00",
                    size: "L",
                    option3: "",
                    option4: "",
                    option5: "",
                },
            },
        });

        var config = {
            method: "post",
            url: "https://7454786.extforms.netsuite.com/app/site/hosting/scriptlet.nl?script=75&deploy=1&compid=7454786&h=76882e989e51c8e87140",
            headers: {
                "Content-Type": "application/json",
                "User-Agent": "Mozilla/5.0",
                token: "123",
            },
            data: data,
        };

        axios(config)
            .then(function (response) {
                console.log(JSON.stringify(response.data));
            })
            .catch(function (error) {
                console.log(error);
            });
    },
};
